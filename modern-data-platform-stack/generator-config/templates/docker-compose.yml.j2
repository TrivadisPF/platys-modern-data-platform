# =======================================================================
# Platform Name            {{platys['platform-name']}}
# Platform Stack:          {{platys['platform-stack']}}
# Platform Stack Version:  {{platys['platform-stack-version']}}
# =======================================================================
version: "{{ DOCKER_COMPOSE_VERSION |default(3.5) }}"

networks:
  default:
    name: {{platys['platform-name']}}

{% if data_center_to_use > 0 and data_centers is defined and data_centers %}
  {% set dataCenter = '-' ~ data_centers.split(',')[data_center_to_use-1] -%}
  {% set dataCenterId = data_center_to_use - 1 %}
{% else %}
  {% set dataCenter = '' -%}
  {% set dataCenterId = 0 %}
{% endif %}

{% set __PROVISIONING_DATA_version = PROVISIONING_DATA_version | default('latest') -%}

{% set __CONFLUENT_PLATFORM_version = CONFLUENT_PLATFORM_version | default('latest') -%}
{% set __KAFKA_MM2_version = KAFKA_MM2_version | default('latest') -%}
{% set __APICURIO_SCHEMA_REGISTRY_version = APICURIO_SCHEMA_REGISTRY_version | default('latest') -%}
{% set __ZOONAVIGATOR_version = ZOONAVIGATOR_version | default('latest') -%}
{% set __ZOONAVIGATOR_API_version = ZOONAVIGATOR_API_version | default('latest') -%}
{% set __KAFKA_KSQLDB_version = KAFKA_KSQLDB_version | default('latest') -%}
{% set __MATERIALIZE_version = MATERIALIZE_version | default('latest') -%}
{% set __AZKARRA_version = AZKARRA_version | default('latest') -%}

{% set __SCHEMA_REGISTRY_UI_version = SCHEMA_REGISTRY_UI_version | default('latest') -%}

{% set __LENSES_BOX_version = LENSES_BOX_version | default('latest') -%}

{% set __KCAT_version = KCAT_version | default('latest') -%}

{% set __KAFKACTL_version = KAFKACTL_version | default('latest') -%}

{% set __JIKKOU_version = JIKKOU_version | default('latest') -%}

{% set __KAFKA_TOPICS_UI_version = KAFKA_TOPICS_UI_version | default('latest') -%}
{% set __KAFKA_CONNECT_UI_version = KAFKA_CONNECT_UI_version | default('latest') -%}
{% set __KAFKA_CMAK_version = KAFKA_CMAK_version | default('latest') -%}
{% set __KAFKA_KAFDROP_version = KAFKA_KAFDROP_version | default('latest') -%}
{% set __KAFKA_KADMIN_version = KAFKA_KADMIN_version | default('latest') -%}
{% set __KAFKA_AKHQ_version = KAFKA_AKHQ_version | default('latest') -%}
{% set __KAFKA_UI_version = KAFKA_UI_version | default('latest') -%}
{% set __KAFKA_EFAK_version = KAFKA_EFAK_version | default('latest') -%}
{% set __KOWL_version = KOWL_version | default('latest') -%}
{% set __KOUNCIL_version = KOUNCIL_version | default('latest') -%}
{% set __KAFKA_MAGIC_version = KAFKA_MAGIC_version | default('latest') -%}
{% set __KAFKA_WEBVIEW_version = KAFKA_WEBVIEW_version | default('latest') -%}
{% set __STREAMS_EXPLORER_version = STREAMS_EXPLORER_version | default('latest') -%}
{% set __KAFKA_LAG_EXPORTER_version = KAFKA_LAG_EXPORTER_version | default('latest') -%}
{% set __ZILLA_version = ZILLA_version | default('latest') -%}

{% set __REMORA_version = REMORA_version | default('latest') -%}

{% set __BURROW_version = BURROW_version | default('latest') -%}
{% set __BURROW_UI_version = BURROW_UI_version | default('latest') -%}
{% set __BURROW_DASHBOARD_version = BURROW_DASHBOARD_version | default('latest') -%}

{% set __DEBEZIUM_SERVER_version = DEBEZIUM_SERVER_version | default('latest') -%}
{% set __DEBEZIUM_UI_version = DEBEZIUM_UI_version | default('latest') -%}

{% set __HADOOP_image_version = HADOOP_image_version | default('latest') -%}
{% set __HADOOP_version = HADOOP_version | default('latest') -%}
{% set __SQOOP_version = SQOOP_version | default('latest') -%}

{% if (SPARK_base_version | lower) == '2.4'  %}
  {% set __SPARK_version = SPARK_2_4_version ~ "-hadoop2.8"  -%}
  {% set __LIVY_version = LIVY_version ~ "-spark" ~ SPARK_2_4_version.split(".")[0]  ~ "." ~ SPARK_2_4_version.split(".")[1]  -%}
{% elif (SPARK_base_version | lower) == '3.1'  %}
  {% set __SPARK_version = SPARK_3_1_version ~ "-hadoop3.2" -%}
  {% set __LIVY_version = LIVY_version ~ "-spark" ~ SPARK_3_1_version.split(".")[0]  ~ "." ~ SPARK_3_1_version.split(".")[1] -%}
{% elif (SPARK_base_version | lower) == '3.2'  %}
  {% set __SPARK_version = SPARK_3_2_version ~ "-hadoop3.3" -%}
  {% set __LIVY_version = LIVY_version ~ "-spark" ~ SPARK_3_2_version.split(".")[0]  ~ "." ~ SPARK_3_2_version.split(".")[1] -%}
{% else -%}
  {% set __SPARK_version = SPARK_2_4_version ~ "-hadoop2.8" -%}
  {% set __LIVY_version = LIVY_version ~ "-spark" ~ SPARK_2_4_version.split(".")[0]  ~ "." ~ SPARK_2_4_version.split(".")[1]  -%}
{% endif -%}
{% set __ZEPPELIN_version = ZEPPELIN_version ~ "-spark" ~ __SPARK_version -%}

{% set __FLINK_version = FLINK_version | default('latest') -%}
{% set __NUSSKNACKER_version = NUSSKNACKER_version | default('latest') -%}

{% set __TIKA_version = TIKA_version | default('latest') -%}

{% set __HIVE_version = HIVE_version | default('latest') -%}
{% set __HIVE_version_suffix = HIVE_version_suffix | default('postgresql-metastore-s3') -%}
{% set __HIVE_METASTORE_DB_version = HIVE_METASTORE_DB_version | default('latest') -%}

{% set __AVRO_TOOLS_version = AVRO_TOOLS_version | default('latest') -%}

{% set __RANGER_version = RANGER_version | default('latest') -%}
{% set __RANGER_postgresql_version = RANGER_postgresql_version | default('latest') -%}

{% set __ATLAS_version = ATLAS_version | default('latest') -%}

{% set __DATAHUB_version = DATAHUB_version | default('latest') -%}
{% set __DATAHUB_ACTIONS_version = DATAHUB_ACTIONS_version | default('latest') -%}

{% set __AMUNDSEN_FRONTEND_version = AMUNDSEN_FRONTEND_version | default('latest') -%}
{% set __AMUNDSEN_SEARCH_version = AMUNDSEN_SEARCH_version | default('latest') -%}
{% set __AMUNDSEN_METADATA_version = AMUNDSEN_METADATA_version | default('latest') -%}

{% set __MARQUEZ_version = MARQUEZ_version | default('latest') -%}
{% set __MARQUEZ_WEB_version = MARQUEZ_WEB_version | default('latest') -%}

{% if (CASSANDRA_major_version | lower) == '3'  %}
  {% set __CASSANDRA_version = CASSANDRA3_version  -%}
{% elif (CASSANDRA_major_version | lower) == '4'  %}
  {% set __CASSANDRA_version = CASSANDRA4_version  -%}
{% endif -%}

{% set __REAPER_version = REAPER_version | default('latest') -%}

{% set __DATASTAX_version = DATASTAX_version | default('latest') -%}

{% set __ELASTICSEARCH_version = ELASTICSEARCH_version | default('latest') -%}
{% set __DEJAVU_version = DEJAVU_version | default('latest') -%}
{% set __CEREBRO_version = CEREBRO_version | default('latest') -%}
{% set __ELASTICSEARCHHQ_version = ELASTICSEARCHHQ_version | default('latest') -%}
{% set __ELASTICVUE_version = ELASTICVUE_version | default('latest') -%}

{% set __OPENSEARCH_version = OPENSEARCH_version | default('latest') -%}
{% set __OPENSEARCH_DASHBOARDS_version = OPENSEARCH_DASHBOARDS_version | default('latest') -%}

{% set __HUE_version = HUE_version | default('latest') -%}
{% set __HUE_POSTGRES_version = HUE_POSTGRES_version | default('latest') -%}

{% set __STREAMSETS_version = STREAMSETS_version | default('latest') -%}
{% set __STREAMSETS_TRANSFORMER_version = STREAMSETS_TRANSFORMER_version | default('latest') -%}
{% set __STREAMSETS_EDGE_version = STREAMSETS_EDGE_version | default('3.12.0') -%}
{% set __STREAMSETS_DATAOPS_version = STREAMSETS_DATAOPS_version | default('latest') -%}

{% set __NIFI_version = NIFI_version | default('latest') -%}
{% set __NIFI_REGISTRY_version = NIFI_REGISTRY_version | default('latest') -%}
{% set __NIFI_TOOLKIT_version = NIFI_TOOLKIT_version | default('latest') -%}
{% set __MONITOFI_version = MONITOFI_version | default('latest') -%}

{% set __STREAMPIPES_version = STREAMPIPES_version | default('latest') -%}

{% set __CONDUIT_version = CONDUIT_version | default('latest') -%}

{% set __NODERED_version = NODERED_version | default('latest') -%}

{% set __STREAMSHEETS_version = STREAMSHEETS_version | default('latest') -%}

{% set __SPRING_DATAFLOW_version = SPRING_DATAFLOW_version | default('latest') -%}
{% set __SPRING_SKIPPER_version = SPRING_SKIPPER_version | default('latest') -%}

{% set __AIRBYTE_version = AIRBYTE_version | default('latest') -%}

{% set __AIRFLOW_version = AIRFLOW_version | default('latest') -%}

{%if (JUPYTER_edition | lower) == 'minimal' | default(false) %}
  {% set __JUPYTER_version = JUPYTER_MINIMAL_version | default('latest') -%}
{%elif (JUPYTER_edition | lower) == 'r' | default(false) %}
  {% set __JUPYTER_version = JUPYTER_R_version | default('latest') -%}
{%elif (JUPYTER_edition | lower) == 'scipy' | default(false) %}
  {% set __JUPYTER_version = JUPYTER_SCIPY_version | default('latest') -%}
{%elif (JUPYTER_edition | lower) == 'datascience' | default(false) %}
  {% set __JUPYTER_version = JUPYTER_DATASCIENCE_version | default('latest') -%}
{%elif (JUPYTER_edition | lower) == 'tensorflow' | default(false) %}
  {% set __JUPYTER_version = JUPYTER_TENSORFLOW_version | default('latest') -%}
{%elif (JUPYTER_edition | lower) == 'all-spark' | default(false) %}
  {% set __JUPYTER_version = JUPYTER_ALL_SPARK_version | default('latest') -%}
{% endif -%}

{% set __RSTUDIO_version = RSTUDIO_version | default('latest') -%}
{% set __SHINY_SERVER_version = SHINY_SERVER_version | default('latest') -%}

{% set __DATAIKU_DSS_version = DATAIKU_DSS_version | default('latest') -%}

{% set __MLFLOW_SERVER_version = MLFLOW_SERVER_version | default('latest') -%}

{% set __OPTUNA_version = OPTUNA_version | default('latest') -%}
{% set __OPTUNA_DASHBOARD_version = OPTUNA_DASHBOARD_version | default('latest') -%}

{% set __KIE_SERVER_version = KIE_SERVER_version | default('latest') -%}

{% set __PROMTAIL_version = PROMTAIL_version | default('latest') -%}
{% set __LOKI_version = LOKI_version | default('latest') -%}
{% set __TEMPO_version = TEMPO_version | default('latest') -%}

{% set __GRAFANA_version = GRAFANA_version | default('latest') -%}

{% set __KIBANA_version = KIBANA_version | default('latest') -%}

{% set __METABASE_version = METABASE_version | default('latest') -%}
{% set __SUPERSET_version = SUPERSET_version | default('latest') -%}
{% set __REDASH_version = REDASH_version | default('latest') -%}
{% set __SMASHING_version = SMASHING_version | default('latest') -%}
{% set __TIPBOARD_version = TIPBOARD_version | default('latest') -%}
{% set __CHARTBOARD_version = CHARTBOARD_version | default('latest') -%}

{% set __RETOOL_version = RETOOL_version | default('latest') -%}

{% set __MEMCACHED_version = MEMCACHED_version | default('latest') -%}

{% set __REDIS_version = REDIS_version | default('latest') -%}
{% set __REDIS_INSIGHT_version = REDIS_INSIGHT_version | default('latest') -%}
{% set __REDIS_COMMANDER_version = REDIS_COMMANDER_version | default('latest') -%}

{% set __MONGO_version = MONGO_version | default('latest') -%}
{% set __MONGO_EXPRESS_version = MONGO_EXPRESS_version | default('latest') -%}
{% set __MONGO_ADMIN_version = MONGO_ADMIN_version | default('latest') -%}

{% set __SOLR_version = SOLR_version | default('latest') -%}

{% set __NEO4J_version = NEO4J_version | default('latest') -%}

{% set __QUINE_version = QUINE_version | default('latest') -%}

{% set __DGRAPH_version = DGRAPH_version | default('latest') -%}

{% set __STARDOG_version = STARDOG_version | default('latest') -%}
{% set __STARDOG_STUDIO_version = STARDOG_STUDIO_version | default('latest') -%}

{% set __GRAPHDB_version = GRAPHDB_version | default('latest') -%}

{% set __INFLUXDB_version = INFLUXDB_version | default('latest') -%}
{% set __TELEGRAF_version = TELEGRAF_version | default('latest') -%}
{% set __CHRONOGRAF_version = CHRONOGRAF_version | default('latest') -%}
{% set __KAPACITOR_version = KAPACITOR_version | default('latest') -%}
{% set __INFLUXDB2_version = INFLUXDB2_version | default('2.2.0-alpha') -%}
{% set __INFLUXDB_UI_version = INFLUXDB_UI_version | default('latest') -%}

{% set __QUESTDB_version = QUESTDB_version | default('latest') -%}

{% set __KUDU_version = KUDU_version | default('latest') -%}

{% set __DRUID_version = DRUID_version | default('latest') -%}

{% set __PINOT_version = PINOT_version | default('latest') -%}

{% set __IGNITE_version = IGNITE_version | default('latest') -%}
{% set __GRIDGAIN_CC_version = GRIDGAIN_CC_version | default('latest') -%}

{% set __PROMETHEUS_version = PROMETHEUS_version | default('latest') -%}
{% set __PROMETHEUS_PUSHGATEWAY_version = PROMETHEUS_PUSHGATEWAY_version | default('latest') -%}
{% set __PROMETHEUS_NODEEXPORTER_version = PROMETHEUS_NODEEXPORTER_version | default('latest') -%}

{% set __TILE38_version = TILE38_version | default('latest') -%}

{% set __ORACLE_XE_version = ORACLE_XE_version | default('latest') -%}
{% set __ORACLE_EE_version = ORACLE_EE_version | default('latest') -%}
{% set __ORACLE_SQLCL_version = ORACLE_SQLCL_version | default('latest') -%}
{% set __ORACLE_REST_DATA_SERVICE_version = ORACLE_REST_DATA_SERVICE_version | default('latest') -%}

{% set __MYSQL_version = MYSQL_version | default('latest') -%}
{% set __POSTGRESQL_version = POSTGRESQL_version | default('latest') -%}
{% set __POSTGREST_version = POSTGREST_version | default('latest') -%}
{% set __TIMESCALEDB_version = TIMESCALEDB_version | default('latest') -%}
{% set __SQLSERVER_version = SQLSERVER_version | default('latest') -%}
{% set __YUGABYTE_version = YUGABYTE_version | default('latest') -%}

{% set __PGADMIN_version = PGADMIN_version | default('latest') -%}
{% set __ADMINER_version = ADMINER_version | default('latest') -%}
{% set __CLOUDBEAVER_version = CLOUDBEAVER_version | default('latest') -%}
{% set __SQLPAD_version = SQLPAD_version | default('latest') -%}
{% set __NOCODB_version = NOCODB_version | default('latest') -%}
{% set __QUIX_version = QUIX_version | default('latest') -%}

{% set __AXON_version = AXON_version | default('latest') -%}
{% set __EVENTSTORE_version = EVENTSTORE_version | default('latest') -%}

{% set __HAZELCAST_version = HAZELCAST_version | default('latest') -%}
{% set __HAZELCAST_MC_version = HAZELCAST_MC_version | default('latest') -%}

{% set __TRINO_version = TRINO_version | default('latest') -%}
{% set __STARBURSTDATA_version = STARBURSTDATA_version | default('latest') -%}
{% set __TRINO_CLI_version = TRINO_CLI_version | default('latest') -%}
{% set __PRESTO_version = PRESTO_version | default('latest') -%}
{% set __AHANA_version = AHANA_version | default('latest') -%}
{% set __PRESTO_CLI_version = PRESTO_CLI_version | default('latest') -%}
{% set __DREMIO_version = DREMIO_version | default('latest') -%}
{% set __DRILL_version = DRILL_version | default('latest') -%}

{% set __HASURA_version = HASURA_version | default('latest') -%}
{% set __GRAPHQL_MESH_version = GRAPHQL_MESH_version | default('latest') -%}

{% set __NUCLIO_version = NUCLIO_version | default('latest') -%}

{% set __MOSQUITTO_version = MOSQUITTO_version | default('latest') -%}
{% set __HIVEMQ3_version = HIVEMQ3_version | default('latest') -%}
{% set __HIVEMQ4_version = HIVEMQ4_version | default('latest') -%}
{% set __EMQX_oss_version = EMQX_oss_version | default('latest') -%}
{% set __EMQX_enterprise_version = EMQX_enterprise_version | default('latest') -%}
{% set __HIVEMQ_MQTT_WEB_CLIENT_version = HIVEMQ_MQTT_WEB_CLIENT_version | default('latest') -%}

{% set __CEDALO_MANAGEMENT_CENTER_version = CEDALO_MANAGEMENT_CENTER_version | default('latest') -%}

{% set __THINGSBOARD_version = THINGSBOARD_version | default('latest') -%}

{% set __ACTIVEMQ_version = ACTIVEMQ_version | default('latest') -%}
{% set __RABBITMQ_version = RABBITMQ_version | default('latest') -%}

{% set __FTP_PUREFTPD_version = FTP_PUREFTPD_version | default('latest') -%}
{% set __FTP_FILEZILLA_version = FTP_FILEZILLA_version | default('latest') -%}

{% set __CAMUNDA_BPM_PLATFORM_version = CAMUNDA_BPM_PLATFORM_version | default('latest') -%}
{% set __CAMUNDA_OPTIMIZE_version = CAMUNDA_OPTIMIZE_version | default('latest') -%}
{% set __CAMUNDA_ZEEBE_version = CAMUNDA_ZEEBE_version | default('latest') -%}
{% set __CAMUNDA_OPERATE_version = CAMUNDA_OPERATE_version | default('latest') -%}
{% set __CAMUNDA_ZEEQS_version = CAMUNDA_ZEEQS_version | default('latest') -%}

{% set __PENTHAO_version = PENTHAO_version | default('latest') -%}

{% set __MINIO_version = MINIO_version | default('latest') -%}
{% set __MINIO_MC_version = MINIO_MC_version | default('latest') -%}
{% set __MINIO_CONSOLE_version = MINIO_CONSOLE_version | default('latest') -%}
{% set __ADMINIO_UI_version = ADMINIO_UI_version | default('latest') -%}
{% set __ADMINIO_API_version = ADMINIO_API_version | default('latest') -%}
{% set __S3MANAGER_version = S3MANAGER_version | default('latest') -%}
{% set __FILESTASH_version = FILESTASH_version | default('latest') -%}
{% set __AWSCLI_version = AWSCLI_version | default('latest') -%}
{% set __AZURECLI_version = AZURECLI_version | default('latest') -%}
{% set __AZURE_STORAGE_EXPLORER_version = AZURE_STORAGE_EXPLORER_version | default('latest') -%}

{% set __LAKEFS_version = LAKEFS_version | default('latest') -%}

{% set __DBT_version = DBT_version | default('latest') -%}

{% set __CODE_SERVER_version = CODE_SERVER_version | default('latest') -%}
{% set __EXCALIDRAW_version = EXCALIDRAW_version | default('latest') -%}
{% set __FIREFOX_version = FIREFOX_version | default('latest') -%}
{% set __FILE_BROWSER_version = FILE_BROWSER_version | default('latest') -%}
{% set __VAULT_version = VAULT_version | default('latest') -%}
{% set __KEYCLOAK_version = KEYCLOAK_version | default('latest') -%}
{% set __MOCK_SERVER_version = MOCK_SERVER_version | default('latest') -%}
{% set __PORTAINER_version = PORTAINER_version | default('latest') -%}
{% set __CADVISOR_version = CADVISOR_version | default('latest') -%}
{% set __HAWTIO_version = HAWTIO_version | default('latest') -%}
{% set __WETTY_version = WETTY_version | default('latest') -%}

{% set __MARKDOWN_VIEWER_version = MARKDOWN_VIEWER_version | default('latest') -%}

{% set __LOG4BRAINS_version = LOG4BRAINS_VIEWER_version | default('latest') -%}

{% set __WATCHTOWER_version = WATCHTOWER_version | default('latest') -%}

{% set __POSTMAN_version = POSTMAN_version | default('latest') -%}

{% set __SWAGGER_EDITOR_version = SWAGGER_EDITOR_version | default('latest') -%}
{% set __SWAGGER_UI_version = SWAGGER_UI_version | default('latest') -%}

{% set __MICROCKS_version = MICROCKS_version | default('latest') -%}

{% set __OTEL_COLLECTOR_version = OTEL_COLLECTOR_version | default('latest') -%}
{% set __ZIPKIN_version = ZIPKIN_version | default('latest') -%}
{% set __JAEGER_version = JAEGER_version | default('latest') -%}
{% set __PITCHFORK_version = PITCHFORK_version | default('latest') -%}

{% set __hw_arch = hw_arch | default('x86-64') -%}
{% set __PYTHON_VERSION = PYTHON_version | default('3') -%}

{% if DATAHUB_enable -%}
# enforce some dependencies
  {% set KAFKA_enable = true -%}
  {% set SCHEMA_REGISTRY_enable = true -%}
{% endif -%}   {# DATAHUB_enable  #}

{% if AZKARRA_enable or PINOT_enable -%}
# enforce some dependencies
  {% set KAFKA_enable = true -%}
{% endif -%}   {# DATAHUB_enable  #}

{% if (KAFKA_enable and not KAFKA_use_kraft_mode) or ATLAS_enable or DRILL_enable or PINOT_enable -%}
# enforce some dependencies
  {% set ZOOKEEPER_enable = true -%}
{% endif -%}   {# KAFKA_enable or ATLAS_enable or DATAHUB_enable #}

{% if (NIFI_enable and NIFI_create_cluster) -%}
# enforce some dependencies
  {% set ZOOKEEPER_enable = true -%}
{% endif -%}   {# NIFI_enable and NIFI_create_cluster #}

{% if KAFKA_jmx_monitoring_prometheus_enable -%}
# enforce some dependencies
  {% set PROMETHEUS_enable = true -%}
  {% set GRAFANA_enable = true -%}
{% endif -%}   {# KAFKA_jmx_monitoring_prometheus_enable #}

# backward compatiblity to platform < 1.14.0
{% if KAFKA_SCHEMA_REGISTRY_enable is defined and KAFKA_SCHEMA_REGISTRY_enable -%}
# enforce some dependencies
  {% set SCHEMA_REGISTRY_enable = true -%}
{% endif -%}   {# KAFKA_SCHEMA_REGISTRY_enable #}

{% if KAFKA_TOPICS_UI_enable -%}
# enforce some dependencies
  {% set KAFKA_RESTPROXY_enable = true -%}
{% endif -%}   {# KAFKA_TOPICS_UI_enable #}

{% if KAFKA_CONNECT_enable -%}
# enforce some dependencies
  {% set KAFKA_KSQLDB_use_embedded_connect = false -%}
{% endif -%}   {# KAFKA_CONNECT_enable #}

{% if KAFKA_KSQLDB_enable and not external['SCHEMA_REGISTRY_url'] -%}
# enforce some dependencies
  {% set SCHEMA_REGISTRY_enable = true -%}
{% endif -%}   {# KAFKA_KSQLDB_enable #}

{% if (SCHEMA_REGISTRY_enable and SCHEMA_REGISTRY_flavour | lower) == 'apicurio' and APICURIO_auth_enabled | default(false) -%}
# enforce keycloak dependencies
  {% set KEYCLOAK_enable = true -%}
{% endif -%}   {# PLATFORM_ARM_enable #}

{% if HUE_enable -%}
# enforce some dependencies
  {% set SOLR_enable = true -%}
{% endif -%}   {# PLATFORM_ARM_enable #}

{% if TIPBOARD_enable -%}
# enforce some dependencies
  {% set REDIS_enable = true -%}
{% endif -%}   {# TIPBOARD_enable #}

{% if HASURA_enable -%}
# enforce some dependencies
  {% set POSTGRESQL_enable = true -%}
{% endif -%}   {# HASURA_enable #}

{% if CAMUNDA_ZEEBE_enable -%}
# enforce some dependencies
  {% set ELASTICSEARCH_enable = true -%}
{% endif -%}   {# CAMUNDA_ZEEBE_enable #}

{% if MICROCKS_enable -%}
# enforce some dependencies
  {% set KEYCLOAK_enable = true -%}
  {% set POSTMAN_enable = true -%}
{% endif -%}   {# MICROCKS_enable #}

{% if FIREFOX_use_port_80 -%}
  # if FIREFOX runs on port 80, then markdown viewer can not run on 80
  {% set MARKDOWN_VIEWER_use_port_80 = false -%}
{% endif -%}   {# FIREFOX_use_port_80 #}

# Enable PostgreSQL or MySQL for MLflow server
{% if MLFLOW_SERVER_enable -%}
  {%if MLFLOW_SERVER_backend | default('file') == 'postgresql' %}
    {% set POSTGRESQL_enable = true -%}
  {%elif MLFLOW_SERVER_backend | default('file') == 'mysql' %}
    {% set MYSQL_enable = true -%}
  {% endif -%}
{% endif -%}   {# MLFLOW_SERVER_enable #}

{% if (__hw_arch | upper) == 'ARM' -%}
# if we use stack type ARM, then disable some containers which do not support ARM
  {% set ZOOKEEPER_enable = false -%}
  {% set KAFKA_enable = false -%}
  {% set APICURIO_SCHEMA_REGISTRY_enable = false -%}
  {% set KAFKA_REPLICATOR_enable = false -%}
  {% set KAFKA_MM2_enable = false -%}
  {% set LENSES_BOX_enable = false -%}
  {% set KCAT_enable = false -%}
  {% set JIKKOU_enable = false -%}
  {% set KAFKA_UI_enable = false -%}
  {% set KAFKA_EFAK_enable = false -%}
  {% set KOWL_enable = false -%}
  {% set KOUNCIL_enable = false -%}
  {% set KAFKA_MAGIC_enable = false -%}
  {% set EFAK_enable = false -%}
  {% set KAFKA_LAG_EXPORTER_enable = false -%}
  {% set ZILLA_enable = false -%}
  {% set REMORA_enable = false -%}
  {% set DEBEZIUM_SERVER_enable = false -%}
  {% set DEBEZIUM_UI_enable = false -%}
  {% set HADOOP_enable = false -%}
  {% set SPARK_enable = false -%}
  {% set TIKA_enable = false -%}
  {% set HIVE_enable = false -%}
  {% set AVRO_TOOLS_enable = false -%}
  {% set RANGER_enable = false -%}
  {% set RANGER_POSTGRES_enable = false -%}
  {% set ATLAS_enable = false -%}
  {% set DATAHUB_enable = false -%}
  {% set AMUNDSEN_enable = false -%}
  {% set MARQUEZ_enable = false -%}
  {% set HUE_enable = false -%}
  {% set STREAMSETS_enable = false -%}
  {% set STREAMSETS_TRANSFORMER_enable = false -%}
  {% set STREAMSETS_DATAOPS_enable = false -%}
  {% set NIFI_enable = false -%}
  {% set NIFI_REGISTRY_enable = false -%}
  {% set NIFI_TOOLKIT_enable = false -%}
  {% set STREAMSHEETS_enable = false -%}
  {% set CONDUIT_enable = false -%}
  {% set SPRING_DATAFLOW_enable = false -%}
  {% set AIRBYTE_enable = false -%}
  {% set AIRFLOW_enable = false -%}
  {% set ZEPPELIN_enable = false -%}
  {% set JUPYTER_enable = false -%}
  {% set RSTUDIO_enable = false -%}
  {% set SHINY_SERVER_enable = false -%}
  {% set MLFLOW_SERVER_enable = false -%}
  {% set OPTUNA_enable = false -%}
  {% set DATAIKU_DSS_enable = false -%}
  {% set KIE_SERVER_enable = false -%}
  {% set METABASE_enable = false -%}
  {% set SUPERSET_enable = false -%}
  {% set REDASH_enable = false -%}
  {% set SMASHING_enable = false -%}
  {% set TIPBOARD_enable = false -%}
  {% set REDIS_INSIGHT_enable = false -%}
  {% set REDIS_COMMANDER_enable = false -%}
  {% set MONGO_enable = false -%}
  {% set ELASTICSEARCH_enable = false -%}
  {% set OPENSEARCH_enable = false -%}
  {% set OPENSEARCH_DASHBOARDS_enable = false -%}
  {% set DEJAVU_enable = false -%}
  {% set CEREBRO_enable = false -%}
  {% set ELASTICHQ_enable = false -%}
  {% set ELASTICVUE_enable = false -%}
  {% set KIBANA_enable = false -%}
  {% set INFLUXDB2_enable = false -%}
  {% set DRUID_enable = false -%}
  {% set PINOT_enable = false -%}
  {% set IGNITE_enable = false -%}
  {% set NEO4J_enable = false -%}
  {% set QUINE_enable = false -%}
  {% set DGRAPH_enable = false -%}
  {% set STARDOG_enable = false -%}
  {% set STARDOG_STUDIO_enable = false -%}
  {% set GRAPHDB_enable = false -%}
  {% set TILE38_enable = false -%}
  {% set POSTGREST_enable = false -%}
  {% set ORACLE_XE_enable = false -%}
  {% set ORACLE_EE_enable = false -%}
  {% set ORACLE_SQLCL_enable = false -%}
  {% set ORACLE_REST_DATA_SERVICE_enable = false -%}
  {% set MYSQL_enable = false -%}
  {% set SQLSERVER_enable = false -%}
  {% set TIMESCALEDB_enable = false -%}
  {% set PGADMIN_enable = false -%}
  {% set ADMINER_enable = false -%}
  {% set CLOUDBEAVER_enable = false -%}
  {% set SQLPAD_enable = false -%}
  {% set NOCODB_enable = false -%}
  {% set QUIX_enable = false -%}
  {% set AXON_enable = false -%}
  {% set EVENTSTORE_enable = false -%}
  {% set TRINO_enable = false -%}
  {% set TRINO_CLI_enable = false -%}
  {% set PRESTO_enable = false -%}
  {% set PRESTO_CLI_enable = false -%}
  {% set DREMIO_enable = false -%}
  {% set DRILL_enable = false -%}
  {% set HASURA_enable = false -%}
  {% set GRAPHQL_MESH_enable = false -%}
  {% set NUCLIO_enable = false -%}
  {% set HIVEMQ3_enable = false -%}
  {% set HIVEMQ4_enable = false -%}
  {% set EMQX_enable = false -%}
  {% set MQTT_UI_enable = false -%}
  {% set THINGSBOARD_enable = false -%}
  {% set ACTIVEMQ_enable = false -%}
  {% set FTP_enable = false -%}
  {% set CAMUNDA_BPM_PLATFORM_enable = false -%}
  {% set CAMUNDA_OPTIMIZE_enable = false -%}
  {% set CAMUNDA_ZEEBE_enable = false -%}
  {% set CAMUNDA_OPERATE_enable = false -%}
  {% set CAMUNDA_ZEEQS_enable = false -%}
  {% set DBT_enable = false -%}
  {% set PENTHAO_enable = false -%}
  {% set MINIO_enable = false -%}
  {% set MINIO_MC_enable = false -%}
  {% set MINIO_CONSOLE_enable = false -%}
  {% set LAKEFS_enable = false -%}
  {% set ADMINIO_UI_enable = false -%}
  {% set ADMINIO_API_enable = false -%}
  {% set FILESTASH_enable = false -%}
  {% set S3MANAGER_enable = false -%}
  {% set AWSCLI_enable = false -%}
  {% set AZURE_STORAGE_EXPLORER_enable = false -%}
  {% set KEYCLOAK_enable = false -%}
  {% set POSTMAN_enable = false -%}
  {% set MICROCKS_enable = false -%}
  {% set MOCK_SERVER_enable = false -%}
  {% set OTEL_COLLECTOR_enable = false %}
  {% set ZIPKIN_enable = false -%}
  {% set JAEGER_enable = false -%}
  {% set PITCHFORK_enable = false -%}
  {% set TEMPO_enable = false -%}
  {% set CODE_SERVER_enable = false -%}
  {% set EXCALIDRAW_enable = false -%}
  {% set FIREFOX_enable = false -%}
  {% set FILE_BROWSER_enable = false -%}
  {% set CADVISOR_enable = false -%}
  {% set HAWTIO_enable = false -%}
  {% set WETTY_enable = false -%}
  {% set MARKDOWN_VIEWER_enable = false -%}
  {% set LOG4BRAINS_enable = false -%}
  {% set SWAGGER_EDITOR_enable = false -%}
  {% set SWAGGER_UI_enable = false -%}
{% endif %}   {# PLATFORM_ARM_enable #}

{#  ================================== Handling external services ========================================== #}

{% set ns = namespace(bootstrapServers='') %}
{% set ns = namespace(serviceNames='') %}
{% set ns = namespace(ports='') %}
{% set ns = namespace(portsJMX='') %}
{% set ns = namespace(controllerQuorumVoters='') %}
{% if (external['KAFKA_enable']) | default(false) %}
    {% set ns.bootstrapServers = external['KAFKA_bootstrap_servers'] %}
    {% set ns.schemaRegistryUrl = external['SCHEMA_REGISTRY_url'] %}
    {% set kafkaUsername = '${PLATYS_KAFKA_USERNAME:?PLATYS_KAFKA_USERNAME must be set either in .env or as an environment variable}' %}
    {% set kafkaPassword = '${PLATYS_KAFKA_PASSWORD:?PLATYS_KAFKA_PASSWORD must be set either in .env or as an environment variable}' %}
    {% set schemaRegistryUsername = '${PLATYS_SCHEMA_REGISTRY_USERNAME:?PLATYS_SCHEMA_REGISTRY_USERNAME must be set either in .env or as an environment variable}' %}
    {% set schemaRegistryPassword = '${PLATYS_SCHEMA_REGISTRY_PASSWORD:?PLATYS_SCHEMA_REGISTRY_PASSWORD must be set either in .env or as an environment variable}' %}
{% else %}
    {#% for datacenter in (DATA_CENTER.split(',') | default([]) ) %#}
      {% set dcName = dataCenter %}
      {% set basePort = 9092 + dataCenterId * KAFKA_broker_nodes %}
      {% set basePortJMX = 9992 + dataCenterId * KAFKA_broker_nodes %}
      {% set serviceBaseName = "kafka" ~ dcName ~ "-" %}

      {% for num in range(KAFKA_broker_nodes | default(1) ) %}
        {% set port = basePort + loop.index-1 %}
        {% set portJMX = basePortJMX + loop.index-1 %}
        {% set serviceName = serviceBaseName ~ loop.index %}
        {% if loop.first %}
           {% set ns.bootstrapServers = serviceName ~ ":1" ~ port %}
           {% set ns.controllerQuorumVoters = loop.index ~ ":1" ~ serviceName ~ ":1" ~ port %}
           {% set ns.controllerQuorumVoters = loop.index ~ "@" ~ serviceName ~ ":3" ~ port %}
        {% else %}
           {% set ns.bootstrapServers = ns.bootstrapServers ~ ',' ~ serviceName ~ ":1" ~ port %}
           {% set ns.controllerQuorumVoters = ns.controllerQuorumVoters ~ ',' ~ loop.index ~ "@" ~ serviceName ~ ":3" ~ port %}
        {% endif %}

        {% if ns.serviceNames is not defined %}
          {% set ns.serviceNames = serviceName %}
          {% set ns.ports = port|string %}
          {% set ns.portsJMX = portJMX|string %}
        {% else %}
          {% set ns.serviceNames = ns.serviceNames ~ ',' ~ serviceName %}
          {% set ns.ports = ns.ports ~ ',' ~ port %}
          {% set ns.portsJMX = ns.portsJMX ~ ',' ~ portJMX %}
        {% endif %}
      {% endfor %}
    {#% endfor #}  {# datacenter in (KAFKA_datacenters.split(',') | default([]) ) #}
{% endif %}   {# external['KAFKA_enable'] #}

{% if not (external['SCHEMA_REGISTRY_enable']) | default(false) %}
    {% if SCHEMA_REGISTRY_flavour is defined %}
        {%if SCHEMA_REGISTRY_UI_use_public_ip | default(true) %}
          {% set ns.schemaRegistryUrlExternal = 'http://${PUBLIC_IP}:8081' %}
        {% else %}
          {% set ns.schemaRegistryUrlExternal = 'http://${DOCKER_HOST_IP}:8081' %}
        {% endif -%}   {#  SCHEMA_REGISTRY_use_public_ip #}
    {% endif %}

    {% if SCHEMA_REGISTRY_flavour == "confluent" %}
      {% set ns.schemaRegistryUrl = 'http://schema-registry-1:8081' %}
      {% set ns.schemaRegistryServiceName = 'schema-registry-1' %}
    {% elif SCHEMA_REGISTRY_flavour == "apicurio" %}
      {% set ns.schemaRegistryUrl = 'http://apicurio-registry-1:8081/apis/ccompat/v6' %}
      {% set ns.schemaRegistryUrlExternal = ns.schemaRegistryUrlExternal ~ '/apis/ccompat/v6' %}
      {% set ns.schemaRegistryServiceName = 'apicurio-registry-1' %}
    {% else %}
      {% set ns.schemaRegistryUrl = 'http://<schema-registry-not-enabled>' %}
      {% set ns.schemaRegistryUrlExternal = 'http://<schema-registry-not-enabled>' %}
    {% endif %}
{% else -%}
    {% set ns.schemaRegistryUrlExternal = external['SCHEMA_REGISTRY_url'] %}
{% endif %}   {# not external['SCHEMA_REGISTRY_enable'] #}

{% if (external['S3_enable']) | default(false) %}
  {% if (external['S3_endpoint'] != None) | default(false) %}
    {% set s3Endpoint = external['S3_endpoint'] %}
  {% endif %}
    {% set s3Endpoint = 's3.amazonaws.com' %}
    {% set s3PathStyleAccess = external['S3_path_style_access'] %}
    {% set s3AccessKey = '${PLATYS_AWS_ACCESS_KEY:?PLATYS_AWS_ACCESS_KEY must be set either in .env or as an environment variable}' %}
    {% set s3SecretAccessKey = '${PLATYS_AWS_SECRET_ACCESS_KEY:?PLATYS_AWS_SECRET_ACCESS_KEY must be set either in .env or as an environment variable}' %}
    {% set s3DefaultRegion = external['S3_default_region'] %}
{% else %}
    {% set s3Endpoint = 'http://minio-1:9000' %}
    {% set s3PathStyleAccess = 'true' %}
    {% set s3AccessKey = MINIO_access_key %}
    {% set s3SecretAccessKey = MINIO_secret_key %}
    {% set s3DefaultRegion = 'us-east-1' %}
{% endif %}   {# external['s3Endpoint'] #}

{% if (external['ADLS_enable']) | default(false) %}
  {% if (external['ADLS_storage_account'] != None) | default(false) %}
    {% set adlsStorageAccount = external['ADLS_storage_account'] %}
  {% endif %}
  {% set adlsAccessKey = '${PLATYS_AZURE_ADLS_ACCESS_KEY:?PLATYS_AZURE_ADLS_ACCESS_KEY must be set either in .env or as an environment variable}' %}
{% endif %}   {# external['s3Endpoint'] #}

{#  ================================== Kafka Connect Settings ========================================== #}

{% set ns1 = namespace(connectServersInternalUrl='') %}
{% set ns1 = namespace(connectServersUrl='') %}
{% set ns1 = namespace(connectClusterName='') %}
{% if (KAFKA_CONNECT_enable or KAFKA_KSQLDB_use_embedded_connect) | default(false) %}
  {% if KAFKA_CONNECT_enable %}
    {% set connectNodes = KAFKA_CONNECT_nodes %}
    {% set ns1.connectClusterName = 'connect-custer' %}
  {% else %}
    {% set connectNodes = KAFKA_KSQLDB_nodes %}
    {% set ns1.connectClusterName = 'ksqldb-connect-custer' %}
  {% endif %}
  {% for num in range(connectNodes | default(1) ) %}
    {% set port = 8083 + loop.index-1 %}
    {% if loop.first %}
      {% set ns1.connectServersUrl = 'http://${PUBLIC_IP}:' ~ port %}
      {%if KAFKA_KSQLDB_use_embedded_connect | default(true) %}
        {% set ns1.connectServersInternalUrl = 'http://ksqldb-server-' ~ loop.index ~ ':' ~ port %}
      {% else %}
        {% set ns1.connectServersInternalUrl = 'http://kafka-connect-' ~ loop.index ~ ':' ~ port %}
      {% endif -%}   {#  KAFKA_KSQLDB_use_embedded_connect #}
    {% else %}
      {% set ns1.connectServersUrl = ns1.connectServersUrl ~ ',http://${PUBLIC_IP}:' ~ port %}
      {%if KAFKA_KSQLDB_use_embedded_connect | default(true) %}
        {% set ns1.connectServersInternalUrl = ns1.connectServersInternalUrl ~ ',http://ksqldb-server-' ~ loop.index ~ ':' ~ port %}
      {% else %}
        {% set ns1.connectServersInternalUrl = ns1.connectServersInternalUrl ~ ',http://kafka-connect-' ~ loop.index ~ ':' ~ port %}
      {% endif -%}   {#  KAFKA_KSQLDB_use_embedded_connect #}
    {% endif %}
  {% endfor %}
{% endif %}   {# KAFKA_CONNECT_enable or KAFKA_KSQLDB_use_embedded_connect #}

{#  ================================== Extension Fields ========================================== #}

{%if LOKI_collect_docker_logs | default(false) %}
x-logging: &logging
  logging:
    driver: loki
    options:
      loki-url: "http://localhost:3100/loki/api/v1/push"
      loki-batch-size: "400"
      loki-retries: "0"
{% endif %}   {# LOKI_collect_docker_logs #}

{#  ================================== Services ========================================== #}

services:

{% if ZOOKEEPER_enable | default(false) %}
  #  ================================== Zookeeper ========================================== #
  {% for num in range(ZOOKEEPER_nodes | default('1') ) %}
  {% set port = 2181 + (dataCenterId * ZOOKEEPER_nodes) + loop.index-1 %}
  zookeeper{{dataCenter}}-{{loop.index}}:
    image: confluentinc/cp-zookeeper:{{__CONFLUENT_PLATFORM_version}}
    container_name: zookeeper{{dataCenter}}-{{loop.index}}
    hostname: zookeeper{{dataCenter}}-{{loop.index}}
    labels:
      com.platys.name: "zookeeper"
    ports:
      - "{{port}}:{{port}}"
    environment:
      ZOOKEEPER_SERVER_ID: {{loop.index}}
      ZOOKEEPER_CLIENT_PORT: {{port}}
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    {% if ZOOKEEPER_nodes == 3 %}
      ZOOKEEPER_SERVERS: zookeeper{{dataCenter}}-1:22888:23888;zookeeper{{dataCenter}}-2:32888:33888;zookeeper{{dataCenter}}-3:42888:43888
    {% endif %}
    {% if KAFKA_jmx_monitoring_prometheus_enable %}
      EXTRA_ARGS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.12.0.jar=1234:/usr/share/jmx-exporter/zookeeper.yml
    {% endif -%}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if ZOOKEEPER_volume_map_data %}
      - "./container-volume/zookeeper-{{loop.index}}/data:/var/lib/zookeeper/data"
      - "./container-volume/zookeeper-{{loop.index}}/log:/var/lib/zookeeper/log"
    {% endif %}
    {% if KAFKA_jmx_monitoring_prometheus_enable %}
      - ./scripts/kafka/jmx-exporter/:/usr/share/jmx-exporter
    {% endif -%}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}

  {% if ZOOKEEPER_NAVIGATOR_enable | default(false) %}
  zoonavigator:
    image: elkozmon/zoonavigator-web:{{__ZOONAVIGATOR_version}}
    container_name: zoonavigator
    hostname: zoonavigator
    labels:
      com.platys.name: "zoonavigator"
      com.platys.webui.title: 'Zoonavigator UI'
      com.platys.webui.url: http://${PUBLIC_IP}:28100
    ports:
     - "28100:8010"
    depends_on:
     - zoonavigator-api
    environment:
      WEB_HTTP_PORT: 8010
      API_HOST: "zoonavigator-api"
      API_PORT: 9010
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  zoonavigator-api:
    image: elkozmon/zoonavigator-api:{{__ZOONAVIGATOR_API_version}}
    container_name: zoonavigator-api
    labels:
      com.platys.name: "zoonavigator"
      com.platys.restapi.title: 'Zoonavigator REST API'
      com.platys.restapi.url: 'http://${PUBLIC_IP}:28101'
    ports:
     - "28101:9010"
    environment:
      API_HTTP_PORT: 9010
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {# ZOOKEEPER_NAVIGATOR_enable #}

{% endif %}   {# zookeeper_enable or KAFKA_enable or ATLAS_enable #}

{% if (KAFKA_enable) | default(false) %}
  {# make sure that internal replication factor is not larger than the number of Kafka nodes #}
  {% if KAFKA_internal_replication_factor > KAFKA_broker_nodes -%}
    {% set KAFKA_internal_replication_factor = KAFKA_broker_nodes -%}
  {% endif -%}
  #  ================================== Kafka ========================================== #
  {% for serviceName in (ns.serviceNames.split(',')) %}
    {% set port = ns.ports.split(',')[loop.index-1] %}
    {% if KAFKA_use_standard_port_for_external_interface | default(false) %}
      {% set externalPort = port %}
      {% set dockerHostPort = '2' ~ port %}
    {% else %}
      {% set externalPort = '2' ~ port %}
      {% set dockerHostPort = port %}
    {% endif %}
    {% set portJMX = ns.portsJMX.split(',')[loop.index-1] %}
    {% set dcName = 'rack1' %}
    {% set zookeeperPort = 2181 + (dataCenterId * ZOOKEEPER_nodes) %}
  {{serviceName}}:
    image: confluentinc/{{ 'cp-server' if (KAFKA_edition | lower) == 'enterprise' else 'cp-kafka' }}:{{__CONFLUENT_PLATFORM_version}}
    container_name: {{serviceName}}
    hostname: {{serviceName}}
    labels:
      com.platys.name: "kafka"
    {% if not KAFKA_use_kraft_mode | default(false) %}
    depends_on:
      - zookeeper{{dataCenter}}-1
    {% endif %}
    ports:
      - "{{port}}:{{port}}"
      - "1{{port}}:1{{port}}"
      - "2{{port}}:2{{port}}"
      - "3{{port}}:3{{port}}"
      - "{{portJMX}}:{{portJMX}}"
    environment:
      KAFKA_BROKER_ID: {{loop.index}}
      KAFKA_BROKER_RACK: '{{dcName}}'
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERNAL
      {% if KAFKA_use_kraft_mode | default(false) %}
      KAFKA_CONTROLLER_LISTENER_NAMES: LISTENER_CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: '{{ns.controllerQuorumVoters}}'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: {{loop.index}}
      CLUSTER_ID: xtzWWN4bTjitpL3kfd9s5g
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'LISTENER_CONTROLLER:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT,LISTENER_INTERNAL:PLAINTEXT,LISTENER_DOCKERHOST:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'LISTENER_CONTROLLER://{{serviceName}}:4{{port}},LISTENER_LOCAL://{{serviceName}}:3{{port}},LISTENER_INTERNAL://{{serviceName}}:1{{port}},LISTENER_DOCKERHOST://{{serviceName}}:{{dockerHostPort}},LISTENER_EXTERNAL://{{serviceName}}:{{externalPort}}'
      {% else %}
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper{{dataCenter}}-1:{{zookeeperPort}}'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'LISTENER_INTERNAL:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT,LISTENER_DOCKERHOST:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'LISTENER_INTERNAL://{{serviceName}}:1{{port}},LISTENER_LOCAL://{{serviceName}}:3{{port}},LISTENER_DOCKERHOST://{{serviceName}}:{{dockerHostPort}},LISTENER_EXTERNAL://{{serviceName}}:{{externalPort}}'
      {% endif %}
      KAFKA_ADVERTISED_LISTENERS: 'LISTENER_INTERNAL://{{serviceName}}:1{{port}},LISTENER_LOCAL://localhost:3{{port}},LISTENER_DOCKERHOST://${DOCKER_HOST_IP:-127.0.0.1}:{{dockerHostPort}},LISTENER_EXTERNAL://${PUBLIC_IP:-127.0.0.1}:{{externalPort}}'
      KAFKA_REPLICA_SELECTOR_CLASS: {{KAFKA_replica_selector_class | default(omit)}}
      {% if KAFKA_CCC_enable and (KAFKA_edition | lower) == 'enterprise' | default(false) %}
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      {% endif %}
      {% if (KAFKA_edition | lower) == 'enterprise' | default(false) %}
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      {% if KAFKA_confluent_log_placement_constraints is defined and KAFKA_confluent_log_placement_constraints %}
      KAFKA_CONFLUENT_LOG_PLACEMENT_CONSTRAINTS: '{{KAFKA_confluent_log_placement_constraints}}'
      {% endif %}
      {%if KAFKA_confluent_tier_enable | default(false) %}
      KAFKA_CONFLUENT_TIER_ENABLE: '{{KAFKA_confluent_tier_enable | default(omit) }}'
      KAFKA_CONFLUENT_TIER_FEATURE: '{{KAFKA_confluent_tier_feature | default(omit) }}'
      KAFKA_CONFLUENT_TIER_BACKEND: {{KAFKA_confluent_tier_backend | default(omit) }}
      KAFKA_CONFLUENT_TIER_S3_BUCKET: '{{KAFKA_confluent_tier_s3_bucket| default('kafka-logs') }}'
      KAFKA_CONFLUENT_TIER_S3_PREFIX: '{{KAFKA_confluent_tier_s3_prefix| default(omit) }}'
      KAFKA_CONFLUENT_TIER_S3_REGION: '{{KAFKA_confluent_tier_s3_region | default('us-east-1') }}'
      KAFKA_CONFLUENT_TIER_S3_AWS_ENDPOINT_OVERRIDE: '{{KAFKA_confluent_tier_s3_aws_endpoint_override | default(omit) }}'
      KAFKA_CONFLUENT_TIER_S3_FORCE_PATH_STYLE_ACCESS: '{{KAFKA_confluent_tier_s3_force_path_style_access | default(omit) }}'
      KAFKA_CONFLUENT_TIER_S3_SSE_ALGORITHM: "none"
      KAFKA_CONFLUENT_TIER_LOCAL_HOTSET_BYTES: {{KAFKA_confluent_tier_local_hotset_bytes | default(omit) }}
      KAFKA_CONFLUENT_TIER_LOCAL_HOTSET_MS: {{KAFKA_confluent_tier_local_hotset_ms | default(omit) }}
      KAFKA_CONFLUENT_TIER_ARCHIVER_NUM_THREADS: {{KAFKA_confluent_tier_archiver_num_threads | default(omit) }}
      KAFKA_CONFLUENT_TIER_FETCHER_NUM_THREADS: {{KAFKA_confluent_tier_fetcher_num_threads | default(omit) }}
      KAFKA_CONFLUENT_TIER_TOPIC_DELETE_CHECK_INTERVAL_MS: {{KAFKA_confluent_tier_topic_delete_check_interval_ms | default(omit) }}
      KAFKA_CONFLUENT_TIER_METADATA_REPLICATION_FACTOR: {{KAFKA_confluent_tier_metadata_replication_factor | default(1) }}
      #KAFKA_CONFLUENT_TIER_S3_AWS_ACCESS_KEY_ID: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      #KAFKA_CONFLUENT_TIER_S3_AWS_SECRET_ACCESS_KEY: {{s3SecretAccessKey}}
      AWS_ACCESS_KEY_ID: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      AWS_SECRET_ACCESS_KEY: {{s3SecretAccessKey}}
      {% endif -%} {# KAFKA_confluent_tier_enable #}
      {% endif -%} {# KAFKA_edition == ENTERPRISE #}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      KAFKA_MESSAGE_TIMESTAMP_TYPE: {{KAFKA_message_timestamp_type | default('CreateTime')}}
      KAFKA_COMPRESSION_TYPE: '{{KAFKA_compression_type | default(omit) }}'
      KAFKA_LOG_SEGMENT_BYTES: {{KAFKA_log_segment_bytes | default(omit) }}
      KAFKA_LOG_RETENTION_MS: {{KAFKA_log_retention_ms | default(omit) }}
      KAFKA_LOG_RETENTION_HOURS: {{KAFKA_log_retention_hours | default(omit) }}
      KAFKA_LOG_RETENTION_BYTES: {{KAFKA_log_retention_bytes | default(omit) }}
      KAFKA_MIN_INSYNC_REPLICAS: {{KAFKA_min_insync_replicas | default(1) }}
      KAFKA_DELETE_TOPIC_ENABLE: '{{ KAFKA_delete_topic_enable | default(omit) }}'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: '{{ KAFKA_auto_create_topics_enable | default(omit) }}'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_JMX_PORT: {{portJMX}}
      KAFKA_JMX_OPTS: '-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port={{portJMX}}'
      KAFKA_JMX_HOSTNAME: '${PUBLIC_IP:-127.0.0.1}'
      KAFKA_LOG4J_ROOT_LOGLEVEL: '{{KAFKA_log4j_root_level}}'
      {% if KAFKA_log4j_loggers is defined and KAFKA_log4j_loggers %}
      KAFKA_LOG4J_LOGGERS: '{{KAFKA_log4j_loggers}}'
      {% endif -%} {# KAFKA_log4j_loggers #}
      KAFKA_TOOLS_LOG4J_LOGLEVEL: '{{KAFKA_tools_log4j_level}}'
    {% if KAFKA_jmx_monitoring_prometheus_enable %}
      EXTRA_ARGS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.12.0.jar=1234:/usr/share/jmx-exporter/kafka_broker.yml
    {% endif -%}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if KAFKA_volume_map_data %}
      - "./container-volume/kafka-{{loop.index}}:/var/lib/kafka/data"
    {% endif %}
    {% if KAFKA_use_kraft_mode %}
      - "./scripts/kafka/kraft/update_run.sh:/tmp/update_run.sh"
    {% endif %}
    {% if KAFKA_jmx_monitoring_prometheus_enable %}
      - ./scripts/kafka/jmx-exporter/:/usr/share/jmx-exporter
    {% endif -%}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {% if KAFKA_use_kraft_mode %}
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
    {% endif %}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %} {# for serviceName in (ns.serviceNames) #}

{% endif %} {# KAFKA_enable #}

{% if ( (KAFKA_enable or external['KAFKA_enable']) and KAFKA_CONNECT_enable ) | default(false) %}
  #  ================================== Kafka Connect ========================================== #
  {% for num in range(KAFKA_CONNECT_nodes | default(1) ) %}
    {% set external_port = 8083 + loop.index - 1 %}
    {% set port = 8083 + loop.index - 1 %}
  kafka-connect-{{loop.index}} :
    image: confluentinc/cp-kafka-connect:{{__CONFLUENT_PLATFORM_version}}
    container_name: kafka-connect-{{loop.index}}
    hostname: kafka-connect-{{loop.index}}
    labels:
      com.platys.name: "kafka-connect"
      com.platys.restapi.title: 'Kafka Connect REST API'
      com.platys.restapi.url: "http://${PUBLIC_IP}:{{external_port}}"
    ports:
      - "{{external_port}}:{{port}}"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      CONNECT_LISTENERS: 'http://0.0.0.0:{{port}}'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect-{{loop.index}}
      CONNECT_REST_ADVERTISED_PORT: {{port}}
      CONNECT_GROUP_ID: kafka-connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
   {%if SCHEMA_REGISTRY_enable | default(false) %}
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: '{{ns.schemaRegistryUrl}}'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: '{{ns.schemaRegistryUrl}}'
   {% else %}
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
   {% endif -%}   {#  SCHEMA_REGISTRY_enable #}
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/addl-plugins,/etc/kafka-connect/cflthub-plugins"
      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: 'All'
    {%if external['KAFKA_enable'] and external['KAFKA_sasl_mechanism'] is defined and external['KAFKA_sasl_mechanism'] | length %}
      CONNECT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: "https"
      CONNECT_SECURITY_PROTOCOL: "{{external['KAFKA_security_protocol']}}"
      CONNECT_SASL_MECHANISM: "{{external['KAFKA_sasl_mechanism']}}"
      CONNECT_SASL_JAAS_CONFIG: "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"{{kafkaUsername}}\" password=\"{{kafkaPassword}}\";"
      #
      CONNECT_CONSUMER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: "https"
      CONNECT_CONSUMER_SECURITY_PROTOCOL: "{{external['KAFKA_security_protocol']}}"
      CONNECT_CONSUMER_SASL_MECHANISM: "{{external['KAFKA_sasl_mechanism']}}"
      CONNECT_CONSUMER_SASL_JAAS_CONFIG: "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"{{kafkaUsername}}\" password=\"{{kafkaPassword}}\";"
      #
      CONNECT_PRODUCER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: "https"
      CONNECT_PRODUCER_SECURITY_PROTOCOL: "{{external['KAFKA_security_protocol']}}"
      CONNECT_PRODUCER_SASL_MECHANISM: "{{external['KAFKA_sasl_mechanism']}}"
      CONNECT_PRODUCER_SASL_JAAS_CONFIG: "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"{{kafkaUsername}}\" password=\"{{kafkaPassword}}\";"
    {% endif -%}   {#  external['KAFKA_sasl_mechanism'] is defined #}
      #CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-4.0.0.jar
      AWS_ACCESS_KEY_ID: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      AWS_SECRET_ACCESS_KEY: {{s3SecretAccessKey}}
      # External secrets config
      # See https://docs.confluent.io/current/connect/security.html#externalizing-secrets
      CONNECT_CONFIG_PROVIDERS: '{{KAFKA_CONNECT_config_providers}}'
      CONNECT_CONFIG_PROVIDERS_{{KAFKA_CONNECT_config_providers | upper }}_CLASS: '{{KAFKA_CONNECT_config_providers_classes}}'
    {% if OTEL_COLLECTOR_enable | default(false) %}
      OTEL_RESOURCE_ATTRIBUTES: 'service.name=connect'
      KAFKA_OPTS: '-javaagent:/otel/opentelemetry-javaagent.jar -Dotel.exporter.otlp.endpoint=http://otel-collector:4317'
    {% endif -%}
    {% if KAFKA_jmx_monitoring_prometheus_enable %}
      EXTRA_ARGS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.12.0.jar=1234:/usr/share/jmx-exporter/kafka_connect.yml
    {% endif -%}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/kafka-connect/connectors:/etc/kafka-connect/addl-plugins
      - ./plugins/kafka-connect/jars:/etc/kafka-connect/jars
      - ./plugins/opentelemetry/agents:/otel
    {%if KAFKA_CONNECT_map_settings_file | default(false) %}
      - ./custom-conf/kafka-connect/settings.properties:/data/settings.properties
    {% endif -%}   {#  KAFKA_CONNECT_map_credentials_file #}
    {% if KAFKA_jmx_monitoring_prometheus_enable %}
      - ./scripts/kafka/jmx-exporter/:/usr/share/jmx-exporter
    {% endif -%}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command:
      # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
      - bash
      - -c
      - |
        echo "Installing Connectors"
        mkdir -p /etc/kafka-connect/cflthub-plugins
        for i in $$(echo "{{KAFKA_CONNECT_connectors}}" | sed "s/,/ /g")
        do
          confluent-hub install --no-prompt --component-dir /etc/kafka-connect/cflthub-plugins --verbose "$$i"
        done
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}
{% endif %}   {# KAFKA_enable and KAFKA_CONNECT_enable  #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_KSQLDB_enable )| default(false) %}
  #  ================================== ksqlDB ========================================== #
  {% for num in range(KAFKA_KSQLDB_nodes | default(1) ) %}
    {% set external_port = 8088 + loop.index - 1 %}
    {% set port = 8088 %}
    {% set jmx_external_port = 1095 + loop.index - 1 %}
    {% set jmx_port = 1095 %}
    {% set connect_external_port = 8083 + loop.index - 1 %}
    {% set connect_port = 8083 + loop.index - 1 %}
  ksqldb-server-{{loop.index}} :
    image: confluentinc/{{ 'ksqldb-server' if (KAFKA_KSQLDB_edition | lower) == 'oss' else 'cp-ksqldb-server' }}:{{__KAFKA_KSQLDB_version if (KAFKA_KSQLDB_edition | lower) == 'oss' else __CONFLUENT_PLATFORM_version}}
    hostname: ksqldb-server-{{loop.index}}
    container_name: ksqldb-server-{{loop.index}}
    labels:
      com.platys.name: "ksqldb"
      com.platys.restapi.title: 'ksqlDB Server REST API'
      com.platys.restapi.url: "http://${PUBLIC_IP}:{{external_port}}"
    ports:
      - "{{external_port}}:{{port}}"
      - "{{jmx_external_port}}:{{jmx_port}}"
    {% if ( KAFKA_KSQLDB_use_embedded_connect ) | default(false) %}
      - {{connect_external_port}}:{{connect_port}}
    {% endif %}
    environment:
      #KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksqldb/log4j-rolling.properties"
    {% if ( KAFKA_KSQLDB_edition | lower) == 'cp'  | default(false) %}
      KSQL_LOG4J_ROOT_LOGLEVEL: "INFO"
      KSQL_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      KSQL_LOG4J_PROCESSING_LOG_TOPIC: ksql_processing_log
      KSQL_LOG4J_PROCESSING_LOG_BROKERLIST: '{{ns.bootstrapServers}}'
    {% else %}
      KSQL_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      KSQL_LOG4J_PROCESSING_LOG_BROKERLIST: '{{ns.bootstrapServers}}'
      KSQL_LOG4J_PROCESSING_LOG_TOPIC: 'ksql_processing_log'
    {% endif %}
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_NAME: 'ksql_processing_log'
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: {{KAFKA_KSQLDB_internal_replication_factor | default(1)}}
      KSQL_KSQL_LOGGING_PROCESSING_ROWS_INCLUDE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'

      # For Demo purposes: improve resource utilization and avoid timeouts
      KSQL_KSQL_STREAMS_NUM_STREAM_THREADS: 1

      KSQL_PRODUCER_ENABLE_IDEMPOTENCE: 'true'
      KSQL_KSQL_PERSISTENCE_DEFAULT_FORMAT_KEY: '{{KAFKA_KSQLDB_persistence_default_format_key | default(KAFKA) }}'
    {% if KAFKA_KSQLDB_persistence_default_format_value is defined and KAFKA_KSQLDB_persistence_default_format_value|length %}
      KSQL_KSQL_PERSISTENCE_DEFAULT_FORMAT_VALUE: '{{KAFKA_KSQLDB_persistence_default_format_value}}'
    {% endif %}

      KSQL_APPLICATION_ID: "ksqldb-cluster"
      KSQL_KSQL_SERVICE_ID: "ksqldb-cluster"
      KSQL_HOST_NAME: ksqldb-server-{{loop.index}}
      KSQL_LISTENERS: http://0.0.0.0:{{port}}
      KSQL_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_RESPONSE_HTTP_HEADERS_CONFIG: '{{KAFKA_KSQLDB_response_http_headers_config}}'
    {% if OTEL_COLLECTOR_enable | default(false) %}
      OTEL_RESOURCE_ATTRIBUTES: 'service.name=ksqldb'
      KSQL_OPTS: '-javaagent:/otel/opentelemetry-javaagent.jar -Dotel.exporter.otlp.endpoint=http://otel-collector:4317'
    {% endif -%}   {#  OTEL_COLLECTOR_enable #}
    {% if external['KAFKA_enable'] and external['KAFKA_sasl_mechanism'] is defined and external['KAFKA_sasl_mechanism'] | length %}
      KSQL_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: "https"
      KSQL_SECURITY_PROTOCOL: "{{external['KAFKA_security_protocol']}}"
      KSQL_SASL_MECHANISM: "{{external['KAFKA_sasl_mechanism']}}"
      KSQL_SASL_JAAS_CONFIG: "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"{{kafkaUsername}}\" password=\"{{kafkaPassword}}\";"
    {% endif -%}   {#  external['KAFKA_sasl_mechanism'] is defined #}

    {% if ( KAFKA_CONNECT_enable ) | default(false) %}
      KSQL_KSQL_CONNECT_URL: {{ns1.connectServersInternalUrl}}
    {% endif -%}   {#  KAFKA_CONNECT_enable #}
      KSQL_KSQL_SCHEMA_REGISTRY_URL: '{{ns.schemaRegistryUrl}}'
    {% if schemaRegistryUsername is defined and schemaRegistryUsername|length %}
      KSQL_KSQL_SCHEMA_REGISTRY_BASIC_AUTH_CREDENTIALS_SOURCE: "USER_INFO"
      KSQL_KSQL_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO:  "{{schemaRegistryUsername}}:{{schemaRegistryPassword}}"
    {% endif %}
      KSQL_KSQL_INTERNAL_TOPIC_REPLICAS: {{KAFKA_KSQLDB_internal_replication_factor | default(1)}}
      KSQL_KSQL_SINK_REPLICAS: {{KAFKA_KSQLDB_internal_replication_factor | default(1)}}
      KSQL_KSQL_STREAMS_REPLICATION_FACTOR: {{KAFKA_KSQLDB_internal_replication_factor | default(1)}}
      KSQL_KSQL_QUERY_PULL_METRICS_ENABLED: "true"
      KSQL_KSQL_HIDDEN_TOPICS: '^_.*,default_ksql_processing_log'
    {% if (KAFKA_edition | lower) == 'enterprise' and KAFKA_CCC_enable %}
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
    {% endif %}

      KSQL_KSQL_SUPPRESS_ENABLED: "{{KAFKA_KSQLDB_suppress_enabled | default(omit)}}"
      KSQL_KSQL_SUPPRESS_BUFFER_SIZE_BYTES: "{{KAFKA_KSQLDB_suppress_buffer_size_bytes | default(-1)}}"

      KSQL_KSQL_QUERY_PULL_TABLE_SCAN_ENABLED: "{{KAFKA_KSQLDB_query_pull_table_scan_enabled | default(omit)}}"
      KSQL_CONFIG_DIR: "/etc/ksqldb"
      KSQL_KSQL_EXTENSION_DIR: '/etc/ksqldb/ext/'

    {% if KAFKA_KSQLDB_queries_file is defined and KAFKA_KSQLDB_queries_file|length %}
      KSQL_KSQL_QUERIES_FILE: "{{KAFKA_KSQLDB_queries_file}}"
    {% endif -%}   {#  KAFKA_KSQLDB_queries_file #}
      KSQL_JMX_OPTS: "-Djava.rmi.server.hostname=localhost -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port={{jmx_port}} -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port={{jmx_port}}"
    {% if KAFKA_jmx_monitoring_prometheus_enable %}
      KSQL_OPTS: '-javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.12.0.jar=1234:/usr/share/jmx-exporter/confluent_ksql.yml'
    {% endif -%}
    {% if KAFKA_KSQLDB_use_embedded_connect %}
      KSQL_KSQL_CONNECT_WORKER_CONFIG: "/etc/ksqldb/connect.properties"
      # Kafka Connect config below
      KSQL_CONNECT_BOOTSTRAP_SERVERS: "kafka-1:19092"
      KSQL_CONNECT_REST_ADVERTISED_HOST_NAME: 'ksqldb-server-{{loop.index}}'
      KSQL_CONNECT_REST_ADVERTISED_PORT: {{connect_port}}
      KSQL_CONNECT_GROUP_ID: ksqldb-kafka-connect-group-01
      KSQL_CONNECT_CONFIG_STORAGE_TOPIC: _ksqldb-kafka-connect-group-01-configs
      KSQL_CONNECT_OFFSET_STORAGE_TOPIC: _ksqldb-kafka-connect-group-01-offsets
      KSQL_CONNECT_STATUS_STORAGE_TOPIC: _ksqldb-kafka-connect-group-01-status
      KSQL_CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      KSQL_CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      KSQL_CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry-1:8081'
      KSQL_CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      KSQL_CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      KSQL_CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      KSQL_CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      KSQL_CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/addl-plugins,/etc/kafka-connect/cflthub-plugins'
    {% endif -%}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/ksqldb:/etc/ksqldb/ext
#      - ./conf/ksqldb/etc/log4j.properties:/etc/ksqldb/log4j.properties
      - ./plugins/kafka-connect/connectors:/etc/kafka-connect/addl-plugins
      - ./plugins/kafka-connect/jars:/etc/kafka-connect/jars
      - ./plugins/opentelemetry/agents:/otel
    {% if KAFKA_jmx_monitoring_prometheus_enable %}
      - ./scripts/kafka/jmx-exporter/:/usr/share/jmx-exporter
    {% endif -%}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if KAFKA_KSQLDB_use_embedded_connect and loop.index == 1 | default(false) %}
    command:
      # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
      - bash
      - -c
      - |
        echo "Installing Connectors"
          for i in $$(echo "{{KAFAK_KSQLDB_connect_connectors}}" | sed "s/,/ /g")
        do
          confluent-hub install --no-prompt --component-dir /etc/kafka-connect/cflthub-plugins --verbose "$$i"
        done
        #
        echo "Launching ksqlDB server"
        #/etc/confluent/docker/run &
        /usr/bin/docker/run &
        #
        sleep infinity
    {% endif %}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}

  # Access the cli by running:
  # > docker exec -it ksqldb-cli ksql http://ksqldb-server-1:8088
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:{{__KAFKA_KSQLDB_version}}
    container_name: ksqldb-cli
    hostname: ksqldb-cli
    labels:
      com.platys.name: "ksqldb-cli"
    depends_on:
      - ksqldb-server-1
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint: /bin/sh
    tty: true
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_broker_enable and KAFKA_KSQLDB_enable #}

{% if (MATERIALIZE_enable) | default(false) %}
  #  ================================== Materialize ========================================== #
  materialize-1:
    image: materialize/materialized:{{__MATERIALIZE_version}}
    hostname: materialize-1
    container_name: materialize-1
    labels:
      com.platys.name: "materialize"
    ports:
      - "6875:6875"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% if (MATERIALIZE_CLI_enable) | default(false) %}
  mzcli:
    image: materialize/mzcli:latest
    hostname: mzcli
    container_name: mzcli
    labels:
      com.platys.name: "materialize"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint:
      - /bin/sh
      - -c
      - |
        while [ 1 -eq 1 ];do sleep 60;done
    restart: {{container_restart_policy}}
  {% endif %}   {# MATERIALIZE_enable #}
{% endif %}   {# MATERIALIZE_CLI_enable #}

{% if (AZKARRA_enable) | default(false) %}
  #  ================================== Azkarra Streams ========================================== #
  azkarra-worker-1:
    image: streamthoughts/azkarra-streams-worker:{{__AZKARRA_version}}
    hostname: azkarra-worker-1
    container_name: azkarra-worker-1
    labels:
      com.platys.name: "azkarra-worker"
      com.platys.restapi.title: 'Kafka REST Proxy'
      com.platys.restapi.url: "http://${PUBLIC_IP}:28085"
    ports:
      - "28085:8080"
    environment:
      AZKARRA_CONTEXT_STREAMS_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      AZKARRA_CONTEXT_STREAMS_STATE_DIR: /var/lib/kafka-streams/
      AZKARRA_CONTEXT_AUTO_CREATE_TOPICS_ENABLE: "true"
      AZKARRA_CONTEXT_AUTO_DELETE_TOPICS_ENABLE: "true"
      AZKARRA_CONTEXT_ENABLE_WAIT_FOR_TOPICS: "true"
      AZKARRA_COMPONENT_PATHS: /usr/share/azkarra-components
    volumes:
      - /components/azkarra:/usr/share/azkarra-components
      #- /tmp/azkarra/etc/azkarra.conf:/etc/azkarra/azkarra.conf
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
{% endif %}   {# AZKARRA_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_RESTPROXY_enable) | default(false) %}
  #  ================================== Confluent REST Proxy ========================================== #
  kafka-rest-1:
    image: confluentinc/cp-kafka-rest:{{__CONFLUENT_PLATFORM_version}}
    container_name: kafka-rest-1
    hostname: kafka-rest-1
    labels:
      com.platys.name: "kafka-rest"
      com.platys.restapi.title: 'Kafka REST Proxy'
      com.platys.restapi.url: "http://${PUBLIC_IP}:18086"
    ports:
      - "18086:8086"
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8086'
      KAFKA_REST_SCHEMA_REGISTRY_URL: '{{ns.schemaRegistryUrl}}'
      KAFKA_REST_HOST_NAME: 'kafka-rest-1'
    {% if KAFKA_jmx_monitoring_prometheus_enable %}
      KAFKAREST_OPTS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.12.0.jar=1234:/usr/share/jmx-exporter/confluent_rest.yml
    {% endif -%}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if KAFKA_jmx_monitoring_prometheus_enable %}
      - ./scripts/kafka/jmx-exporter/:/usr/share/jmx-exporter
    {% endif -%}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_RESTPROXY_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_MQTTPROXY_enable) | default(false) %}
  #  ================================== Confluent MQTT Proxy ========================================== #
  kafka-mqtt-1:
    image: confluentinc/cp-kafka-mqtt:{{__CONFLUENT_PLATFORM_version}}
    container_name: kafka-mqtt-1
    hostname: kafka-mqtt-1
    labels:
      com.platys.name: "kafka-mqtt"
    ports:
      - "1882:1882"
    environment:
      KAFKA_MQTT_TOPIC_REGEX_LIST: {{KAFKA_MQTTPROXY_topic_regex_list}}
      KAFKA_MQTT_LISTENERS: 0.0.0.0:1882
      KAFKA_MQTT_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      KAFKA_MQTT_CONFLUENT_TOPIC_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_MQTTPROXY_enable #}

{% if ZILLA_enable | default(false) %}
  #  ================================== Zilla ========================================== #
  zilla:
    image: ghcr.io/aklivity/zilla:{{__ZILLA_version}}
    container_name: zilla
    hostname: zilla
    labels:
      com.platys.name: "zilla"
      com.platys.restapi.title: 'Zilla'
      com.platys.restapi.url: "http://${PUBLIC_IP}:28277"
    ports:
      - "28277:8080"
      - "28278:9090"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    command: [ "start", "-v", "-e" ]
    restart: {{container_restart_policy}}
{% endif %}   {# ZILLA_enable #}

{% if (SCHEMA_REGISTRY_enable and SCHEMA_REGISTRY_flavour | lower) == 'confluent' | default(false) %}
  #  ================================== Confluent Schema Registry ========================================== #
  {% for num in range(SCHEMA_REGISTRY_nodes | default(1) ) %}
    {% set external_port = 8081 + loop.index - 1 %}
    {% set port = 8081 + loop.index - 1 %}
  schema-registry-{{loop.index}}:
    image: confluentinc/cp-schema-registry:{{__CONFLUENT_PLATFORM_version}}
    hostname: schema-registry-{{loop.index}}
    container_name: schema-registry-{{loop.index}}
    labels:
      com.platys.name: "schema-registry"
      com.platys.restapi.title: 'Schema Registry REST API'
      com.platys.restapi.url: "http://${PUBLIC_IP}:{{external_port}}"
    ports:
      - "{{external_port}}:{{port}}"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry-{{loop.index}}
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:{{port}}"
    {% if CONFLUENT_SCHEMA_REGISTRY_use_zookeeper_election %}
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper-1:2181'
    {% endif %}
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: 'PLAINTEXT'
      SCHEMA_REGISTRY_GROUP_ID: "{{CONFLUENT_SCHEMA_REGISTRY_group_id}}"
      SCHEMA_REGISTRY_LEADER_ELIGIBILITY: "{{CONFLUENT_SCHEMA_REGISTRY_leader_eligibility}}"
      SCHEMA_REGISTRY_MODE_MUTABILITY: "{{CONFLUENT_SCHEMA_REGISTRY_mode_mutability}}"
      SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL: "{{CONFLUENT_SCHEMA_REGISTRY_schema_compatibility_level}}"
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: {{CONFLUENT_SCHEMA_REGISTRY_replication_factor}}
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: "{{CONFLUENT_SCHEMA_REGISTRY_log4j_root_loglevel}}"
      SCHEMA_REGISTRY_DEBUG: "{{CONFLUENT_SCHEMA_REGISTRY_debug}}"
    {% if OTEL_COLLECTOR_enable | default(false) %}
      OTEL_RESOURCE_ATTRIBUTES: 'service.name=schema-registry'
      SCHEMA_REGISTRY_OPTS: '-javaagent:/otel/opentelemetry-javaagent.jar -Dotel.exporter.otlp.endpoint=http://otel-collector:4317'
    {% endif -%}
    {% if KAFKA_jmx_monitoring_prometheus_enable %}
      EXTRA_ARGS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.12.0.jar=1234:/usr/share/jmx-exporter/confluent_schemaregistry.yml
    {% endif -%}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/opentelemetry/agents:/otel
    {% if KAFKA_jmx_monitoring_prometheus_enable %}
      - ./scripts/kafka/jmx-exporter/:/usr/share/jmx-exporter
    {% endif -%}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}
{% endif %}   {# KAFKA_enable and SCHEMA_REGISTRY_flavour == confluent #}

{% if (SCHEMA_REGISTRY_enable and SCHEMA_REGISTRY_flavour | lower) == 'apicurio' | default(false) %}
  #  ================================== Apicurio Schema Registry ========================================== #
  {% for num in range(SCHEMA_REGISTRY_nodes | default(1) ) %}
    {% set http_external_port = 8081 + loop.index - 1 %}
    {% set http_port = 8080 + loop.index - 1 %}
  apicurio-registry-{{loop.index}}:
    image: apicurio/apicurio-registry-{{APICURIO_SCHEMA_REGISTRY_storage}}:{{__APICURIO_SCHEMA_REGISTRY_version}}
    hostname: apicurio-registry-{{loop.index}}
    container_name: apicurio-registry-{{loop.index}}
    labels:
      com.platys.name: "apicurio-registry"
      com.platys.webui.title: 'Apicurio Registry UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:{{http_external_port}}"
      com.platys.restapi.title: 'Apicurio Registry REST API (Confluent compliant)'
      com.platys.restapi.url: "http://${PUBLIC_IP}:{{http_external_port}}/apis/ccompat/v6"
    ports:
      - "{{http_external_port}}:{{http_port}}"
    environment:
      QUARKUS_PROFILE: prod
    {% if (APICURIO_SCHEMA_REGISTRY_storage | lower) == 'kafkasql'  %}
      KAFKA_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      REGISTRY_KAFKASQL_TOPIC: 'kafkasql-journal'
    {% endif -%}   {#  APICURIO_SCHEMA_REGISTRY_storage == sql #}
    {% if (APICURIO_SCHEMA_REGISTRY_storage | lower) == 'sql'  %}
      REGISTRY_DATASOURCE_URL: jdbc:postgresql://postgresql/{{APICURIO_SCHEMA_REGISTRY_sql_storage_database}}
      REGISTRY_DATASOURCE_USERNAME: {{APICURIO_SCHEMA_REGISTRY_sql_storage_user}}
      REGISTRY_DATASOURCE_PASSWORD: {{APICURIO_SCHEMA_REGISTRY_sql_storage_password}}
    {% endif -%}   {#  APICURIO_SCHEMA_REGISTRY_storage == sql #}
    {% if APICURIO_auth_enabled | default(false) %}
      AUTH_ENABLED: '{{APICURIO_auth_enabled}}'
      KEYCLOAK_URL: 'http://${PUBLIC_IP}:28204/auth'
      KEYCLOAK_REALM: 'registry'
      KEYCLOAK_API_CLIENT_ID: 'registry-api'
      KEYCLOAK_UI_CLIENT_ID: 'apicurio-registry'
      REGISTRY_AUTH_ANONYMOUS_READ_ACCESS_ENABLED: '{{APICURIO_auth_anonymous_read_access_enabled}}'
      ROLE_BASED_AUTHZ_ENABLED: 'True'
      ROLE_BASED_AUTHZ_SOURCE: 'token'
#     OWNER_ONLY_AUTHZ_ENABLED
#     REGISTRY_AUTH_ADMIN_OVERRIDE_ENABLED: 'True'
#     REGISTRY_AUTH_ADMIN_OVERRIDE_ROLE: ''
#     CLIENT_CREDENTIALS_BASIC_AUTH_ENABLED: 'True'
      {% if APICURIO_basic_auth_enabled | default(false) %}
      CLIENT_CREDENTIALS_BASIC_AUTH_ENABLED: 'True'
      {% endif -%}   {#  APICURIO_basic_auth_enabled #}
    {% endif -%}   {#  APICURIO_auth_enabled #}
    {% if APICURIO_eventsourcing_enabled | default(false) %}
      {% if (APICURIO_eventsourcing_transport | lower) == 'kafka'  %}
      KAFKA_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      REGISTRY_EVENTS_KAFKA_TOPIC: '{{APICURIO_eventsourcing_kafka_topic}}'
      {% else -%}   {#  APICURIO_eventsourcing_type #}
      REGISTY_EVENTS_SINK_CONSUMER: '{{APICURIO_eventsourcing_http_endpoint}}'
      {% endif -%}   {#  APICURIO_eventsourcing_type #}
    {% endif -%}   {#  APICURIO_eventsourcing_enabled #}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}
{% endif %}   {# KAFKA_enable and SCHEMA_REGISTRY_flavour == apicurio #}

{% if (SCHEMA_REGISTRY_enable and SCHEMA_REGISTRY_UI_enable) | default(false) %}
  #  ================================== Schema Registry UI ========================================== #
  schema-registry-ui:
    image: landoop/schema-registry-ui:{{__SCHEMA_REGISTRY_UI_version}}
    container_name: schema-registry-ui
    hostname: schema-registry-ui
    labels:
      com.platys.name: "schema-registry-ui"
      com.platys.webui.title: 'Confluent Schema Registry UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28102"
    ports:
      - "28102:8000"
    environment:
      SCHEMAREGISTRY_URL: '{{ns.schemaRegistryUrlExternal}}'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if SCHEMA_REGISTRY_UI_map_resolv_conf | default(false) %}
      - ./conf/resolv.conf:/etc/resolv.conf:ro
    {% endif -%}   {#  use_timezone #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# SCHEMA_REGISTRY_enable and SCHEMA_REGISTRY_UI_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and (KAFKA_edition | lower) == 'enterprise' and KAFKA_CCC_enable) | default(false) %}
  #  ================================== Confluent Control Center ========================================== #
  {% set externalPort = 9021 + dataCenterId %}
  control-center{{dataCenter}}:
    image: confluentinc/cp-enterprise-control-center:{{__CONFLUENT_PLATFORM_version}}
    hostname: control-center{{dataCenter}}
    container_name: control-center{{dataCenter}}
    labels:
      com.platys.name: "confluent-control-center"
      com.platys.webui.title: 'Control Center UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:{{externalPort}}"
    ports:
      - "{{externalPort}}:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper-1:2181'
  {% if ( KAFKA_CONNECT_enable or KAFKA_KSQLDB_use_embedded_connect) | default(false) %}
      CONTROL_CENTER_CONNECT_DEMO_CLUSTER: '${DOCKER_HOST_IP}:8083'
  {% endif %}
  {% if ( KAFKA_KSQLDB_enable ) | default(false) %}
      CONTROL_CENTER_KSQL_DEMO_URL: "http://ksqldb-server-1:8088"
      CONTROL_CENTER_KSQL_DEMO_ADVERTISED_URL: "http://${PUBLIC_IP}:8088"
  {% endif %}
      CONTROL_CENTER_SCHEMA_REGISTRY_ENABLE: 'true'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: '{{ns.schemaRegistryUrl}}'
      CONTROL_CENTER_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: {{KAFKA_internal_replication_factor | default(1)}}
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: {{KAFKA_internal_replication_factor | default(1)}}
      CONFLUENT_METRICS_TOPIC_REPLICATION: {{KAFKA_internal_replication_factor | default(1)}}
      PORT: 9021
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_CCC_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and (KAFKA_edition | lower) == 'enterprise' and KAFKA_REPLICATOR_enable) | default(false) %}
  replicator-1:
    image: confluentinc/cp-enterprise-replicator:{{__CONFLUENT_PLATFORM_version}}
    container_name: replicator-1
    hostname: replicator-1
    labels:
      com.platys.name: "confluent-replicator"
    ports:
      - 18083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'replicator-1'
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-replicator
      CONNECT_CONFIG_STORAGE_TOPIC: _replicator-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _replicator-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _replicator-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: '{{ns.schemaRegistryUrl}}'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: '{{ns.schemaRegistryUrl}}'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_LOG4J_ROOT_LOGLEVEL: 'INFO'
      CONNECT_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/'
      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: 'All'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_REPLICATOR_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and (KAFKA_edition | lower) == 'enterprise' and KAFKA_MM2_enable) | default(false) %}
  mirror-maker{{dataCenter}}-1:
    image: trivadis/mirrormaker2:{{__KAFKA_MM2_version}}
    container_name: mirror-maker{{dataCenter}}-1:
    hostname: mirror-maker{{dataCenter}}-1:
    labels:
      com.platys.name: "mirror-maker2"
    environment:
      MM2: ''
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/mirror-maker2/mm2.properties:/opt/mm2/kafka-mm2.properties:ro
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
{% endif %}   {# KAFKA_enable and KAFKA_MM2_enable #}

{% if (LENSES_BOX_enable) | default(false) %}
  #  ================================== Lenses Box ========================================== #
  lenses-box:
    image: lensesio/box:{{__LENSES_BOX_version}}
    container_name: lenses-box
    hostname: lenses-box
    labels:
      com.platys.name: "lenses-box"
      com.platys.webui.title: 'Lenses Box UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:3030"
    ports:
      - 3030:3030
      - 9192:9192
    environment:
      ADV_HOST: "${PUBLIC_IP}"
      BROKER_PORT: 9192
      EULA: "{{LENSES_BOX_license}}"
      SAMPLEDATA: 1
      RUNNING_SAMPLEDATA: 1
      BROWSECONFIGS: 1
      CONNECT_PLUGIN_PATH: "/usr/share/java,/connectors,/etc/kafka-connect/addl-plugins"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/kafka-connect/connectors:/etc/kafka-connect/addl-plugins
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# LENSES_BOX_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KCAT_enable) | default(false) %}
  #  ================================== kcat (used to be kafkacat)  ========================================== #
  kcat:
    image: edenhill/kcat:{{__KCAT_version}}
    container_name: kcat
    hostname: kcat
    labels:
      com.platys.name: "kcat"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint:
      - /bin/sh
      - -c
      - |
        while [ 1 -eq 1 ];do sleep 60;done
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# KCAT_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKACTL_enable) | default(false) %}
  #  ================================== kafkacatl  ========================================== #
  kafkactl:
    image: docker.io/jbvmio/kafkactl/kafkactl:{{__KAFKACTL_version}}
    container_name: kafkactl
    hostname: kafkactl
    labels:
      com.platys.name: "kafkactl"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint:
      - /bin/sh
      - -c
      - |
        while [ 1 -eq 1 ];do sleep 60;done
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKACTL_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and JIKKOU_enable) | default(false) %}
  #  ================================== Jikkou ========================================== #
  jikkou:
    image: streamthoughts/jikkou:{{__JIKKOU_version}}
    container_name: jikkou
    hostname: jikkou
    labels:
      com.platys.name: "jikkou"
    environment:
      JIKKOU_DEFAULT_KAFKA_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/jikkou/:/jikkou
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command:
      - "topics"
      - "apply"
      - "--files"
      - "/jikkou/"
      - "--file-name"
      - "**/*.yml"
    {% if JIKKOU_set_labels is defined and JIKKOU_set_labels %}
      {% for label in JIKKOU_set_labels.split(",") %}
      - "--set-label"
      - "{{label}}"
      {% endfor -%}
    {% endif -%}   {#  JIKKOU_set_labels #}
    {% if JIKKOU_set_variables is defined and JIKKOU_set_variables %}
      {% for var in JIKKOU_set_variables.split(",") %}
      - "--set-var"
      - "{{var}}"
      {% endfor -%}
    {% endif -%}   {#  JIKKOU_set_variables #}
    {% if JIKKOU_use_delete_config_orphans_option | default(true) %}
      - "--delete-config-orphans"
    {% endif -%}   {#  JIKKOU_use_verbose_option #}
    {% if JIKKOU_use_delete_topic_orphans_option | default(true) %}
      - "--delete-topic-orphans"
    {% endif -%}   {#  JIKKOU_use_verbose_option #}
    {% if JIKKOU_use_exclude_internals_option | default(true) %}
      - "--exclude-internals"
    {% endif -%}   {#  JIKKOU_use_verbose_option #}
    {% if JIKKOU_exclude_resources_regexp | default(true) %}
      - "--exclude"
      - {{JIKKOU_exclude_resources_regexp}}
    {% endif -%}   {#  JIKKOU_exclude_resources_regexp #}
    {% if JIKKOU_include_resources_regexp | default(true) %}
      - "--include"
      - {{JIKKOU_include_resources_regexp}}
    {% endif -%}   {#  JIKKOU_include_resources_regexp #}
    {% if JIKKOU_use_verbose_option | default(false) %}
      - "--verbose"
    {% endif -%}   {#  JIKKOU_use_verbose_option #}
      - "--yes"
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
{% endif %}   {# JIKKOU_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_TOPICS_UI_enable) | default(false) %}
  #  ================================== Kafka Topics UI ========================================== #
  kafka-topics-ui:
    image: landoop/kafka-topics-ui:{{__KAFKA_TOPICS_UI_version}}
    container_name: kafka-topics-ui
    hostname: kafka-topics-ui
    labels:
      com.platys.name: "kafka-topics-ui"
      com.platys.webui.title: 'Kafka Topics UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28141"
    ports:
      - "28141:8000"
    environment:
      KAFKA_REST_PROXY_URL: 'http://kafka-rest-1:8086'
      LAZY_LOAD_TOPIC_META: 'false'
      PROXY: 'true'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if KAFKA_TOPICS_UI_map_resolv_conf | default(false) %}
      - ./conf/resolv.conf:/etc/resolv.conf:ro
    {% endif -%}   {#  KAFKA_TOPICS_UI_map_resolv_conf #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_SCHEMA_REGISTRY_UI_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and (KAFKA_CONNECT_enable or KAFKA_KSQLDB_use_embedded_connect) and KAFKA_CONNECT_UI_enable) | default(false) %}
  #  ================================== Kafka Connect UI ========================================== #
  kafka-connect-ui:
    image: landoop/kafka-connect-ui:{{__KAFKA_CONNECT_UI_version}}
    container_name: kafka-connect-ui
    hostname: kafka-connect-ui
    labels:
      com.platys.name: "kafka-connect-ui"
      com.platys.webui.title: 'Kafka Connect UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28103"
    ports:
      - "28103:8000"
    environment:
      CONNECT_URL: {{ns1.connectServersInternalUrl}}
      PROXY: "true"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if KAFKA_CONNECT_UI_map_resolv_conf | default(false) %}
      - ./conf/resolv.conf:/etc/resolv.conf:ro
    {% endif -%}   {#  KAFKA_TOPICS_UI_map_resolv_conf #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_CONNECT_UI_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_CMAK_enable) | default(false) %}
  #  ================================== Cluster Manager for Apache Kafka (CMAK) ========================================== #
  {% set externalPort = 28104 + dataCenterId %}
  cmak{{dataCenter}}:
    image: trivadis/cmak:{{__KAFKA_CMAK_version}}
    container_name: cmak{{dataCenter}}
    hostname: cmak{{dataCenter}}
    labels:
      com.platys.name: "cmak"
      com.platys.webui.title: 'Cluster Manager for Apache Kafka UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:{{externalPort}}"
    ports:
      - "{{externalPort}}:9000"
    environment:
      ZK_HOSTS: 'zookeeper-1:2181'
      APPLICATION_SECRET: 'abc123!'
      KAFKA_MANAGER_AUTH_ENABLED: {{KAFKA_CMAK_auth_enabled}}
      KAFKA_MANAGER_USERNAME: {{KAFKA_CMAK_username}}
      KAFKA_MANAGER_PASSWORD: {{KAFKA_CMAK_password}}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_CMAK_enable #}


{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_KAFDROP_enable) | default(false) %}
  #  ================================== Kafdrop ========================================== #
  kafdrop:
    image: obsidiandynamics/kafdrop:{{__KAFKA_KAFDROP_version}}
    container_name: kafdrop
    hostname: kafdrop
    labels:
      com.platys.name: "kafdrop"
      com.platys.webui.title: 'Kafdrop UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28110"
    ports:
      - "28110:9020"
    environment:
      KAFKA_BROKERCONNECT: '{{ns.bootstrapServers}}'
      SCHEMAREGISTRY_CONNECT: '{{ns.schemaRegistryUrl}}'
      {% if schemaRegistryUsername is defined and schemaRegistryUsername|length %}
      SCHEMAREGISTRY_AUTH: '{{schemaRegistryUsername}}:{{schemaRegistryPassword}}'
      {% endif %}
      MESSAGE_FORMAT: AVRO
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
      SERVER_PORT: 9020
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_KAFDROP_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_KADMIN_enable) | default(false) %}
  #  ================================== KAdmin ========================================== #
  kadmin:
    image: bettercloud/kadmin:{{__KAFKA_KADMIN_version}}
    container_name: kadmin
    hostname: kadmin
    labels:
      com.platys.name: "kadmin"
      com.platys.webui.title: 'KAdmin UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28106"
    ports:
      - "28106:8080"
    environment:
    {% if external['KAFKA_enable'] | default(false) %}
      ZOOKEEPER_HOST: zookeeper-1:2181
    {% endif %}   {#  external['KAFKA_enable']) #}
      KAFKA_HOST: {{ns.bootstrapServers}}
      #SECURITY_PROTOCOL: SSL
      TRUST_STORE_LOCATION: ssl/client.truststore.jks
      TRUST_STORE_PASSWORD: password
      KEY_STORE_LOCATION: ssl/server.keystore.jks
      KEY_STORE_PASSWORD: password
      KEY_PASSWORD: password
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_KADMIN_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_AKHQ_enable) | default(false) %}
  #  ================================== Apache Kafka HQ (AKHQ) ========================================== #
  {% set externalPort = 28107 + dataCenterId %}
  akhq{{dataCenter}}:
    image: tchiotludo/akhq:{{__KAFKA_AKHQ_version}}
    container_name: akhq{{dataCenter}}
    hostname: akhq{{dataCenter}}
    labels:
      com.platys.name: "akhq"
      com.platys.webui.title: 'Apache Kafka AQ UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:{{externalPort}}"
    ports:
      - {{externalPort}}:8080
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: '{{ns.bootstrapServers}}'
    {% if external['KAFKA_enable'] and external['KAFKA_sasl_mechanism'] is defined and external['KAFKA_sasl_mechanism'] | length %}
                security.protocol: "{{external['KAFKA_security_protocol']}}"
                sasl.mechanism: "{{external['KAFKA_sasl_mechanism']}}"
                sasl.jaas.config: "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"{{kafkaUsername}}\" password=\"{{kafkaPassword}}\";"
    {% endif -%}   {#  external['KAFKA_sasl_mechanism'] is defined #}
    {% if (SCHEMA_REGISTRY_enable or external['SCHEMA_REGISTRY_enable']) | default(false) %}
              schema-registry:
                url: "{{ns.schemaRegistryUrl}}"
                type: "confluent"
        {% if schemaRegistryUsername is defined and schemaRegistryUsername|length %}
                basic-auth-username: "{{schemaRegistryUsername}}"
                basic-auth-password: "{{schemaRegistryPassword}}"
        {% endif %}
    {% endif -%}   {#  SCHEMA_REGISTRY_enable #}
    {% if ( KAFKA_CONNECT_enable or KAFKA_KSQLDB_use_embedded_connect) | default(false) %}
              connect:
      {% for item in ns1.connectServersInternalUrl.split(",") %}
                - name: "connect-{{loop.index}}"
                  url: "{{item}}"
      {% endfor -%}
    {% endif -%}   {#  KAFKA_CONNECT_enable #}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_KAFKAHQ_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_UI_enable) | default(false) %}
  #  ================================== Kafka UI ========================================== #
  kafka-ui:
    image: provectuslabs/kafka-ui:{{__KAFKA_UI_version}}
    container_name: kafka-ui
    hostname: kafka-ui
    labels:
      com.platys.name: "kafka-ui"
      com.platys.webui.title: 'Kafka UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28179"
    ports:
      - 28179:8080
    environment:
    {% if external['KAFKA_enable'] | default(false) %}
      KAFKA_CLUSTERS_0_NAME: external
    {% else %}
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper-1:2181
      KAFKA_CLUSTERS_0_JMXPORT: '9992'
    {% endif -%}   {#  external['KAFKA_enable'] #}
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: '{{ns.bootstrapServers}}'
    {% if external['KAFKA_enable'] and external['KAFKA_sasl_mechanism'] is defined and external['KAFKA_sasl_mechanism'] | length %}
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: "{{external['KAFKA_security_protocol']}}"
      KAFKA_CLUSTERS_0_PROPERTIES_SASL_MECHANISM: "{{external['KAFKA_sasl_mechanism']}}"
      KAFKA_CLUSTERS_0_PROPERTIES_SASL_JAAS_CONFIG: "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"{{kafkaUsername}}\" password=\"{{kafkaPassword}}\";"
      KAFKA_CLUSTERS_0_PROPERTIES_CLIENT_DNS_LOOKUP: use_all_dns_ips
      KAFKA_CLUSTERS_0_DISABLELOGDIRSCOLLECTION: 'true'
    {% endif -%}   {#  external['KAFKA_sasl_mechanism'] is defined #}
    {% if (SCHEMA_REGISTRY_enable or external['SCHEMA_REGISTRY_enable']) | default(false) %}
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: '{{ns.schemaRegistryUrlExternal}}'
      {% if schemaRegistryUsername is defined and schemaRegistryUsername|length %}
      KAFKA_CLUSTERS_0_SCHEMAREGISTRYAUTH_USERNAME: "{{schemaRegistryUsername}}"
      KAFKA_CLUSTERS_0_SCHEMAREGISTRYAUTH_PASSWORD: "{{schemaRegistryPassword}}"
      {% endif %}
    {% endif -%}   {#  SCHEMA_REGISTRY_enable #}
      KAFKA_CLUSTERS_0_KSQLDBSERVER: 'http://ksqldb-server-1:8088'
    {% if ( KAFKA_CONNECT_enable or KAFKA_KSQLDB_use_embedded_connect ) | default(false) %}
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: '{{ns1.connectClusterName}}'
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: {{ns1.connectServersInternalUrl.split(',')[0]}}
    {% endif -%}   {#  KAFKA_CONNECT_enable #}
      KAFKA_CLUSTERS_0_READONLY: 'False'
      LOGGING_LEVEL_ROOT: 'info'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_UI_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_EFAK_enable) | default(false) %}
  #  ================================== Kafka EFAK (previously Kafka Eagle) ========================================== #
  efak:
    image: trivadis/efak:{{__KAFKA_EFAK_version}}
    container_name: efak
    hostname: efak
    labels:
      com.platys.name: "efak"
      com.platys.webui.title: 'EFAK (prev. Kafka Eagle) UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:8048"
    ports:
      - 8048:8048
    environment:
      ZKSERVER: zookeeper-1:2181
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_EFAK_UI_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KOWL_enable) | default(false) %}
  #  ================================== Kowl ========================================== #
  kowl:
    image: quay.io/cloudhut/kowl:{{__KOWL_version}}
    container_name: kowl
    hostname: kowl
    labels:
      com.platys.name: "kowl"
      com.platys.webui.title: 'Kowl UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28239"
    ports:
      - 28239:8080
    environment:
      # config according to: https://github.com/cloudhut/kowl/blob/master/docs/config/kowl.yaml
      KAFKA_BROKERS: '{{ns.bootstrapServers}}'
    {% if external['KAFKA_enable'] and external['KAFKA_sasl_mechanism'] is defined and external['KAFKA_sasl_mechanism'] | length %}
      KAFKA_TLS_ENABLED: 'true'
      KAFKA_SASL_ENABLED: 'true'
      KAFKA_SASL_USERNAME: {{kafkaUsername}}
      KAFKA_SASL_PASSWORD: {{kafkaPassword}}
    {% endif -%}   {#  external['KAFKA_sasl_mechanism'] is defined #}
    {% if ( SCHEMA_REGISTRY_enable or external['SCHEMA_REGISTRY_enable']) | default(false) %}
      KAFKA_SCHEMAREGISTRY_ENABLED: 'True'
      KAFKA_SCHEMAREGISTRY_URLS: '{{ns.schemaRegistryUrlExternal}}'
      {% if schemaRegistryUsername is defined and schemaRegistryUsername|length %}
      KAFKA_SCHEMAREGISTRY_USERNAME: "{{schemaRegistryUsername}}"
      KAFKA_SCHEMAREGISTRY_PASSWORD: "{{schemaRegistryPassword}}"
      {% endif -%}   {#  schemaRegistryUsername is defined #}
    {% endif -%}   {#  SCHEMA_REGISTRY_enable #}
    {% if ( KAFKA_CONNECT_enable or KAFKA_KSQLDB_use_embedded_connect) | default(false) %}
      CONNECT_ENABLED: 'True'
      CONNECT_CLUSTERS_NAME: '{{ns1.connectClusterName}}'
      CONNECT_CLUSTERS_URL: '{{ns1.connectServersInternalUrl.split(',')[0]}}'
    {% endif -%}   {#  KAFKA_CONNECT_enable #}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KOWL_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KOUNCIL_enable) | default(false) %}
  #  ================================== Kouncil ========================================== #
  kouncil:
    image: consdata/kouncil:{{__KOUNCIL_version}}
    container_name: kouncil
    hostname: kouncil
    labels:
      com.platys.name: "kouncil"
      com.platys.webui.title: 'Kouncil UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28253"
    ports:
      - 28253:8080
    environment:
      bootstrapServers: '{{ns.bootstrapServers}}'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KOUNCIL_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_MAGIC_enable) | default(false) %}
  #  ================================== Kafka Magic ========================================== #
  kafka-magic:
    image: digitsy/kafka-magic:{{__KAFKA_MAGIC_version}}
    container_name: kafka-magic
    hostname: kafka-magic
    labels:
      com.platys.name: "kafka-magic"
      com.platys.webui.title: 'Kafka Magic UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28254"
    ports:
      - 28254:80
    environment:
      KMAGIC_ALLOW_TOPIC_DELETE: "true"
      KMAGIC_ALLOW_SCHEMA_DELETE: "true"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_MAGIC_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_WEBVIEW_enable) | default(false) %}
  #  ================================== Kafka Webview ========================================== #
  kafka-webview:
    image: sourcelaborg/kafka-webview:{{__KAFKA_WEBVIEW_version}}
    container_name: kafka-webview
    hostname: kafka-webview
    labels:
      com.platys.name: "kafka-webview"
      com.platys.webui.title: 'Kafka Webview UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28274"
    ports:
      - 28274:8080
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_WEBVIEW_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and STREAMS_EXPLORER_enable) | default(false) %}
  #  ================================== Streams Explorer ========================================== #
  streams-explorer:
    image: bakdata/streams-explorer:{{__STREAMS_EXPLORER_version}}
    container_name: streams-explorer
    hostname: streams-explorer
    labels:
      com.platys.name: "streams-explorer"
      com.platys.webui.title: 'Streams Explorer UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28195"
    ports:
      - 28195:80
    environment:
      SE_SCHEMAREGISTRY__url: '{{ns.schemaRegistryUrl}}'
      SE_KAFKACONNECT__url: {{ns1.connectServersInternalUrl.split(',')[0]}}
      SE_PROMETHEUS__url: http://host.docker.internal:9090
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and STREAMS_EXPLORER_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_LAG_EXPORTER_enable) | default(false) %}
  #  ================================== Kafka Lag Exporter ========================================== #
  kafka-lag-exporter:
    image: lightbend/kafka-lag-exporter:{{__KAFKA_LAG_EXPORTER_version}}
    container_name: kafka-lag-exporter
    hostname: kafka-lag-exporter
    labels:
      com.platys.name: "kafka-lag-exporter"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/kafka/kafka-lag-exporter:/opt/docker/conf
#      - $MONITORING_STACK/assets/prometheus/security:/etc/kafka/secrets
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_LAG_EXPORTER_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and REMORA_enable) | default(false) %}
  #  ================================== Remora ========================================== #
  remora:
    image: registry.opensource.zalan.do/machina/remora:{{__REMORA_version}}
    container_name: remora
    hostname: remora
    labels:
      com.platys.name: "remora"
      com.platys.restapi.title: 'Remora API'
      com.platys.restapi.url: "http://${PUBLIC_IP}:28256/consumers"
    ports:
      - 28256:9000
    environment:
      KAFKA_ENDPOINT: '{{ns.bootstrapServers}}'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and REMORA_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and BURROW_enable) | default(false) %}
  #  ================================== Burrow ========================================== #
  burrow:
    image: trivadis/burrow:{{__BURROW_version}}
    container_name: burrow
    hostname: burrow
    labels:
      com.platys.name: 'burrow'
      com.platys.webui.title: 'Burrow'
      com.platys.webui.url: "http://${PUBLIC_IP}:28260"
    ports:
      - 28260:8000
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/burrow:/etc/burrow/
      - ./tmp:/var/tmp/burrow
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% if (BURROW_enable and BURROW_UI_enable) | default(false) %}
  burrow-ui:
    image: generalmills/burrowui:{{__BURROW_UI_version}}
    container_name: burrow-ui
    hostname: burrow-ui
    labels:
      com.platys.name: 'burrow-ui'
      com.platys.webui.title: 'Burrow UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28258"
    ports:
      - 28258:3000
    environment:
      BURROW_HOME: "http://${PUBLIC_IP}:28110/v3/kafka"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif -%}   {#  BURROW_enable and BURROW_UI_enable #}

  {% if (BURROW_enable and BURROW_DASHBOARD_enable) | default(false) %}
  burrow-dashboard:
    image: joway/burrow-dashboard:{{__BURROW_DASHBOARD_version}}
    container_name: burrow-dashboard
    hostname: burrow-dashboard
    labels:
      com.platys.name: 'burrow-dashboard'
      com.platys.webui.title: 'Burrow Dashboard'
      com.platys.webui.url: "http://${PUBLIC_IP}:28259"
    ports:
      - 28259:80
    environment:
      BURROW_BACKEND: "http://${PUBLIC_IP}:28110"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif -%}   {#  BURROW_enable and BURROW_DASHBOARD_enable #}
{% endif %}   {# KAFKA_enable and BURROW_enable #}

{% if DEBEZIUM_SERVER_enable | default(false) %}
  #  ================================== Debezium UI ========================================== #
  debezium-server:
    image: debezium/server:{{__DEBEZIUM_SERVER_version}}
    container_name: debezium-servers
    hostname: debezium-server
    labels:
      com.platys.name: "debezium-server"
      com.platys.webui.title: 'Debezium Sever Health Endpoint'
      com.platys.webui.url: "http://${PUBLIC_IP}:28246"
    ports:
      - "28246:8080"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./debezium-server/conf:/debezium/conf
    {% if DEBEZIUM_SERVER_volume_map_data %}
      - ./container-volume/debezium-server/data:/debezium/data
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# DEBEZIUM_SERVER_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_CONNECT_enable and DEBEZIUM_UI_enable) | default(false) %}
  #  ================================== Debezium UI ========================================== #
  debezium-ui:
    image: debezium/debezium-ui:{{__DEBEZIUM_UI_version}}
    container_name: debezium-ui
    hostname: debezium-ui
    labels:
      com.platys.name: "debezium-ui"
      com.platys.webui.title: 'Debezium UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28227"
    ports:
      - "28227:8080"
    environment:
      KAFKA_CONNECT_URI: "http://${PUBLIC_IP}:8083/,http://${PUBLIC_IP}:8084/"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and DEBEZIUM_UI_enable #}

{% if HADOOP_enable | default(false) %}

  #  ================================== Apache Hadoop ========================================== #
  namenode:
    image: bde2020/hadoop-namenode:{{__HADOOP_image_version}}
    container_name: namenode
    hostname: namenode
    labels:
      com.platys.name: "hadoop"
      com.mdps.service.webui.name: "Hadoop NameNode UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:9870"
    ports:
      - "9870:9870"
    env_file:
      - ./conf/hadoop.env
    environment:
      CLUSTER_NAME: 'test'
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      MAPRED_CONF_yarn_app_mapreduce_am_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_map_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_reduce_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./container-volume/namenode:/hadoop/dfs/name
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% for num in range(HADOOP_datanodes| default(1) ) %}
    {% set external_port = 9864 + loop.index - 1 %}

  datanode-{{loop.index}}:
    image: bde2020/hadoop-datanode:{{__HADOOP_image_version}}
    container_name: datanode-{{loop.index}}
    labels:
      com.platys.name: "hadoop"
      com.platys.webui.title: 'Hadoop DataNode-{{loop.index}} UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:{{external_port}}"
    ports:
      - "{{external_port}}:9864"
    env_file:
      - ./conf/hadoop.env
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SERVICE_PRECONDITION: "namenode:9870"
      MAPRED_CONF_yarn_app_mapreduce_am_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_map_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_reduce_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./container-volume/datanode-{{loop.index}}:/hadoop/dfs/data
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:{{__HADOOP_image_version}}
    container_name: resourcemanager
    hostname: resourcemanager
    labels:
      com.platys.name: "hadoop"
      com.platys.webui.title: "YARN RessourceManager UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:18088"
    ports:
      - "18088:8088"
    depends_on:
      - namenode
      - datanode-1
    env_file:
      - ./conf/hadoop.env
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      YARN_CONF_yarn_resourcemanager_webapp_address: 'resourcemanager:8088'
      YARN_CONF_yarn_nodemanager_webapp_address: 'nodemanager:8042'
      YARN_CONF_yarn_timeline___service_webapp_address: '${PUBLIC_IP}:18188'
      YARN_CONF_yarn_log_server_url: '${PUBLIC_IP}:18188'
      MAPRED_CONF_yarn_app_mapreduce_am_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_map_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_reduce_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  nodemanager:
    image: bde2020/hadoop-nodemanager:{{__HADOOP_image_version}}
    container_name: nodemanager
    hostname: nodemanager
    labels:
      com.platys.name: "hadoop"
      com.platys.webui.title: "YARN NodeManager UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:18042"
    ports:
      - "18042:8042"
    depends_on:
      - namenode
      - datanode-1
    env_file:
      - ./conf/hadoop.env
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      YARN_CONF_yarn_resourcemanager_webapp_address: 'resourcemanager:8088'
      YARN_CONF_yarn_nodemanager_webapp_address: 'nodemanager:8042'
      YARN_CONF_yarn_timeline___service_webapp_address: '${PUBLIC_IP}:18188'
      YARN_CONF_yarn_log_server_url: '${PUBLIC_IP}:18188'
      MAPRED_CONF_yarn_app_mapreduce_am_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_map_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_reduce_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  historyserver:
    image: bde2020/hadoop-historyserver:{{__HADOOP_image_version}}
    container_name: historyserver
    hostname: historyserver
    labels:
      com.platys.name: "hadoop"
      com.platys.webui.title: "YARN History Server"
      com.platys.webui.url: "http://${PUBLIC_IP}:18188"
    ports:
      - "18188:8188"
    depends_on:
      - namenode
      - datanode-1
    env_file:
      - ./conf/hadoop.env
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SERVICE_PRECONDITION: "namenode:9870 datanode-1:9864 resourcemanager:18088"
      MAPRED_CONF_yarn_app_mapreduce_am_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_map_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_reduce_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% if SQOOP_enable | default(false) %}
  sqoop:
    image: trivadis/apache-sqoop:{{__SQOOP_version}}
    container_name: sqoop
    hostname: sqoop
    labels:
      com.platys.name: "sqoop"
    env_file:
      - ./conf/hadoop.env
    environment:
    {%if MINIO_enable or external['S3_enable'] | default(false) %}
      HIVE_SITE_CONF_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
    {% endif %}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: tail -f /dev/null
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  SQOOP_enable #}

{% endif %}   {#  HADOOP_enable #}

{% if SPARK_enable | default(false) %}
  #  ================================== Apache Spark 2.x ========================================== #
  spark-master:
    image: trivadis/apache-spark-master:{{__SPARK_version}}
    container_name: spark-master
    hostname: spark-master
    labels:
      com.platys.name: 'spark'
      com.platys.webui.title: 'Spark UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:8080"
    ports:
      - 6066:6066
      - 7077:7077
      - 8080:8080
      - "4040-4044:4040-4044"
    env_file:
      - ./conf/hadoop.env
    environment:
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      CORE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
  {% endif %}
      SPARK_PUBLIC_DNS: ${PUBLIC_IP}
      SPARK_MASTER_OPTS: '{{SPARK_master_opts if SPARK_master_opts is defined and SPARK_master_opts else omit }}'
      INIT_DAEMON_STEP: setup_spark
      MASTER: spark://spark-master:7077
      SPARK_DEFAULTS_CONF_spark_jars_repositories: {{SPARK_jars_repositories}}
      SPARK_DEFAULTS_CONF_spark_jars_packages: {{SPARK_jars_packages}}
      SPARK_DEFAULTS_CONF_spark_jars_excludes: {{SPARK_jars_excludes}}
      SPARK_DEFAULTS_CONF_spark_jars: {{SPARK_jars}}
      SPARK_DEFAULTS_CONF_spark_jars_ivySettings: {{SPARK_jars_ivySettings}}
  {%if (SPARK_catalog | lower) == 'in-memory' | default(false) %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: in-memory
  {% else %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: hive
  {% endif -%}   {#  SPARK_catalog #}
  {%if HADOOP_enable | default(false) %}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: hdfs://namenode:9000/user/hive/warehouse
  {%elif MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: s3a://admin-bucket
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: s3a://admin-bucket/hive/warehouse
  {% else %}
      CORE_CONF_fs_defaultFS: file:///tmp
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: file:///hive/warehouse
  {% endif -%}   {#  HADOOP_enable #}
      SPARK_DEFAULTS_CONF_spark_yarn_dist_files: '/spark/conf/hive-site.xml'
      SPARK_DEFAULTS_CONF_spark_driver_extraJavaOptions: {{SPARK_driver_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_executor_extraJavaOptions: {{SPARK_executor_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_cores_max: {{SPARK_cores_max if SPARK_cores_max is defined and SPARK_cores_max else omit }}
      SPARK_DEFAULTS_CONF_spark_executor_memory: {{SPARK_executor_memory if SPARK_executor_memory is defined and SPARK_executor_memory else omit }}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/spark/jars:/extra-jars
      - ./container-volume/spark/logs/:/var/log/spark/logs
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% for num in range(SPARK_workers | default(1) ) %}
      {% set external_port = 28111 + loop.index - 1 %}
      {% set webui_port = 28111 + loop.index - 1 %}

  spark-worker-{{loop.index}}:
    image: trivadis/apache-spark-worker:{{__SPARK_version}}
    container_name: spark-worker-{{loop.index}}
    hostname: spark-worker-{{loop.index}}
    labels:
      com.platys.name: 'spark'
    depends_on:
      - spark-master
    ports:
      - "{{external_port}}:{{webui_port}}"
    env_file:
      - ./conf/hadoop.env
    environment:
      SPARK_MASTER: spark://spark-master:7077
      SPARK_WORKER_WEBUI_PORT: "{{webui_port}}"
      SPARK_WORKER_CORES: '{{SPARK_worker_cores if SPARK_worker_cores is defined and SPARK_worker_cores else omit }}'
      SPARK_WORKER_MEMORY: '{{SPARK_worker_memory if SPARK_worker_memory is defined and SPARK_worker_memory else omit }}'
      SPARK_WORKER_OPTS: '{{SPARK_worker_opts if SPARK_worker_opts is defined and SPARK_worker_opts else omit }}'
      SPARK_PUBLIC_DNS: ${PUBLIC_IP}
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      CORE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
  {% endif -%}    {#  MINIO_enable #}
      SPARK_DEFAULTS_CONF_spark_jars_repositories: {{SPARK_jars_repositories}}
      SPARK_DEFAULTS_CONF_spark_jars_packages: {{SPARK_jars_packages}}
      SPARK_DEFAULTS_CONF_spark_jars_excludes: {{SPARK_jars_excludes}}
      SPARK_DEFAULTS_CONF_spark_jars: {{SPARK_jars}}
      SPARK_DEFAULTS_CONF_spark_jars_ivySettings: {{SPARK_jars_ivySettings}}
  {%if (SPARK_catalog | lower) == 'in-memory' | default(false) %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: in-memory
  {% else %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: hive
  {% endif -%}   {#  SPARK_catalog #}
  {%if HADOOP_enable | default(false) %}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: hdfs://namenode:9000/user/hive/warehouse
  {%elif MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: s3a://admin-bucket
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: s3a://admin-bucket/hive/warehouse
  {% else %}
      CORE_CONF_fs_defaultFS: file:///tmp
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: file:///hive/warehouse
  {% endif -%}   {#  HADOOP_enable #}
      SPARK_DEFAULTS_CONF_spark_yarn_dist_files: '/spark/conf/hive-site.xml'
      SPARK_DEFAULTS_CONF_spark_driver_extraJavaOptions: {{SPARK_driver_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_executor_extraJavaOptions: {{SPARK_executor_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_cores_max: {{SPARK_cores_max if SPARK_cores_max is defined and SPARK_cores_max else omit }}
      SPARK_DEFAULTS_CONF_spark_executor_memory: {{SPARK_executor_memory if SPARK_executor_memory is defined and SPARK_executor_memory else omit }}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/spark/jars:/extra-jars
      - ./container-volume/spark/logs/:/var/log/spark/logs
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% endfor %}

  {% if SPARK_HISTORY_enable | default(false) %}
  spark-history:
    image: trivadis/apache-spark-worker:{{__SPARK_version}}
    command: /spark/bin/spark-class org.apache.spark.deploy.history.HistoryServer
    container_name: spark-history
    hostname: spark-history
    labels:
      com.platys.name: 'spark-historyserver'
      com.platys.webui.title: "Spark History Server"
      com.platys.webui.url: "http://${PUBLIC_IP}:28117"
      com.platys.restapi.title: "Spark History Server"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28117/api/v1"
    expose:
      - 18080
    ports:
      - 28117:18080
    environment:
      SPARK_DEFAULTS_CONF_spark_jars_repositories: {{SPARK_jars_repositories}}
      SPARK_DEFAULTS_CONF_spark_jars_packages: {{SPARK_jars_packages}}
      SPARK_DEFAULTS_CONF_spark_jars_excludes: {{SPARK_jars_excludes}}
      SPARK_DEFAULTS_CONF_spark_jars_ivySettings: {{SPARK_jars_ivySettings}}
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
  {% endif -%}    {#  MINIO_enable #}
  {%if (SPARK_catalog | lower) == 'in-memory' | default(false) %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: in-memory
  {% else %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: hive
  {% endif -%}   {#  SPARK_catalog #}
  {%if HADOOP_enable | default(false) %}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: hdfs://namenode:9000/user/hive/warehouse
  {%elif MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: s3a://admin-bucket
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: s3a://admin-bucket/hive/warehouse
  {% else %}
      CORE_CONF_fs_defaultFS: file:///tmp
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: file:///hive/warehouse
  {% endif -%}   {#  HADOOP_enable #}
      SPARK_DEFAULTS_CONF_spark_yarn_dist_files: '/spark/conf/hive-site.xml'
      SPARK_DEFAULTS_CONF_spark_driver_extraJavaOptions: {{SPARK_driver_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_executor_extraJavaOptions: {{SPARK_executor_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_cores_max: {{SPARK_cores_max if SPARK_cores_max is defined and SPARK_cores_max else omit }}
      SPARK_DEFAULTS_CONF_spark_executor_memory: {{SPARK_executor_memory if SPARK_executor_memory is defined and SPARK_executor_memory else omit }}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/spark/jars:/extra-jars
      - ./container-volume/spark/logs/:/var/log/spark/logs
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  SPARK_HISTORY_enable #}

  {% if SPARK_THRIFT_enable | default(false) %}
  spark-thriftserver:
    image: trivadis/apache-spark-thriftserver:{{__SPARK_version}}
    container_name: spark-thriftserver
    hostname: spark-thriftserver
    labels:
      com.platys.name: 'spark-thriftserver'
    ports:
      - "28118:10000"
    env_file:
      - ./conf/hadoop.env
    environment:
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      CORE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
  {% endif -%}    {#  MINIO_enable #}
      SPARK_DEFAULTS_CONF_spark_jars_repositories: {{SPARK_jars_repositories}}
      SPARK_DEFAULTS_CONF_spark_jars_packages: {{SPARK_jars_packages}}
      SPARK_DEFAULTS_CONF_spark_jars_excludes: {{SPARK_jars_excludes}}
      SPARK_DEFAULTS_CONF_spark_jars: {{SPARK_jars}}
      SPARK_DEFAULTS_CONF_spark_jars_ivySettings: {{SPARK_jars_ivySettings}}
  {%if (SPARK_catalog | lower) == 'in-memory' | default(false) %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: in-memory
  {% else %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: hive
  {% endif -%}   {#  SPARK_catalog #}
  {%if HADOOP_enable | default(false) %}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: hdfs://namenode:9000/user/hive/warehouse
  {%elif MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: s3a://admin-bucket
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: s3a://admin-bucket/hive/warehouse
  {% else %}
      CORE_CONF_fs_defaultFS: file:///tmp
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: file:///hive/warehouse
  {% endif -%}   {#  HADOOP_enable #}
      SPARK_DEFAULTS_CONF_spark_yarn_dist_files: '/spark/conf/hive-site.xml'
      SPARK_DEFAULTS_CONF_spark_driver_extraJavaOptions: {{SPARK_driver_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_executor_extraJavaOptions: {{SPARK_executor_extraJavaOptions}}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/spark/jars:/extra-jars
      - ./container-volume/spark/logs/:/var/log/spark/logs
      - ./scripts/docker/wait-for-it.sh:/usr/src/app/wait-for-it.sh
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: ["/usr/src/app/wait-for-it.sh",  "hive-metastore:9083", "--timeout=120", "--", "./thriftserver.sh"]
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  SPARK_THRIFT_enable #}

{% endif %}   {#  SPARK_enable #}

{% if SPARK_enable and LIVY_enable | default(false) %}
  #  ================================== Apache Livy ========================================== #
  livy:
    image: trivadis/apache-livy:{{__LIVY_version}}
    container_name: livy
    hostname: livy
    labels:
      com.platys.name: 'livy'
      com.platys.webui.title: "Livy Server UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8998/ui#"
      com.platys.restapi.title: "Livy API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:8998/"
    env_file:
      - ./conf/hadoop.env
    environment:
      SPARK_MASTER: spark://spark-master:7077
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_s3a_endpoint: 'http://minio:9000'
      CORE_CONF_fs_s3a_path_style_access: 'true'
      HIVE_SITE_CONF_fs_s3a_endpoint: http://minio:9000
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: 'true'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_endpoint: http://minio:9000
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_path_style_access: 'true'
  {% endif -%}    {#  MINIO_enable #}
      DEPLOY_MODE: client
      SPARK_DEFAULTS_CONF_spark_jars_repositories: {{SPARK_jars_repositories}}
      SPARK_DEFAULTS_CONF_spark_jars_packages: {{SPARK_jars_packages}}
      SPARK_DEFAULTS_CONF_spark_jars_excludes: {{SPARK_jars_excludes}}
      SPARK_DEFAULTS_CONF_spark_jars: {{SPARK_jars}}
      SPARK_DEFAULTS_CONF_spark_jars_ivySettings: {{SPARK_jars_ivySettings}}
  {%if (SPARK_catalog | lower) == 'in-memory' | default(false) %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: in-memory
  {% else %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: hive
  {% endif -%}   {#  SPARK_catalog #}
  {%if HADOOP_enable | default(false) %}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: hdfs://namenode:9000/user/hive/warehouse
  {%elif MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: s3a://admin-bucket
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: s3a://admin-bucket/hive/warehouse
  {% else %}
      CORE_CONF_fs_defaultFS: file:///tmp
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: file:///hive/warehouse
  {% endif -%}   {#  HADOOP_enable #}
      SPARK_DEFAULTS_CONF_spark_yarn_dist_files: '/spark/conf/hive-site.xml'
      SPARK_DEFAULTS_CONF_spark_driver_extraJavaOptions: {{SPARK_driver_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_executor_extraJavaOptions: {{SPARK_executor_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_cores_max: {{SPARK_cores_max if SPARK_cores_max is defined and SPARK_cores_max else omit }}
      SPARK_DEFAULTS_CONF_spark_executor_memory: {{SPARK_executor_memory if SPARK_executor_memory is defined and SPARK_executor_memory else omit }}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/spark/jars:/extra-jars
      - ./container-volume/spark/logs/:/var/log/spark/logs
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    ports:
      - "8998:8998"
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: always
{% endif %}   {#  SPARK_livy_enable #}

{% if FLINK_enable | default(false) %}
  #  ================================== Apache Flink ========================================== #
  flink-jobmanager:
    image: flink:{{__FLINK_version}}
    container_name: flink-jobmanager
    hostname: flink-jobmanager
    labels:
      com.platys.name: 'flink'
      com.platys.webui.title: "Flink JobManager UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28237/"
    ports:
      - "28237:8081"
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: jobmanager
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: always

  {% for num in range(FLINK_taskmanagers | default(1) ) %}

  flink-taskmanager-{{loop.index}}:
    image: flink:{{__FLINK_version}}
    container_name: flink-taskmanager-{{loop.index}}
    hostname: flink-taskmanager-{{loop.index}}
    labels:
      com.platys.name: 'flink'
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: taskmanager
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: always
  {% endfor %}

  {% if FLINK_SQL_CLI_enable | default(false) %}
  flink-sql-cli:
    image: trivadis/flink-sql-cli:{{__FLINK_version}}
    container_name: flink-sql-cli
    hostname: flink-sql-cli
    labels:
      com.platys.name: 'flink'
    environment:
      FLINK_JOBMANAGER_HOST: flink-jobmanager
      ZOOKEEPER_CONNECT: zookeeper-1
      KAFKA_BOOTSTRAP: kafka-1:19092
      MYSQL_HOST: mysql-1
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: always
  {% endif -%}   {#  FLINK_SQL_CLI_enable #}

  nussknacker-designer:
    image: touk/nussknacker:{{__NUSSKNACKER_version}}
    container_name: nussknacker-designer
    hostname: nussknacker-designer
    labels:
      com.platys.name: 'nussknacker'
      com.platys.webui.title: "Nussknacker UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28238"
    ports:
      - "28238:8080"
    environment:
      #multiple, comma separated, config files can be used. They will be merged in order, via HOCON fallback mechanism
      #https://github.com/lightbend/config/blob/master/HOCON.md#config-object-merging-and-file-merging
      CONFIG_FILE: /opt/nussknacker/conf/application.conf,/opt/nussknacker/conf/nussknacker.conf
      JDK_JAVA_OPTIONS: -Xmx256M
      FLINK_REST_URL: http://flink-jobmanager:8081
      FLINK_QUERYABLE_STATE_PROXY_URL: flink-taskmanager-1:9069
      KAFKA_ADDRESS: kafka-1:19092
      SCHEMA_REGISTRY_URL: '{{ns.schemaRegistryUrl}}'
      COUNTS_URL: http://influxdb-1:8086/query
      OPENAPI_SERVICE_URL: http://customerservice:5000
{% endif %}   {#  FLINK_enable #}

{% if TIKA_enable | default(false) %}
  #  ================================== Apache Tika Server ========================================== #
  tika-server:
    image: apache/tika:{{__TIKA_version}}{{ '-full' if (TIKA_edition | lower) == 'full' else '' }}
    container_name: tika-server
    hostname: tika-server
    labels:
      com.platys.name: 'tika'
      com.platys.restapi.title: "Tika Server API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28228/"
    ports:
      - "28228:9998"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: always
{% endif %}   {#  TIKA_enable #}

{% if HIVE_SERVER_enable and HADOOP_enable | default(false) %}
  #  ================================== Apache Hive Server ========================================== #
  hive-server:
    image: trivadis/apache-hive:{{__HIVE_version}}-{{__HIVE_version_suffix}}
    container_name: hive-server
    hostname: hive-server
    labels:
      com.platys.name: 'hive'
      com.platys.webui.title: "Hive Server UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:10002"
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    env_file:
      - ./conf/hadoop.env
    environment:
      CORE_CONF_fs_defaultFS: "hdfs://namenode:9000"
      HIVE_SITE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
      MAPRED_CONF_yarn_app_mapreduce_am_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_map_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_reduce_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      CORE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
  {% endif -%}    {#  MINIO_enable #}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  HIVE_SERVER_enable and HADOOP_enable #}

{% if HIVE_METASTORE_enable | default(false) %}
  #  ================================== Apache Hive Metastore ========================================== #
  hive-metastore:
    image: trivadis/apache-hive:{{__HIVE_version}}-{{__HIVE_version_suffix}}
    container_name: hive-metastore
    hostname: hive-metastore
    labels:
      com.platys.name: 'hive-metastore'
    ports:
      - "9083:9083"
    env_file:
      - ./conf/hadoop.env
    environment:
  {%if HADOOP_enable | default(false) %}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      HIVE_SITE_CONF_hive_metastore_dir: hdfs://namenode:9000/user/hive/warehouse
  {%elif MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: s3a://admin-bucket
      CORE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      CORE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
  {%elif external['ADLS_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: file:///tmp
      HIVE_SITE_CONF_fs_azure_account_auth_type_gusstorage_dfs_core_windows_net: 'SharedKey'
      HIVE_SITE_CONF_fs_azure_account_key_gusstorage_dfs_core_windows_net: {{adlsAccessKey}}
  {% else %}
      CORE_CONF_fs_defaultFS: file:///tmp
  {% endif -%}   {#  HADOOP_enable or MINIO_enable #}
      # necessary for Trino to be able to read from Avro
      HIVE_SITE_CONF_metastore_storage_schema_reader_impl: "org.apache.hadoop.hive.metastore.SerDeStorageSchemaReader"
      SERVICE_PRECONDITION: "hive-metastore-db:5432"
  {% if ATLAS_install_hive_hook | default(false) %}
      HIVE_SITE_CONF_hive_exec_post_hooks: "org.apache.atlas.hive.hook.HiveHook"
      HIVE_AUX_JARS_PATH: "/opt/atlas/hook/hive"
  {% endif -%}   {#  ATLAS_install_hive_hook #}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
  {% if ATLAS_install_hive_hook | default(false) %}
      - ./conf/atlas/atlas-application.properties:/opt/hive/conf/atlas-application.properties
      - ./plugins/hive-server/apache-atlas-hive-hook/hook:/opt/atlas/hook
  {% endif -%}   {#  ATLAS_install_hive_hook #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: /opt/hive/bin/hive --service metastore
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  hive-metastore-db:
    image: trivadis/apache-hive-metastore-postgresql:{{__HIVE_METASTORE_DB_version}}
    container_name: hive-metastore-db
    hostname: hive-metastore-db
    labels:
      com.platys.name: 'hive-metastore'
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  HIVE_enable #}

{% if AVRO_TOOLS_enable  | default(false) %}
  #  ================================== Apache Avro Tools ========================================== #
  avrotools-cli:
    image: trivadis/apache-avro-tools:{{__AVRO_TOOLS_version}}
    hostname: avrotools-cli
    container_name: avrotools-cli
    labels:
      com.platys.name: "avrotools-cli"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint: "tail -f /dev/null"
    tty: true
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  AVRO_TOOLS_enable #}

{% if RANGER_enable  | default(false) %}
  #  ================================== Apache Ranger ========================================== #
  ranger-admin:
    image: trivadis/apache-ranger:{{__RANGER_version}}
    container_name: ranger-admin
    hostname: ranger-admin
    labels:
      com.platys.name: "ranger"
    stdin_open: true
    tty: true
    depends_on:
      - postgresql
    ports:
      - "6080:6080"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  ranger-postgresql:
    image: postgres:{{__RANGER_postgresql_version}}
    container_name: ranger-postgresql
    hostname: ranger-postgresql
    labels:
      com.platys.name: "ranger"
    environment:
      POSTGRES_PASSWORD: abc123!
      POSTGRES_USER: postgres
      POSTGRES_DB: ranger-admin
      PGDATA: /var/lib/postgresql/data
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./init/ranger/postgresql:/docker-entrypoint-initdb.d/
    {% if RANGER_postgresql_volume_map_data %}
      - ./container-volume/ranger/postgresql/data:/var/lib/postgresql/data:Z
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}{% endif %}
{#  RANGER_enable #}

{% if ATLAS_enable  | default(false) %}
  #  ================================== Apache Atlas ========================================== #
  atlas:
    image: trivadis/apache-atlas:{{__ATLAS_version}}
    container_name: atlas
    hostname: atlas
    labels:
      com.platys.name: "atlas"
      com.platys.webui.title: "Atlas UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:21000"
    depends_on:
      - zookeeper{{dataCenter}}-1
      - atlas-kafka-setup
      - cassandra-atlas
    ports:
      - 21000:21000     # dont change the port without also changing in the properties file as well as in the ATLAS_PROVISION_EXAMPLES script
    environment:
      NONE: "not_used_just_for_syntax"
  {% if ATLAS_provision_atlas_sample_data  | default(false) %}
      ATLAS_PROVISION_EXAMPLES: true
  {% endif %}
  {% if ATLAS_provision_amundsen_sample_data  | default(false) %}
      ATLAS_KICKSTART_AMUNDSEN: true
  {% endif %}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/atlas/atlas-application.properties:/opt/atlas/conf/atlas-application.properties
      - ./conf/atlas/users-credentials.properties:/opt/atlas/conf/users-credentials.properties
      - ./conf/atlas/credentials:/tmp/credentials
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% if KAFKA_enable  | default(false) %}
  atlas-kafka-setup:
    image: confluentinc/cp-kafka:{{__CONFLUENT_PLATFORM_version}}
    hostname: atlas-kafka-setup
    container_name: atlas-kafka-setup
    labels:
      com.platys.name: "atlas"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka-1:19092 1 120 && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper-1:2181 --partitions 1 --replication-factor 1 --topic ATLAS_HOOK && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper-1:2181 --partitions 1 --replication-factor 1 --topic ATLAS_ENTITIES'"
  {% endif %} {#  KAFKA_enable #}

  cassandra-atlas:
    image: cassandra:{{__CASSANDRA_version}}
    container_name: cassandra-atlas
    hostname: cassandra-atlas
    ports:
      - "19042:9042"
      - "19160:9160"
    labels:
      com.platys.name: "atlas"
    environment:
      CASSANDRA_START_RPC: true
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  elasticsearch-atlas:
    image: elasticsearch:5.6.8
    container_name: elasticsearch-atlas
    hostname: elasticsearch-atlas
    labels:
      com.platys.name: "atlas"
    ports:
      - "19200:9200"
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "http.host=0.0.0.0"
      - "network.host=0.0.0.0"
      - "transport.host=127.0.0.1"
      - "cluster.name=docker-cluster"
      - "xpack.security.enabled=false"
      - "discovery.zen.minimum_master_nodes=1"
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ATLAS_enable #}

{% if DATAHUB_enable  | default(false) %}
  #  ================================== Datahub ========================================== #
  datahub-gms:
    image: linkedin/datahub-gms:{{__DATAHUB_version}}
    hostname: datahub-gms
    container_name: datahub-gms
    depends_on:
      - datahub-elasticsearch
      - datahub-mysql
    {%if (DATAHUB_graph_service_impl | lower) == 'neo4j'  | default(true) %}
      - datahub-neo4j
    {% endif -%}   {#  DATAHUB_graph_service_impl #}
      - kafka{{dataCenter}}-1
      - {{ns.schemaRegistryServiceName}}
    labels:
      com.platys.name: "datahub"
      com.platys.restapi.title: "DataHub GMS API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28142"
    ports:
      - "28142:8080"
    environment:
      - DATASET_ENABLE_SCSI=false
      - EBEAN_DATASOURCE_USERNAME=datahub
      - EBEAN_DATASOURCE_PASSWORD=datahub
      - EBEAN_DATASOURCE_HOST=datahub-mysql:3306
      - EBEAN_DATASOURCE_URL=jdbc:mysql://datahub-mysql:3306/datahub?verifyServerCertificate=false&useSSL=true&useUnicode=yes&characterEncoding=UTF-8&enabledTLSProtocols=TLSv1.2
      - EBEAN_DATASOURCE_DRIVER=com.mysql.jdbc.Driver
      - KAFKA_BOOTSTRAP_SERVER=kafka-1:19092
      - KAFKA_SCHEMAREGISTRY_URL={{ns.schemaRegistryUrl}}
      - ELASTICSEARCH_HOST=datahub-elasticsearch
      - ELASTICSEARCH_PORT=9200
      - JAVA_OPTS=-Xms1g -Xmx1g
      - GRAPH_SERVICE_IMPL={{DATAHUB_graph_service_impl}}
      - ENTITY_REGISTRY_CONFIG_PATH=/datahub/datahub-gms/resources/entity-registry.yml
      - METADATA_AUDIT_EVENT_NAME=MetadataAuditEvent_v4
      - METADATA_CHANGE_EVENT_NAME=MetadataChangeEvent_v4
      - FAILED_METADATA_CHANGE_EVENT_NAME=FailedMetadataChangeEvent_v4
      - AUTH_POLICIES_ENABLED={{DATAHUB_auth_policies_enabled | lower}}
    {%if (DATAHUB_graph_service_impl | lower) == 'neo4j'  | default(true) %}
      - NEO4J_HOST=http://datahub-neo4j:7474
      - NEO4J_URI=bolt://${PUBLIC_IP}:17688
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=abc123!
    {% endif -%}   {#  DATAHUB_graph_service_impl #}
    {%if not DATAHUB_mae_consumer_standalone | default(true) %}
      - MAE_CONSUMER_ENABLED=true
    {% endif -%}   {#  not DATAHUB_mae_consumer_standalone #}
    {%if not DATAHUB_mce_consumer_standalone | default(true) %}
      - MCE_CONSUMER_ENABLED=true
    {% endif -%}   {#  not DATAHUB_mce_consumer_standalone #}
      - DATAHUB_ANALYTICS_ENABLED={{DATAHUB_use_analytics | lower}}
      - ANALYTICS_ENABLED=false
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {%if DATAHUB_use_ember_ui | default(false) %}
  datahub-frontend-ember:
    image: linkedin/datahub-frontend:{{__DATAHUB_version}}
    hostname: datahub-frontend-ember
    container_name: datahub-frontend-ember
    labels:
      com.platys.name: "datahub"
      com.platys.webui.title: "DataHub UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28143"
    depends_on:
      - datahub-gms
    ports:
      - "28143:9001"
    environment:
      - DATAHUB_GMS_HOST=datahub-gms
      - DATAHUB_GMS_PORT=8080
      - DATAHUB_SECRET=abc123!
      - DATAHUB_APP_VERSION=1.0
      - DATAHUB_PLAY_MEM_BUFFER_SIZE=10MB
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif -%}   {#  DATAHUB_use_ember_ui #}

  {%if DATAHUB_use_react_ui | default(false) %}
  datahub-frontend-react:
    image: linkedin/datahub-frontend-react:{{__DATAHUB_version}}
    hostname: datahub-frontend-react
    container_name: datahub-frontend-react
    labels:
      com.platys.name: "datahub"
      com.platys.webui.title: "DataHub UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28144"
    depends_on:
      - datahub-gms
    ports:
      - "28144:9002"
    environment:
      - DATAHUB_GMS_HOST=datahub-gms
      - DATAHUB_GMS_PORT=8080
      - DATAHUB_SECRET=abc123!
      - DATAHUB_APP_VERSION=1.0
      - DATAHUB_PLAY_MEM_BUFFER_SIZE=10MB
      - JAVA_OPTS=-Xms512m -Xmx512m -Dhttp.port=9002 -Dconfig.file=datahub-frontend/conf/application.conf -Djava.security.auth.login.config=datahub-frontend/conf/jaas.conf -Dlogback.configurationFile=datahub-frontend/conf/logback.xml -Dlogback.debug=false -Dpidfile.path=/dev/null
      - KAFKA_BOOTSTRAP_SERVER=kafka-1:19092
      - DATAHUB_TRACKING_TOPIC=DataHubUsageEvent_v1
      - ELASTIC_CLIENT_HOST=datahub-elasticsearch
      - ELASTIC_CLIENT_PORT=9200
      - METADATA_SERVICE_AUTH_ENABLED=false
      - DATAHUB_ANALYTICS_ENABLED={{DATAHUB_use_analytics | lower}}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif -%}   {#  DATAHUB_use_react_ui #}

  {%if DATAHUB_ACTIONS_enable | default(false) %}
  datahub-actions:
    image: public.ecr.aws/datahub/acryl-datahub-actions:{{__DATAHUB_ACTIONS_version}}
    hostname: datahub-actions
    container_name: datahub-actions
    labels:
      com.platys.name: "datahub"
    environment:
      - GMS_HOST=datahub-gms
      - GMS_PORT=8080
      - KAFKA_BOOTSTRAP_SERVER=kafka-1:19092
      - SCHEMA_REGISTRY_URL=http://schema-registry-1:8081
      - METADATA_AUDIT_EVENT_NAME=MetadataAuditEvent_v4
      - METADATA_CHANGE_LOG_VERSIONED_TOPIC_NAME=MetadataChangeLog_Versioned_v1
      - DATAHUB_SYSTEM_CLIENT_ID=__datahub_system
      - DATAHUB_SYSTEM_CLIENT_SECRET=JohnSnowKnowsNothing
      - KAFKA_PROPERTIES_SECURITY_PROTOCOL=PLAINTEXT
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer:rw
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif -%}   {#  DATAHUB_ACTIONS_enable #}

  {%if DATAHUB_mae_consumer_standalone | default(true) %}
  datahub-mae-consumer:
    image: linkedin/datahub-mae-consumer:{{__DATAHUB_version}}
    hostname: datahub-mae-consumer
    container_name: datahub-mae-consumer
    labels:
      com.platys.name: "datahub"
      com.platys.restapi.title: "DataHub MAE Consumer"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28145"
    depends_on:
      - kafka-setup
      - datahub-elasticsearch
      - datahub-neo4j
    ports:
        - "28145:9091"
    environment:
      - MAE_CONSUMER_ENABLED=true
      - KAFKA_BOOTSTRAP_SERVER=kafka-1:19092
      - KAFKA_SCHEMAREGISTRY_URL='{{ns.schemaRegistryUrl}}'
      - ELASTICSEARCH_HOST=datahub-elasticsearch
      - ELASTICSEARCH_PORT=9200
      - NEO4J_HOST=datahub-neo4j:7474
      - NEO4J_URI=bolt://${PUBLIC_IP}:17688
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=abc123!
      - GMS_HOST=datahub-gms
      - GMS_PORT=8080
      - GRAPH_SERVICE_IMPL=neo4j
      - ENTITY_REGISTRY_CONFIG_PATH=/datahub/datahub-mae-consumer/resources/entity-registry.yml
      - KAFKA_TOPIC_NAME=MetadataAuditEvent_v4
      - DATAHUB_USAGE_EVENT_NAME=DataHubUsageEvent_v1
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif -%}   {#  DATAHUB_mae_consumer_standalone #}

  {%if DATAHUB_mce_consumer_standalone | default(true) %}
  datahub-mce-consumer:
    image: linkedin/datahub-mce-consumer:{{__DATAHUB_version}}
    hostname: datahub-mce-consumer
    container_name: datahub-mce-consumer
    labels:
      com.platys.name: "datahub"
      com.platys.restapi.title: "DataHub MCE Consumer"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28146"
    depends_on:
      - kafka-setup
      - datahub-gms
    ports:
        - "28146:9090"
    environment:
      - MCE_CONSUMER_ENABLED=true
      - KAFKA_BOOTSTRAP_SERVER=kafka-1:19092
      - KAFKA_SCHEMAREGISTRY_URL='{{ns.schemaRegistryUrl}}'
      - GMS_HOST=datahub-gms
      - GMS_PORT=8080
      - KAFKA_MCE_TOPIC_NAME=MetadataChangeEvent_v4
      - KAFKA_FMCE_TOPIC_NAME=FailedMetadataChangeEvent_v4
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif -%}   {#  DATAHUB_mce_consumer_standalone #}

  datahub-mysql:
    image: mysql:5.7
    hostname: datahub-mysql
    container_name: datahub-mysql
    labels:
      com.platys.name: "mysql"
    ports:
      - "3307:3306"
    environment:
      - MYSQL_DATABASE=datahub
      - MYSQL_USER=datahub
      - MYSQL_PASSWORD=datahub
      - MYSQL_ROOT_PASSWORD=datahub
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./init/datahub/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    {% if DATAHUB_volume_map_data %}
      - "./container-volume/datahub/mysql:/var/lib/mysql"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_bin
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {%if (DATAHUB_graph_service_impl | lower) == 'neo4j'  | default(true) %}
  datahub-neo4j:
    image: neo4j:4.0.6
    hostname: datahub-neo4j
    container_name: datahub-neo4j
    labels:
      com.platys.name: "neo4j"
      com.platys.webui.title: "DataHub Neo4J UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:17475"
    ports:
      - "17475:7474"
      - "17688:7687"
    environment:
      - NEO4J_AUTH=neo4j/abc123!
      - NEO4J_dbms_default__database=graph.db
      - NEO4J_dbms_allow__upgrade=true
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if DATAHUB_volume_map_data %}
      - ./container-volume/datahub/neo4j:/data
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif -%}   {#  DATAHUB_graph_service_impl #}

  datahub-elasticsearch:
    image: elasticsearch:7.9.3
    container_name: datahub-elasticsearch
    hostname: datahub-elasticsearch
    labels:
      com.platys.name: "elasticsearch"
      com.platys.restapi.title: "DataHub ElasticSearch REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:19202"
    ports:
      - "19202:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m -Dlog4j2.formatMsgNoLookups=true"
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    healthcheck:
      retries: 4
      start_period: 2m
      test:
      - CMD-SHELL
      - curl -sS --fail 'http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=0s'
        || exit 1
    volumes:
      - ./data-transfer:/data-transfer
    {% if DATAHUB_volume_map_data %}
      - ./container-volume/datahub/elasticsearch:/usr/share/elasticsearch/data
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {%if DATAHUB_use_kibana | default(true) %}
  datahub-kibana:
    image: kibana:7.9.3
    container_name: datahub-kibana
    hostname: datahub-kibana
    labels:
      com.platys.name: "datahub"
      com.platys.webui.title: "DataHub Kibana UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:5602"
    ports:
      - "5602:5601"
    environment:
      - SERVER_HOST=0.0.0.0
      - ELASTICSEARCH_HOSTS="http://datahub-elasticsearch:9200"
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if DATAHUB_volume_map_data %}
#      - ./container-volume/datahub/elasticsearch:/usr/share/elasticsearch/data
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif -%}   {#  DATAHUB_use_kibana #}

  # This "container" is a workaround to pre-create search indices
  datahub-mysql-setup:
    image: acryldata/datahub-mysql-setup:head
    hostname: datahub-mysql-setup
    container_name: datahub-mysql-setup
    labels:
      com.platys.name: "datahub"
    depends_on:
      - datahub-mysql
    environment:
      - MYSQL_HOST=datahub-mysql
      - MYSQL_PORT=3306
      - MYSQL_USERNAME=datahub
      - MYSQL_PASSWORD=datahub
      - DATAHUB_DB_NAME=datahub
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}

  # This "container" is a workaround to pre-create search indices
  datahub-elasticsearch-setup:
    image: linkedin/datahub-elasticsearch-setup:{{__DATAHUB_version}}
    hostname: datahub-elasticsearch-setup
    container_name: datahub-elasticsearch-setup
    labels:
      com.platys.name: "datahub"
    depends_on:
      - datahub-elasticsearch
    environment:
      - ELASTICSEARCH_HOST=datahub-elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_PROTOCOL=http
      - DATAHUB_ANALYTICS_ENABLED={{DATAHUB_use_analytics}}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}

  # This "container" is a workaround to pre-create topics
  kafka-setup:
    image: linkedin/datahub-kafka-setup:{{__DATAHUB_version}}
    hostname: kafka-setup
    container_name: kafka-setup
    labels:
      com.platys.name: "datahub"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-1:2181
      - KAFKA_BOOTSTRAP_SERVER=kafka-1:19092
      - DATAHUB_ANALYTICS_ENABLED={{DATAHUB_use_analytics}}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}

  {%if DATAHUB_provision_sample_data %}
  datahub-ingestion:
    image: linkedin/datahub-ingestion:{{__DATAHUB_version}}
    hostname: datahub-ingestion
    container_name: datahub-ingestion
    labels:
      com.platys.name: "datahub"
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/datahub/sample_recipe.yml:/sample_recipe.yml:ro
      - ./scripts/datahub/bootstrap_mce.json:/bootstrap_mce.json:ro
      - ./scripts/docker/wait-for-it.sh:/tmp/wait-for-it.sh
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint: ["/tmp/wait-for-it.sh", "datahub-gms:8080", "--timeout=0", "--", "datahub"]
    command: "ingest -c /sample_recipe.yml"
  {% endif -%}   {#  DATAHUB_provision_sample_data #}

  datahub-cli:
    image: linkedin/datahub-ingestion:{{__DATAHUB_version}}
    hostname: datahub-cli
    container_name: datahub-cli
    labels:
      com.platys.name: "datahub"
    entrypoint: "tail -f /dev/null"
    tty: true
    {%if use_timezone | default(false) %}
    environment:
      TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  DATALAB_enable #}

{% if AMUNDSEN_enable  | default(false) %}
  #  ================================== Amundsen ========================================== #
  amundsenfrontend:
    image: amundsendev/amundsen-frontend:{{__AMUNDSEN_FRONTEND_version}}
    container_name: amundsenfrontend
    hostname: amundsenfrontend
    labels:
      com.platys.name: "amundsen"
      com.platys.webui.title: "Amundsen UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:5000"
    depends_on:
      - amundsenmetadata
      - amundsensearch
    ports:
      - 5000:5000
    environment:
      - METADATASERVICE_BASE=http://amundsenmetadata:5000
      - SEARCHSERVICE_BASE=http://amundsensearch:5000
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  amundsensearch:
    image: amundsendev/amundsen-search:{{__AMUNDSEN_SEARCH_version}}
    container_name: amundsensearch
    labels:
      com.platys.name: "amundsen"
      com.platys.restapi.title: "Amundsensearch REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:5001"
    ports:
      - 5001:5000
    environment:
  {%if (AMUNDSEN_metastore | lower) == 'amundsen' | default(false) %}
      - PROXY_ENDPOINT=amundsen-elasticsearch
  {% else -%}   {#  AMUNDSEN_metastore #}
      - CREDENTIALS_PROXY_USER=admin
      - CREDENTIALS_PROXY_PASSWORD=abc123!
      - PROXY_ENDPOINT=atlas:21000
      - PROXY_CLIENT=ATLAS
  {% endif -%}   {#  AMUNDSEN_metastore #}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  amundsenmetadata:
    image: amundsendev/amundsen-metadata:{{__AMUNDSEN_METADATA_version}}
    container_name: amundsenmetadata
    hostname: amundsenmetadata
    labels:
      com.platys.name: "amundsen"
      com.platys.restapi.title: "Amundsensearch REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:5002"
    ports:
      - 5002:5000
    environment:
  {%if (AMUNDSEN_metastore | lower) == 'amundsen' | default(false) %}
      - PROXY_HOST=bolt://amundsen-neo4j
  {% else -%}   {#  AMUNDSEN_metastore #}
      - PROXY_ENDPOINT=amundsen-elasticsearch
      - CREDENTIALS_PROXY_USER=admin
      - CREDENTIALS_PROXY_PASSWORD=abc123!
      - PROXY_HOST=atlas
      - PROXY_PORT=21000
      - PROXY_CLIENT=ATLAS
  {% endif -%}   {#  AMUNDSEN_metastore #}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {%if (AMUNDSEN_metastore | lower) == 'amundsen' | default(false) %}
  amundsen-neo4j:
    image: neo4j:3.3.0
    container_name: amundsen-neo4j
    hostname: amundsen-neo4j
    labels:
      com.platys.name: "amundsen"
      com.platys.webui.title: "Amundsen Neo4J UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:17474"
    ulimits:
      nofile:
        soft: 40000
        hard: 40000
    ports:
      - 17474:7474
      - 17687:7687
    environment:
      - NEO4J_AUTH=neo4j/test
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/amundsen/neo4j/conf:/conf
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  amundsen-elasticsearch:
    image: elasticsearch:6.7.0
    container_name: amundsen-elasticsearch
    hostname: amundsen-elasticsearch
    labels:
      com.platys.name: "amundsen"
      com.platys.restapi.title: "Amundsen ElasticSearch REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:19201"
    ports:
      - 19201:9200
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  AMUNDSEN_edition #}
{% endif %}   {#  AMUNDSEN_enable #}

{% if MARQUEZ_enable  | default(false) %}
  #  ================================== Marquez ========================================== #
  marquez-web:
    image: marquezproject/marquez-web:{{__MARQUEZ_WEB_version}}
    container_name: marquez-web
    hostname: marquez-web
    labels:
      com.platys.name: "marquez"
      com.platys.webui.title: "Marquez UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:3005"
    depends_on:
      - marquez
    ports:
      - "3005:3000"
    environment:
      - MARQUEZ_HOST=marquez
      - MARQUEZ_PORT=5000
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  marquez:
    image: marquezproject/marquez:{{__MARQUEZ_version}}
    container_name: marquez
    hostname: marquez
    labels:
      com.platys.name: "marquez"
      com.platys.restapi.title: "Marquez REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:5010/api/v1"
      com.platys.webui.title: "Marquez UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:5011"
    depends_on:
      - marquez-db
    ports:
      - "5010:5000"
      - "5011:5001"
    environment:
      - MARQUEZ_PORT=5000
      - MARQUEZ_ADMIN_PORT=5001
      - MARQUEZ_CONFIG=/usr/src/app/config.yml
      - POSTGRES_HOST=marquez-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=marquez
      - POSTGRES_USER=marquez
      - POSTGRES_PASSWORD=abc123!
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/docker/wait-for-it.sh:/usr/src/app/wait-for-it.sh
      - ./conf/marquez/marquez.yml:/usr/src/app/config.yml
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint: ["./wait-for-it.sh", "marquez-db:5432", "--", "./entrypoint.sh"]
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  marquez-db:
    image: "postgres:9.6"
    container_name: marquez-db
    hostname: marquez-db
    labels:
      com.platys.name: "marquez"
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=abc123
      - MARQUEZ_DB=marquez
      - MARQUEZ_USER=marquez
      - MARQUEZ_PASSWORD=abc123!
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./init/marquez/postgresql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    {% if MARQUEZ_volume_map_data %}
      - "./container-volume/marquez/postgresql:/var/lib/postgresql/data"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% if MARQUEZ_provision_marquez_sample_data | default(false) %}
  marquez-db-seed:
    image: "celfring/jq"
    container_name: marquez-db-seed
    hostname: marquez-db-seed
    labels:
      com.platys.name: "marquez"
    depends_on:
      - marquez-db
    environment:
      - MARQUEZ_HOST=marquez
      - MARQUEZ_PORT=5000
      - MARQUEZ_ADMIN_PORT=5001
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/docker/wait-for-it.sh:/usr/src/app/wait-for-it.sh
      - ./init/marquez/postgresql/seed-db.sh:/seed-db.sh
      - ./init/marquez/postgresql/data:/data
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint: ["/usr/src/app/wait-for-it.sh", "marquez:5000", "--", "./seed-db.sh"]
  {% endif %}   {# MARQUEZ_provision_marquez_sample_data #}
{% endif %}   {#  MARQUEZ_enable #}

{% if (HUE_enable) | default(false) %}
  #  ================================== Apache Hue ========================================== #
  hue:
    image: gethue/hue:{{__HUE_version}}
    container_name: hue
    hostname: hue
    dns: 8.8.8.8
    depends_on:
      - hue-db
      - solr
    labels:
      com.platys.name: "hue"
      com.platys.webui.title: "Hue UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8888"
    ports:
      - "8888:8888"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/hue/hue.ini:/usr/share/hue/desktop/conf/hue.ini
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  hue-db:
    image: postgres:{{__HUE_POSTGRES_version}}
    container_name: hue-db
    hostname: hue-db
    labels:
      com.platys.name: "hue"
    environment:
      POSTGRES_DB: hue
      POSTGRES_PASSWORD: hue
      POSTGRES_USER: hue
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

{% endif %}   {#  HUE_enable #}

{%if STREAMSETS_enable | default(false) %}
  #  ================================== StreamSets DataCollector ========================================== #
  streamsets-1:
    image: streamsets/datacollector:{{__STREAMSETS_version}}
    container_name: streamsets-1
    hostname: streamsets-1
    labels:
      com.platys.name: 'streamsets'
      com.platys.webui.title: "StreamSets Data Collector UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:18630"
      com.platys.restapi.title: "StreamSets Data Collector REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:18630/collector/restapi"
    ports:
      - "18630:18630"
    {%if STREAMSETS_activate_https | default(false) %}
      - "18629:18629"
    {% endif %}
  {% for num in range(STREAMSETS_additional_port_mappings | default(0) ) %}
      {% set external_port = 28500 + loop.index - 1 %}
      {% set webui_port = 28500 + loop.index - 1 %}
      - "{{external_port}}:{{webui_port}}"
  {% endfor %}
    environment:
      SDC_OFFSET_DIRECTORY: /data/custom-offset-el
    {%if __STREAMSETS_version >= '3.19.1' %}
      SDC_INSTALL_STAGES: "{{STREAMSETS_stage_libs}}"
      SDC_INSTALL_ENTERPRISE_STAGES: "{{STREAMSETS_enterprise_stage_libs}}"
      {%if STREAMSETS_install_pipelines is defined and STREAMSETS_install_pipelines | default(false) %}
      SDC_INSTALL_PIPELINES_FROM: '/tmp/pipelines'
      {% endif %}
    {% endif %}
      SDC_JAVA_OPTS: "-Xmx2g -Xms2g -Dlog4j2.formatMsgNoLookups=true"
      SDC_JAVA8_OPTS: "-XX:+UseG1GC"
      SDC_CONF_MONITOR_MEMORY: "true"
      SDC_CONF_PIPELINE_MAX_RUNNERS_COUNT: 50
    {% if STREAMSETS_sdc_id is defined and STREAMSETS_sdc_id %}
      PLATYS_SDC_ID: {{STREAMSETS_sdc_id}}
    {% endif %}
    {% if STREAMSETS_http_authentication is defined and STREAMSETS_http_authentication %}
      SDC_CONF_http_authentication: "{{STREAMSETS_http_authentication}}"
    {% endif %}
    {%if STREAMSETS_activate_https | default(false) %}
      SDC_CONF_HTTPS_PORT: 18629
    {% endif %}
      SDC_CONF_RUNTIME_CONF_LOCATION: {{"configuration.properties" if STREAMSETS_use_external_conf_file else "embedded"}}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if STREAMSETS_volume_map_data %}
      - ./container-volume/streamsets-1/data:/data:Z
    {% endif %}
    {% if STREAMSETS_volume_map_logs %}
      - ./container-volume/streamsets-1/logs:/logs:Z
    {% endif %}
    {% if STREAMSETS_volume_map_security_policy %}
      - ./custom-conf/streamsets/sdc-security.policy:/etc/sdc/sdc-security.policy:Z
    {% endif %}
    {%if STREAMSETS_install_pipelines is defined and STREAMSETS_install_pipelines | default(false) %}
      - ./scripts/streamsets/pipelines:/tmp/pipelines
    {% endif %}
      - ./conf/streamsets/pre-docker-entrypoint.sh:/pre-docker-entrypoint.sh
    {% if STREAMSETS_use_external_conf_file %}
      - ./custom-conf/streamsets/configuration.properties:/etc/sdc/configuration.properties
    {% endif %}
      - ./plugins/streamsets/user-libs:/opt/streamsets-datacollector-user-libs:Z
    {% for jdbcjar in STREAMSETS_jdbc_jars.split(",") %}
      - ./plugins/streamsets/libs-extras/streamsets-datacollector-jdbc-lib/{{jdbcjar}}:/opt/streamsets-datacollector-{{STREAMSETS_version}}/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/{{jdbcjar}}:Z
    {% endfor -%}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    ulimits:
      nofile:
        soft: 32768
        hard: 32768
    user: "{{uid | default(1000)}}"
    command:
      - "dc"
      - "-exec"
      - "-verbose"
    entrypoint:
      - "/pre-docker-entrypoint.sh"
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  STREAMSETS_enable  #}

{%if STREAMSETS_TRANSFORMER_enable | default(false) %}
  #  ================================== StreamSets Transformer ========================================== #
  streamsets-transformer-1:
    image: streamsets/transformer:{{__STREAMSETS_TRANSFORMER_version}}
    container_name: streamsets-transformer-1
    hostname: streamsets-transformer-1
    labels:
      com.platys.name: "streamsets-transformer"
      com.platys.webui.title: "StreamSets Transformer UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:19630"
      com.platys.restapi.title: "StreamSets Transformer REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:19630/collector/restapi"
    ports:
      - "19630:19630"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if STREAMSETS_TRANSFORMER_volume_map_data %}
      - ./container-volume/streamsets-transformer-1:/data:Z
    {% endif %}
#      - ./container-volume/streamsets-transformer/data:/data:Z
#      - ./streamsets-extras/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/postgresql-42.2.6.jar:/opt/streamsets-datacollector-{{__STREAMSETS_version}}/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/postgresql-42.2.6.jar:Z
#      - ./streamsets-extras/libs-common-lib:/opt/streamsets-datacollector-{{__STREAMSETS_version}}/libs-common-lib:Z
#      - ./streamsets-extras/user-libs:/opt/streamsets-datacollector-user-libs:Z
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  STREAMSETS_TRANSFORMER_enable  #}

{%if STREAMSETS_EDGE_enable | default(false) %}
  #  ================================== StreamSets DataCollector Edge ========================================== #
  streamsets-edge-1:
    image: streamsets/datacollector-edge:{{__STREAMSETS_EDGE_version}}
    container_name: streamsets-edge-1
    hostname: streamsets-edge-1
    labels:
      com.platys.name: "streamsets-edge"
      com.platys.restapi.title: "StreamSets Data Collector Edge REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:18633"
    ports:
      - "18633:18633"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  STREAMSETS_enable  #}

{%if STREAMSETS_DATAOPS_enable | default(false) %}
  #  ================================== StreamSets DataOps Platform ========================================== #
  streamsets-dataops-1:
    image: streamsets/datacollector:{{__STREAMSETS_DATAOPS_version}}
    container_name: streamsets-dataops-1
    hostname: streamsets-dataops-1
    labels:
      com.platys.name: "streamsets-dataops"
    environment:
      STREAMSETS_DEPLOYMENT_SCH_URL: '{{STREAMSETS_DATAOPS_deployment_sch_url}}'
      STREAMSETS_DEPLOYMENT_ID: {{STREAMSETS_DATAOPS_deployment_id if STREAMSETS_DATAOPS_deployment_id is defined and STREAMSETS_DATAOPS_deployment_id != None else '${STREAMSETS_DATAOPS_DEPLOYMENT_ID}' }}
      STREAMSETS_DEPLOYMENT_TOKEN: {{STREAMSETS_DATAOPS_deployment_token if STREAMSETS_DATAOPS_deployment_token is defined and STREAMSETS_DATAOPS_deployment_token != None else '${STREAMSETS_DATAOPS_DEPLOYMENT_TOKEN}' }}
      SDC_JAVA_OPTS: "-Dlog4j2.formatMsgNoLookups=true"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    ulimits:
      nofile:
        soft: 32768
        hard: 32768
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  STREAMSETS_DATAOPS_enable  #}

{%if NIFI_enable | default(false) %}
  #  ================================== NiFi ========================================== #
  {% for num in range(NIFI_nodes | default('1') ) %}
    {% set externalPort = 18080 + loop.index-1 %}
    {% set externalRemotePort = 10005 + loop.index-1 %}
    {% set clusterPort = 11005 + loop.index-1 %}
  nifi-{{loop.index}}:
    image: apache/nifi:{{__NIFI_version}}
    container_name: nifi-{{loop.index}}
    hostname: nifi-{{loop.index}}
    labels:
      com.platys.name: 'nifi'
      com.platys.webui.title: "Apache NiFi UI Node {{externalPort}}"
      com.platys.webui.url: "http{{ 's' if NIFI_run_secure}}://${PUBLIC_IP}:{{externalPort}}/nifi"
    ports:
      # HTTP
      - "{{externalPort}}:{{externalPort}}"
      # Remote Input Socket
      - {{externalRemotePort}}:{{externalRemotePort}}/tcp
    environment:
    {%if NIFI_create_cluster  | default(false) %}
      NIFI_CLUSTER_IS_NODE: 'true'
      NIFI_CLUSTER_ADDRESS: nifi-{{loop.index}}
      NIFI_CLUSTER_NODE_PROTOCOL_PORT: {{clusterPort}}
      NIFI_ZK_CONNECT_STRING: zookeeper-1:2181
      NIFI_ZK_ROOT_NODE: '/nifi'
      NIFI_ELECTION_MAX_WAIT: '{{NIFI_election_max_wait}}'
    {% endif -%}   {#  NIFI_create_cluster #}
    {%if NIFI_run_secure  | default(false) %}
      NIFI_WEB_HTTPS_PORT: '{{externalPort}}'
      NIFI_WEB_HTTPS_HOST: nifi-{{loop.index}}
      NIFI_WEB_PROXY_HOST: '${PUBLIC_IP}:{{externalPort}},${DOCKER_HOST_IP}{{externalPort}}'
      AUTH: tls
      KEYSTORE_PATH: /opt/certs/keystore.jks
      KEYSTORE_TYPE: JKS
      KEYSTORE_PASSWORD: 'PTz7kFl1rzX4wUtcDlurwV6gjm7vID9Ibgbe71N355w'
      TRUSTSTORE_PATH: /opt/certs/truststore.jks
      TRUSTSTORE_TYPE: JKS
      TRUSTSTORE_PASSWORD: 'h8I20cJyr50rFwzJRZkBcodLM8ifnDqQK2kORds8TLk'
      NIFI_SECURITY_USER_AUTHORIZER: single-user-authorizer
      NIFI_SECURITY_USER_LOGIN_IDENTITY_PROVIDER: single-user-provider
    {% else %}
      NIFI_WEB_HTTP_PORT: '{{externalPort}}'
    {% endif -%}   {#  NIFI_run_unsecure #}
      NIFI_REMOTE_INPUT_SOCKET_PORT: '{{externalRemotePort}}'
      NIFI_REMOTE_INPUT_HOST: nifi-{{loop.index}}
      NIFI_JVM_HEAP_INIT: {{ NIFI_jvm_heap_init if NIFI_jvm_heap_init is defined and NIFI_jvm_heap_init != None else omit }}
      NIFI_JVM_HEAP_MAX: {{ NIFI_jvm_heap_max if NIFI_jvm_heap_max is defined and NIFI_jvm_heap_max != None else omit }}
      NIFI_SENSITIVE_PROPS_KEY: '12345678901234567890A'
      SINGLE_USER_CREDENTIALS_USERNAME: '{{NIFI_username}}'
      SINGLE_USER_CREDENTIALS_PASSWORD: '{{NIFI_password}}'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if NIFI_run_secure  | default(false) %}
      - ./conf/nifi/keystore.jks:/opt/certs/keystore.jks
      - ./conf/nifi/truststore.jks:/opt/certs/truststore.jks
    {% endif -%}   {#  NIFI_run_unsecure #}
    {% if NIFI_volume_map_data %}
      - ./container-volume/nifi-{{loop.index}}/database_repository:/opt/nifi/nifi-current/database_repository
      - ./container-volume/nifi-{{loop.index}}/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - ./container-volume/nifi-{{loop.index}}/content_repository:/opt/nifi/nifi-current/content_repository
      - ./container-volume/nifi-{{loop.index}}/provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - ./container-volume/nifi-{{loop.index}}/state:/opt/nifi/nifi-current/state
    {% endif %}
    {% if NIFI_volume_map_logs %}
      - ./container-volume/nifi-{{loop.index}}/logs:/opt/nifi/nifi-current/logs
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}

  {%if NIFI_REGISTRY_enable | default(false) %}
  #  ================================== NiFi Registry ========================================== #
  nifi-registry:
    image: apache/nifi-registry:{{__NIFI_REGISTRY_version}}
    container_name: nifi-registry
    hostname: nifi-registry
    labels:
      com.platys.name: 'nifi-registry'
      com.platys.webui.title: "NiFi Registry UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:19090/nifi-registry"
    ports:
      - 19090:19090
    user: "root"
    environment:
      NIFI_REGISTRY_WEB_HTTP_PORT: 19090
      NIFI_REGISTRY_DB_CLASS: 'org.h2.Driver'
      NIFI_REGISTRY_DB_USER: 'nifireg'
      NIFI_REGISTRY_DB_PASS: 'nifireg'
      NIFI_REGISTRY_DB_DIR: '/opt/nifi-registry/nifi-registry-current/database'
      NIFI_REGISTRY_FLOW_PROVIDER: file
      NIFI_REGISTRY_FLOW_STORAGE_DIR: '/opt/nifi-registry/nifi-registry-current/flow_storage'
      NIFI_REGISTRY_BUNDLE_PROVIDER: file
      NIFI_REGISTRY_BUNDLE_STORAGE_DIR: './extension_bundles'
      LOG_LEVEL: INFO
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if NIFI_REGISTRY_volume_map_data %}
      - ./container-volume/nifi_registry/database:/opt/nifi-registry/nifi-registry-current/database
      - ./container-volume/nifi_registry/flow_storage:/opt/nifi-registry/nifi-registry-current/flow_storage
    {% endif -%}   {#  NIFI_REGISTRY_volume_map_data #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  NIFI_REGISTRY_enable  #}

  {%if NIFI_TOOLKIT_enable | default(false) %}
  #  ================================== NiFi Toolkit ========================================== #
  nifi-toolkit:
    image: apache/nifi-toolkit:{{__NIFI_TOOLKIT_version}}
    container_name: nifi-toolkit
    hostname: nifi-toolkit
    labels:
      com.platys.name: 'nifi-toolkit'
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    entrypoint:
      - /bin/sh
      - -c
      - |
        while [ 1 -eq 1 ];do sleep 60;done
    restart: {{container_restart_policy}}
  {% endif %}   {#  NIFI_TOOLKIT_enable  #}

  {%if MONITOFI_enable | default(false) %}
  #  ================================== MonitoFi ========================================== #
  monitofi:
    image: dtushar/monitofi:{{__MONITOFI_version}}
    container_name: monitofi
    hostname: monitofi
    environment:
      INFLUXDB_SERVER: influxdb
      ENDPOINT_LIST: 'controller/cluster,flow/cluster/summary,flow/process-groups/root,flow/status,counters,system-diagnostics'
      SLEEP_INTERVAL: 300
      API_URL: 'http://nifi-1:8080/nifi-api/'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  MONITOFI_enable  #}
{% endif %}   {#  NIFI_enable  #}

{%if STREAMPIPES_enable | default(false) %}
  #  ================================== Apache StreamPipes ========================================== #
  backend:
    image: apachestreampipes/backend:{{__STREAMPIPES_version}}
    container_name: backend
    hostname: backend
    labels:
      com.platys.name: 'streampipes'
    depends_on:
      - streampipes-consul
      - couchdb
    environment:
      CONSUL_LOCATION: streampipes-consul
      SP_BACKEND_HOST: backend
      SP_CONNECT_CONTAINER_WORKER_HOST: streampipes-connect-worker
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./container-volume/streampipes-backend:/root/.streampipes
      - ./container-volume/streampipes-backend/files:/spImages
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  streampipes-connect-worker:
    image: apachestreampipes/connect-worker:{{__STREAMPIPES_version}}
    container_name: streampipes-connect-worker
    hostname: streampipes-connect-worker
    labels:
      com.platys.name: 'streampipes'
    depends_on:
      - streampipes-consul
      - couchdb
    environment:
      SP_BACKEND_HOST: backend
      SP_CONNECT_CONTAINER_WORKER_HOST: streampipes-connect-worker
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
#      - connect:/data/
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  streampipes-ui:
    image: apachestreampipes/ui:{{__STREAMPIPES_version}}
    container_name: streampipes-ui
    hostname: streampipes-ui
    labels:
      com.platys.name: 'streampipes'
      com.platys.webui.title: "StreamPipes Dashboard"
      com.platys.webui.url: "http://${PUBLIC_IP}:28255"
    ports:
      - "28255:80"
    depends_on:
      - couchdb
      - activemq
      - streampipes-consul
      - backend
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
#      - connect:/data/
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  activemq:
    image: fogsyio/activemq:5.15.9
    container_name: activemq
    hostname: activemq
    labels:
      com.platys.name: 'streampipes'
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
#      - connect:/data/
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  streampipes-consul:
    image: fogsyio/consul:1.7.1
    container_name: streampipes-consul
    hostname: streampipes-consul
    labels:
      com.platys.name: 'streampipes'
    environment:
      - "CONSUL_LOCAL_CONFIG={\"disable_update_check\": true}"
      - "CONSUL_BIND_INTERFACE=eth0"
      - "CONSUL_HTTP_ADDR=0.0.0.0"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
#      - consul:/consul/data
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  couchdb:
    image: fogsyio/couchdb:2.3.1
    container_name: couchdb
    hostname: couchdb
    labels:
      com.platys.name: 'streampipes'
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
#      - couchdb:/opt/couchdb/data
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  streampipes-pipeline-elements-all-jvm:
    image: apachestreampipes/pipeline-elements-all-jvm:{{__STREAMPIPES_version}}
    container_name: streampipes-pipeline-elements-all-jvm
    hostname: streampipes-pipeline-elements-all-jvm
    labels:
      com.platys.name: 'streampipes'
    depends_on:
      - streampipes-consul
    environment:
      CONSUL_LOCATION: streampipes-consul
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
#      - files:/spImages
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  STREAMPIPES_enable #}

{%if CONDUIT_enable | default(false) %}
  #  ================================== Conduit ========================================== #
  conduit:
    image: ghcr.io/conduitio/conduit:{{__CONDUIT_version}}
    container_name: conduit
    hostname: conduit
    labels:
      com.platys.name: 'conduit'
      com.platys.webui.title: "Conduit UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28269"
    ports:
      - "28269:8080"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  CONDUIT_enable  #}

{%if NODERED_enable | default(false) %}
  #  ================================== Node-RED ========================================== #
  nodered-1:
    image: nodered/node-red:{{__NODERED_version}}
    container_name: nodered-1
    hostname: nodered-1
    labels:
      com.platys.name: 'nodered'
      com.platys.webui.title: "Node-RED UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:1880"
      com.platys.restapi.title: "Node-RED REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:1880"
    ports:
      - "1880:1880"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if NODERED_volume_map_data %}
      - ./container-volume/nodered:/data:Z
    {% endif %}
      - /dev/i2c-1:/dev/i2c-1
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

{% endif %}   {#  NODERED_enable  #}

{% if (STREAMSHEETS_enable) | default(false) %}
  #  ================================== Streamsheets ========================================== #
  streamsheets:
    image: cedalo/streamsheets:{{__STREAMSHEETS_version}}
    container_name: streamsheets
    hostname: streamsheets
    labels:
      com.platys.name: 'streamsheets'
      com.platys.webui.title: 'Streamsheets UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28158"
    ports:
      - 28158:8081
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  STREAMSHEETS_enable #}

{%if SPRING_DATAFLOW_enable | default(false) %}
  #  ================================== Spring Cloud Data Flow ========================================== #
  spring-dataflow-server:
    image: springcloud/spring-cloud-dataflow-server:{{__SPRING_DATAFLOW_version}}
    container_name: spring-dataflow-server
    hostname: spring-dataflow-server
    labels:
      com.platys.name: 'spring-dataflow'
      com.platys.webui.title: "Spring Cloud Data Flow Server Dashboard"
      com.platys.webui.url: "http://${PUBLIC_IP}:9393/dashboard"
      com.platys.restapi.title: "Spring Cloud Data Flow Server REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:9393"
    ports:
      - "9393:9393"
    environment:
      - SPRING_CLOUD_DATAFLOW_APPLICATIONPROPERTIES_STREAM_SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=PLAINTEXT://kafka-1:19092
      - SPRING_CLOUD_DATAFLOW_APPLICATIONPROPERTIES_STREAM_SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_BROKERS=PLAINTEXT://kafka-1:19092
      - SPRING_CLOUD_DATAFLOW_APPLICATIONPROPERTIES_STREAM_SPRING_CLOUD_STREAM_KAFKA_BINDER_ZKNODES=zookeeper-1:2181
      - SPRING_CLOUD_DATAFLOW_APPLICATIONPROPERTIES_STREAM_SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_ZKNODES=zookeeper-1:2181

      - SPRING_CLOUD_DATAFLOW_APPLICATIONPROPERTIES_STREAM_SPRING_KAFKA_STREAMS_PROPERTIES_METRICS_RECORDING_LEVEL=DEBUG

      - SPRING_CLOUD_DATAFLOW_APPLICATIONPROPERTIES_TASK_SPRING_CLOUD_TASK_CLOSECONTEXTENABLED=true

      - SPRING_CLOUD_SKIPPER_CLIENT_SERVER_URI=http://spring-skipper-server:7577/api

      - SPRING_DATASOURCE_URL=jdbc:mysql://spring-dataflow-mysql:3306/dataflow
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpw
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.mariadb.jdbc.Driver
      # (Optionally) authenticate the default Docker Hub access for the App Metadata access.
      #- SPRING_CLOUD_DATAFLOW_CONTAINER_REGISTRY_CONFIGURATIONS_DEFAULT_USER=${METADATA_DEFAULT_DOCKERHUB_USER}
      #- SPRING_CLOUD_DATAFLOW_CONTAINER_REGISTRY_CONFIGURATIONS_DEFAULT_SECRET=${METADATA_DEFAULT_DOCKERHUB_PASSWORD}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    entrypoint: "/usr/src/app/wait-for-it.sh -t 180 spring-skipper-server:7577 -- /cnb/process/web"
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/docker/wait-for-it.sh:/usr/src/app/wait-for-it.sh
#      - ${HOST_MOUNT_PATH:-.}:${DOCKER_MOUNT_PATH:-/root/scdf}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  spring-skipper-server:
    image: springcloud/spring-cloud-skipper-server:{{__SPRING_SKIPPER_version}}
    container_name: spring-skipper-server
    hostname: spring-skipper-server
    labels:
      com.platys.name: 'spring-dataflow'
      com.platys.restapi.title: "Spring Cloud Skipper Server REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:7577/api"
    ports:
      - "7577:7577"
#      - ${APPS_PORT_RANGE:-20000-20105:20000-20105}
    environment:
      - SPRING_CLOUD_SKIPPER_SERVER_PLATFORM_LOCAL_ACCOUNTS_DEFAULT_PORTRANGE_LOW=20000
      - SPRING_CLOUD_SKIPPER_SERVER_PLATFORM_LOCAL_ACCOUNTS_DEFAULT_PORTRANGE_HIGH=20100
      - SPRING_DATASOURCE_URL=jdbc:mysql://spring-dataflow-mysql:3306/dataflow
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpw
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.mariadb.jdbc.Driver
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_SKIPPER_SERVER_DEPLOYER=ERROR
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    entrypoint: "/usr/src/app/wait-for-it.sh spring-dataflow-mysql:3306 -- /cnb/process/web"
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/docker/wait-for-it.sh:/usr/src/app/wait-for-it.sh
#      - ${HOST_MOUNT_PATH:-.}:${DOCKER_MOUNT_PATH:-/root/scdf}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  spring-dataflow-mysql:
    image: mysql:5.7.25
    container_name: spring-dataflow-mysql
    hostname: spring-dataflow-mysql
    labels:
      com.platys.name: 'mysql'
    environment:
      MYSQL_DATABASE: dataflow
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: rootpw
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    expose:
      - 3306
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  SPRING_DATAFLOW_enable #}

{%if AIRBYTE_enable | default(false) %}
  #  ================================== Airbyte ========================================== #

  airbyte-init:
    image: airbyte/init:{{__AIRBYTE_version}}
    container_name: airbyte-init
    hostname: airbyte-init
    labels:
      com.platys.name: 'airbyte'
    environment:
      - LOCAL_ROOT=/tmp/airbyte_local
      - HACK_LOCAL_ROOT_PARENT=/tmp
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./tmp:/local_parent
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    command: /bin/sh -c "./scripts/create_mount_directories.sh /local_parent /tmp tmp/airbyte_local"

  airbyte-bootloader:
    image: airbyte/bootloader:{{__AIRBYTE_version}}
    container_name: airbyte-bootloader
    hostname: airbyte-bootloader
    labels:
      com.platys.name: 'airbyte'
    environment:
      - AIRBYTE_VERSION={{__AIRBYTE_version}}
      - CONFIG_DATABASE_PASSWORD=${CONFIG_DATABASE_PASSWORD:-}
      - CONFIG_DATABASE_URL=${CONFIG_DATABASE_URL:-}
      - CONFIG_DATABASE_USER=${CONFIG_DATABASE_USER:-}
      - DATABASE_PASSWORD={{AIRBYTE_database_password}}
      - DATABASE_URL=jdbc:postgresql://{{AIRBYTE_database_host}}:{{AIRBYTE_database_port}}/{{AIRBYTE_database_db}}
      - DATABASE_USER={{AIRBYTE_database_user}}
      - LOG_LEVEL={{AIRBYTE_log_level}}
#      - RUN_DATABASE_MIGRATION_ON_STARTUP=
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}

  airbyte-db:
    image: airbyte/db:{{__AIRBYTE_version}}
    container_name: airbyte-db
    hostname: airbyte-db
    labels:
      com.platys.name: 'airbyte'
    environment:
      - CONFIG_DATABASE_PASSWORD=${CONFIG_DATABASE_PASSWORD:-}
      - CONFIG_DATABASE_URL=${CONFIG_DATABASE_URL:-}
      - CONFIG_DATABASE_USER=${CONFIG_DATABASE_USER:-}
      - DATABASE_PASSWORD={{AIRBYTE_database_password}}
      - DATABASE_URL=jdbc:postgresql://{{AIRBYTE_database_host}}:{{AIRBYTE_database_port}}/{{AIRBYTE_database_db}}
      - DATABASE_USER={{AIRBYTE_database_user}}
      - POSTGRES_PASSWORD={{AIRBYTE_database_password}}
      - POSTGRES_USER={{AIRBYTE_database_user}}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if AIRBYTE_volume_map_data %}
      - airbyte-db-vol:/var/lib/postgresql/data
    {% endif -%}   {#  AIRBYTE_volume_map_data #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  airbyte-scheduler:
    image: airbyte/scheduler:{{__AIRBYTE_version}}
    container_name: airbyte-scheduler
    hostname: airbyte-scheduler
    labels:
      com.platys.name: 'airbyte'
    environment:
      - AIRBYTE_ROLE=${AIRBYTE_ROLE:-}
      - AIRBYTE_VERSION={{__AIRBYTE_version}}
      - CONFIG_DATABASE_PASSWORD=${CONFIG_DATABASE_PASSWORD:-}
      - CONFIG_DATABASE_URL=${CONFIG_DATABASE_URL:-}
      - CONFIG_DATABASE_USER=${CONFIG_DATABASE_USER:-}
#      - CONFIG_ROOT=/data
      - DATABASE_PASSWORD={{AIRBYTE_database_password}}
      - DATABASE_URL=jdbc:postgresql://{{AIRBYTE_database_host}}:{{AIRBYTE_database_port}}/{{AIRBYTE_database_db}}
      - DATABASE_USER={{AIRBYTE_database_user}}
      - INTERNAL_API_HOST=airbyte-server:8001
      - JOB_MAIN_CONTAINER_CPU_LIMIT=''
      - JOB_MAIN_CONTAINER_CPU_REQUEST=''
      - JOB_MAIN_CONTAINER_MEMORY_LIMIT=''
      - JOB_MAIN_CONTAINER_MEMORY_REQUEST=''
      - LOCAL_ROOT=/tmp/airbyte_local
      - LOCAL_DOCKER_MOUNT=/tmp/airbyte_local
      - LOG_LEVEL={{AIRBYTE_log_level}}
      - NEW_SCHEDULER="false"
#      - SECRET_PERSISTENCE=${SECRET_PERSISTENCE}
      - SYNC_JOB_MAX_ATTEMPTS=3
      - SYNC_JOB_MAX_TIMEOUT_DAYS=3
      - SUBMITTER_NUM_THREADS=10
      - TEMPORAL_HOST=airbyte-temporal:7233
      - TRACKING_STRATEGY=segment
      - WEBAPP_URL=http://localhost:28271/
      - WORKER_ENVIRONMENT=docker
      - WORKSPACE_DOCKER_MOUNT=airbyte_workspace
      - WORKSPACE_ROOT=/tmp/workspace
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - airbyte-workspace-vol:/tmp/workspace
      - /tmp/airbyte_local:/tmp/airbyte_local
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  airbyte-worker:
    image: airbyte/worker:{{__AIRBYTE_version}}
    container_name: airbyte-worker
    hostname: airbyte-worker
    labels:
      com.platys.name: 'airbyte'
    environment:
      - AIRBYTE_VERSION={{__AIRBYTE_version}}
#      - AUTO_DISABLE_FAILING_CONNECTIONS=${AUTO_DISABLE_FAILING_CONNECTIONS}
      - CONFIG_DATABASE_PASSWORD=${CONFIG_DATABASE_PASSWORD:-}
      - CONFIG_DATABASE_URL=${CONFIG_DATABASE_URL:-}
      - CONFIG_DATABASE_USER=${CONFIG_DATABASE_USER:-}
#      - CONFIG_ROOT=/data
      - DATABASE_PASSWORD={{AIRBYTE_database_password}}
      - DATABASE_URL=jdbc:postgresql://{{AIRBYTE_database_host}}:{{AIRBYTE_database_port}}/{{AIRBYTE_database_db}}
      - DATABASE_USER={{AIRBYTE_database_user}}
      - JOB_MAIN_CONTAINER_CPU_LIMIT=''
      - JOB_MAIN_CONTAINER_CPU_REQUEST=''
      - JOB_MAIN_CONTAINER_MEMORY_LIMIT=''
      - JOB_MAIN_CONTAINER_MEMORY_REQUEST=''
      - LOCAL_ROOT=/tmp/airbyte_local
      - LOCAL_DOCKER_MOUNT=/tmp/airbyte_local
      - LOG_LEVEL=INFO
      - MAX_CHECK_WORKERS=5
      - MAX_DISCOVER_WORKERS=5
      - MAX_SPEC_WORKERS=5
      - MAX_SYNC_WORKERS=5
#      - SECRET_PERSISTENCE=${SECRET_PERSISTENCE}
      - SYNC_JOB_MAX_ATTEMPTS=3
      - SYNC_JOB_MAX_TIMEOUT_DAYS=3
      - TEMPORAL_HOST=airbyte-temporal:7233
      - TRACKING_STRATEGY=segment
      - WEBAPP_URL=http://localhost:28271/
      - WORKER_ENVIRONMENT=docker
      - WORKSPACE_DOCKER_MOUNT=airbyte_workspace
      - WORKSPACE_ROOT=/tmp/workspace
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - airbyte-workspace-vol:/tmp/workspace
      - /tmp/airbyte_local:/tmp/airbyte_local
      - /var/run/docker.sock:/var/run/docker.sock
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  airbyte-server:
    image: airbyte/server:{{__AIRBYTE_version}}
    container_name: airbyte-server
    hostname: airbyte-server
    labels:
      com.platys.name: 'airbyte'
      com.platys.restapi.title: "Airbyte REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28270/api/v1"
    ports:
      - 28270:8001
    environment:
      - AIRBYTE_ROLE=${AIRBYTE_ROLE:-}
      - AIRBYTE_VERSION={{__AIRBYTE_version}}
      - CONFIG_DATABASE_PASSWORD=${CONFIG_DATABASE_PASSWORD:-}
      - CONFIG_DATABASE_URL=${CONFIG_DATABASE_URL:-}
      - CONFIG_DATABASE_USER=${CONFIG_DATABASE_USER:-}
      - CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION={{AIRBYTE_database_minimum_flyway_migration_version}}
#      - CONFIG_ROOT=/data
      - DATABASE_PASSWORD={{AIRBYTE_database_password}}
      - DATABASE_URL=jdbc:postgresql://{{AIRBYTE_database_host}}:{{AIRBYTE_database_port}}/{{AIRBYTE_database_db}}
      - DATABASE_USER={{AIRBYTE_database_user}}
      - JOB_MAIN_CONTAINER_CPU_LIMIT=''
      - JOB_MAIN_CONTAINER_CPU_REQUEST=''
      - JOB_MAIN_CONTAINER_MEMORY_LIMIT=''
      - JOB_MAIN_CONTAINER_MEMORY_REQUEST=''
      - JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION={{AIRBYTE_database_minimum_flyway_migration_version}}
      - LOG_LEVEL={{AIRBYTE_log_level}}
      - NEW_SCHEDULER="false"
#      - SECRET_PERSISTENCE=${SECRET_PERSISTENCE}
      - TEMPORAL_HOST=airbyte-temporal:7233
      - TRACKING_STRATEGY=segment
      - WEBAPP_URL=http://localhost:28271/
      - WORKER_ENVIRONMENT=docker
      - WORKSPACE_ROOT=/tmp/workspace
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - airbyte-workspace-vol:/tmp/workspace
      - /tmp/airbyte_local:/tmp/airbyte_local
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  airbyte-webapp:
    image: airbyte/webapp:{{__AIRBYTE_version}}
    container_name: airbyte-webapp
    hostname: airbyte-webapp
    labels:
      com.platys.name: 'airbyte'
      com.platys.webui.title: "Airbyte UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28271"
    ports:
      - 28271:80
    environment:
      - AIRBYTE_ROLE=${AIRBYTE_ROLE:-}
      - AIRBYTE_VERSION={{__AIRBYTE_version}}
      - API_URL=/api/v1/
      - FULLSTORY=${FULLSTORY:-}
      - INTERNAL_API_HOST=airbyte-server:8001
      - IS_DEMO=${IS_DEMO:-}
      - OPENREPLAY=${OPENREPLAY:-}
      - PAPERCUPS_STORYTIME=${PAPERCUPS_STORYTIME:-}
      - TRACKING_STRATEGY=segment
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  airbyte-temporal:
    image: airbyte/temporal:{{__AIRBYTE_version}}
    container_name: airbyte-temporal
    hostname: airbyte-temporal
    labels:
      com.platys.name: 'airbyte'
      com.platys.restapi.title: "Airbyte Temporal"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28272"
    ports:
      - 28272:7233
    environment:
      - DB=postgresql
      - DB_PORT={{AIRBYTE_database_port}}
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
      - LOG_LEVEL={{AIRBYTE_log_level}}
      - POSTGRES_PWD={{AIRBYTE_database_password}}
      - POSTGRES_SEEDS={{AIRBYTE_database_host}}
      - POSTGRES_USER={{AIRBYTE_database_user}}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/airbyte/temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

{% endif %}   {#  SPRING_DATAFLOW_enable #}

{%if AIRFLOW_enable | default(false) %}
  {% if (AIRFLOW_executor | lower) == 'celery'  %}
     {% set airflow_executor = "CeleryExecutor" %}
  {% elif (AIRFLOW_executor | lower) == 'sequential' %}
     {% set airflow_executor = "SequentialExecutor" %}
  {% else %}
     {% set airflow_executor = "LocalExecutor" %}
  {% endif -%}
  #  ================================== Airflow ========================================== #
  airflow:
    image: bitnami/airflow:{{__AIRFLOW_version}}
    container_name: airflow
    hostname: airflow
    labels:
      com.platys.name: 'airflow'
      com.platys.webui.title: "Airflow UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28139"
      com.platys.restapi.title: "Airflow REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28139/api/experimental/"
    ports:
      - "28139:8080"
    environment:
      - AIRFLOW_DATABASE_NAME=bitnami_airflow
      - AIRFLOW_DATABASE_USERNAME=bn_airflow
      - AIRFLOW_DATABASE_PASSWORD=abc123!
      - AIRFLOW_DATABASE_HOST=airflow-db
      - AIRFLOW_DATABASE_PORT_NUMBER=5432
      - REDIS_HOST=airflow-redis
      - REDIS_PORT_NUMBER=6379
      - AIRFLOW_EXECUTOR={{airflow_executor}}
      - AIRFLOW_FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW_HOME=/opt/bitnami/airflow
      - AIRFLOW_LOAD_EXAMPLES={{ 'yes' if (AIRFLOW_provision_examples ) else 'no' }}
      - AIRFLOW_PASSWORD=abc123!
      - AIRFLOW_USERNAME=airflow
      - PYTHONPATH=/bitnami/python
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/airflow/dags:/opt/bitnami/airflow/dags:Z
      - ./plugins/airflow/:/opt/bitnami/airflow/plugins:Z
    {%if AIRFLOW_volume_map_python | default(false) %}
      - ./scripts/airflow/python-requirements:/bitnami/python-requirements:Z
      - ./scripts/airflow/python:/bitnami/python:Z
    {% endif -%}   {#  AIRFLOW_volume_map_python #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  airflow-scheduler:
    image: bitnami/airflow-scheduler:{{__AIRFLOW_version}}
    container_name: airflow-scheduler
    hostname: airflow-scheduler
    labels:
      com.platys.name: 'airflow'
    environment:
      - AIRFLOW_DATABASE_NAME=bitnami_airflow
      - AIRFLOW_DATABASE_USERNAME=bn_airflow
      - AIRFLOW_DATABASE_PASSWORD=abc123!
      - AIRFLOW_DATABASE_HOST=airflow-db
      - AIRFLOW_DATABASE_PORT_NUMBER=5432
      - REDIS_HOST=airflow-redis
      - REDIS_PORT_NUMBER=6379
      - AIRFLOW_EXECUTOR={{airflow_executor}}
      - AIRFLOW_WEBSERVER_HOST=airflow
      - AIRFLOW_WEBSERVER_PORT_NUMBER=8080
      - AIRFLOW_LOAD_EXAMPLES={{ 'yes' if (AIRFLOW_provision_examples ) else 'no' }}
      - AIRFLOW_HOME=/opt/bitnami/airflow
      - AIRFLOW_FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - PYTHONPATH=/bitnami/python
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/airflow/dags:/opt/bitnami/airflow/dags:Z
      - ./plugins/airflow/:/opt/bitnami/airflow/plugins:Z
    {%if AIRFLOW_volume_map_python | default(false) %}
      - ./scripts/airflow/python-requirements:/bitnami/python-requirements:Z
      - ./scripts/airflow/python:/bitnami/python:Z
    {% endif -%}   {#  AIRFLOW_volume_map_python #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% if (AIRFLOW_executor | lower) == 'celery'  %}
  airflow-worker-1:
    image: bitnami/airflow-worker:{{__AIRFLOW_version}}
    container_name: airflow-worker-1
    hostname: airflow-worker-1
    labels:
      com.platys.name: 'airflow'
    environment:
      - AIRFLOW_DATABASE_NAME=bitnami_airflow
      - AIRFLOW_DATABASE_USERNAME=bn_airflow
      - AIRFLOW_DATABASE_PASSWORD=abc123!
      - AIRFLOW_DATABASE_HOST=airflow-db
      - AIRFLOW_DATABASE_PORT_NUMBER=5432
      - REDIS_HOST=airflow-redis
      - REDIS_PORT_NUMBER=6379
      - AIRFLOW_EXECUTOR={{airflow_executor}}
      - AIRFLOW_WEBSERVER_HOST=airflow
      - AIRFLOW_WEBSERVER_PORT_NUMBER=8080
      - AIRFLOW_LOAD_EXAMPLES={{ 'yes' if (AIRFLOW_provision_examples ) else 'no' }}
      - AIRFLOW_HOME=/opt/bitnami/airflow
      - AIRFLOW_FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - PYTHONPATH=/bitnami/python
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/airflow/dags:/opt/bitnami/airflow/dags:Z
      - ./plugins/airflow/:/opt/bitnami/airflow/plugins:Z
    {%if AIRFLOW_volume_map_python | default(false) %}
      - ./scripts/airflow/python-requirements:/bitnami/python-requirements:Z
      - ./scripts/airflow/python:/bitnami/python:Z
    {% endif -%}   {#  AIRFLOW_volume_map_python #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  airflow-redis:
    image: bitnami/redis:6.0
    container_name: airflow-redis
    hostname: airflow-redis
    labels:
      com.platys.name: 'airflow'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}  {#  AIRFLOW_executor  #}

  airflow-db:
    image: 'bitnami/postgresql:10'
    container_name: airflow-db
    hostname: airflow-db
    labels:
      com.platys.name: 'airflow'
    environment:
      - POSTGRESQL_DATABASE=bitnami_airflow
      - POSTGRESQL_USERNAME=bn_airflow
      - POSTGRESQL_PASSWORD=abc123!
      - ALLOW_EMPTY_PASSWORD=yes
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

{% endif %}   {#  AIRFLOW_enable  #}

{%if ZEPPELIN_enable | default(false) %}
  #  ================================== Zeppelin ========================================== #
  zeppelin:
    image: trivadis/apache-zeppelin:{{__ZEPPELIN_version}}
    container_name: zeppelin
    hostname: zeppelin
    labels:
      com.platys.name: 'zeppelin'
      com.platys.webui.title: "Apache Zeppelin UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28080"
    ports:
      - "28080:8080"
      - "6060:6060"
      - "5050:5050"
      - "4050-4054:4050-4054"
    env_file:
      - ./conf/hadoop.env
    environment:
    {%if MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      CORE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      SPARK_HADOOP_FS_S3A_ACCESS_KEY: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      SPARK_HADOOP_FS_S3A_SECRET_KEY: {{s3SecretAccessKey}}
      # for awscli & s3cmd
      AWS_ACCESS_KEY_ID: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      AWS_SECRET_ACCESS_KEY: ${PLATYS_AWS_SECRET_ACCESS_KEY:-{{MINIO_secret_key}}}
      AWS_ENDPOINT: {{s3Endpoint if s3Endpoint is defined and s3Endpoint else omit}}
      AWS_DEFAULT_REGION: {{s3DefaultRegion if s3DefaultRegion is defined and s3DefaultRegion else omit}}
    {% endif %}
      SPARK_DEFAULTS_CONF_spark_cores_max: {{ZEPPELIN_spark_cores_max if ZEPPELIN_spark_cores_max is defined and ZEPPELIN_spark_cores_max else omit }}
      SPARK_DEFAULTS_CONF_spark_executor_memory: {{ZEPPELIN_spark_executor_memory if ZEPPELIN_spark_executor_memory is defined and ZEPPELIN_spark_executor_memory else omit }}
      SPARK_DEFAULTS_CONF_spark_jars_repositories: {{SPARK_jars_repositories}}
      SPARK_DEFAULTS_CONF_spark_jars_packages: {{SPARK_jars_packages}}
      SPARK_DEFAULTS_CONF_spark_jars_excludes: {{SPARK_jars_excludes}}
      SPARK_DEFAULTS_CONF_spark_jars: {{SPARK_jars}}
      SPARK_DEFAULTS_CONF_spark_jars_ivySettings: {{SPARK_jars_ivySettings}}
  {%if (SPARK_catalog | lower) == 'in-memory' | default(false) %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: in-memory
  {% else %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: hive
  {% endif -%}   {#  SPARK_catalog #}
  {%if HADOOP_enable | default(false) %}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: hdfs://namenode:9000/user/hive/warehouse
  {%elif MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: s3a://admin-bucket
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: s3a://admin-bucket/hive/warehouse
  {% else %}
      CORE_CONF_fs_defaultFS: file:///tmp
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: file:///hive/warehouse
  {% endif -%}   {#  HADOOP_enable #}
      SPARK_DEFAULTS_CONF_spark_yarn_dist_files: '/spark/conf/hive-site.xml'
      SPARK_DEFAULTS_CONF_spark_driver_extraJavaOptions: {{SPARK_driver_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_executor_extraJavaOptions: {{SPARK_executor_extraJavaOptions}}

      ZEPPELIN_ADDR: "0.0.0.0"
      ZEPPELIN_PORT: "8080"
      ZEPPELIN_MEM: '-Xms1024m -Xmx1024m -XX:MaxMetaspaceSize=512m'
      ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT: 120000
      ZEPPELIN_INTERPRETER_DEP_MVNREPO: 'https://repo.maven.apache.org/maven2'
      ZEPPELIN_ADMIN_USERNAME: {{ZEPPELIN_admin_username}}
      ZEPPELIN_ADMIN_PASSWORD: {{ZEPPELIN_admin_password}}
      ZEPPELIN_USER_USERNAME: {{ZEPPELIN_user_username}}
      ZEPPELIN_USER_PASSWORD: {{ZEPPELIN_user_password}}
      # set spark-master for Zeppelin interpreter

  {%if ZEPPELIN_use_local_spark | default(false) %}
      ZEPPELIN_SPARK_MASTER: "local[*]"
  {% else %}
      ZEPPELIN_SPARK_MASTER: "spark://spark-master:7077"
  {% endif -%}   {#  ZEPPELIN_use_local_spark #}
      ZEPPELIN_NOTEBOOK_DIR: '{{ZEPPELIN_notebook_dir}}'
      ZEPPELIN_NOTEBOOK_CRON_ENABLE: '{{ZEPPELIN_notebook_cron_enable}}'
      PYSPARK_PYTHON: "python3"
      SPARK_SUBMIT_OPTIONS: "{{ZEPPELIN_spark_submit_options}} --conf spark.ui.port=4050 --conf spark.driver.host=zeppelin --conf spark.driver.port=5050 --conf spark.driver.bindAddress=0.0.0.0 --conf spark.blockManager.port=6060 --conf spark.driver.extraJavaOptions=-Dcom.amazonaws.services.s3.enableV4 --conf spark.executor.extraJavaOptions=-Dcom.amazonaws.services.s3.enableV4"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/spark/jars:/extra-jars
      - ./container-volume/spark/logs/:/var/log/spark/logs
    {% if ZEPPELIN_volume_map_data %}
      - ./container-volume/spark/notebooks:/opt/zeppelin/{{ZEPPELIN_notebook_dir}}
    {% endif -%}   {#  ZEPPELIN_volume_map_data #}
      - './conf/s3cfg:/root/.s3cfg.template'
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ZEPPELIN_enable  #}

{%if JUPYTER_enable | default(false) %}
  #  ================================== Jupyter ========================================== #
  jupyter:
    image: jupyter/{{ (JUPYTER_edition | lower) }}-notebook:{{__JUPYTER_version}}
    container_name: jupyter
    hostname: jupyter
    labels:
      com.platys.name: 'jupyter'
      com.platys.webui.title: "Jupyter UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28888"
    ports:
      - "28888:8888"
    environment:
      JUPYTER_ENABLE_LAB: "true"
      JUPYTER_TOKEN: "{{admin_password}}"
      GRANT_SUDO: "true"
      TINI_SUBREAPER: "true"
    {%if MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      CORE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      SPARK_HADOOP_FS_S3A_ACCESS_KEY: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      SPARK_HADOOP_FS_S3A_SECRET_KEY: {{s3SecretAccessKey}}
      # for awscli & s3cmd
      AWS_ACCESS_KEY_ID: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      AWS_SECRET_ACCESS_KEY: ${PLATYS_AWS_SECRET_ACCESS_KEY:-{{MINIO_secret_key}}}
      AWS_ENDPOINT: {{s3Endpoint if s3Endpoint is defined and s3Endpoint else omit}}
      AWS_DEFAULT_REGION: {{s3DefaultRegion if s3DefaultRegion is defined and s3DefaultRegion else omit}}
      {%if MLFLOW_SERVER_enable | default(false) %}
      MLFLOW_S3_ENDPOINT_URL: {{s3Endpoint | default(omit) }}
      MLFLOW_TRACKING_URI: http://mlflow-server:5000
      {% endif %}
    {% endif %}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if MINIO_enable or external['S3_enable'] | default(false) %}
      - ./plugins/jupyter/aws-java-sdk-bundle-1.11.375.jar:/usr/local/spark/jars/aws-java-sdk-bundle-1.11.375.jar
      - ./plugins/jupyter/hadoop-aws-3.2.1.jar:/usr/local/spark/jars/hadoop-aws-3.2.1.jar
      - ./plugins/jupyter/guava-27.1-jre.jar:/usr/local/spark/jars/guava-14.0.1.jar
    {% endif %}
    {% if JUPYTER_volume_map_data %}
      - "./container-volume/jupyter/work:/home/jovyan/work"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {% if JUPYTER_python_packages is defined and JUPYTER_python_packages|length  %}
    command:
      # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
      - bash
      - -c
      - |
        pip install {{JUPYTER_python_packages}}
        start-notebook.sh
    {% endif -%}   {#  JUPYTER_python_packages #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

{% endif %}   {#  JUPYTER_enable  #}

{%if RSTUDIO_enable | default(false) %}
  #  ================================== RStudio ========================================== #
  rstudio:
    image: rocker/rstudio:{{__RSTUDIO_version}}
    container_name: rstudio
    hostname: rstudio
    labels:
      com.platys.name: 'rstudio'
      com.platys.webui.title: "RStudio UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8787"
    ports:
      - "8787:8787"
    environment:
      PASSWORD: {{RSTUDIO_password | default ('rstudio')}}
      ROOT: '{{RSTUDIO_run_as_root | default(false)}}'
      DISABLE_AUTH: '{{RSTUDIO_disable_auth | default(false)}}'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  RSTUDIO_enable  #}

{%if SHINY_SERVER_enable | default(false) %}
  #  ================================== Shiny Server ========================================== #
  shiny-server:
    image: rocker/{{ 'shiny' if (SHINY_SERVER_edition | lower) == 'base' else 'shiny-verse' }}:{{__SHINY_SERVER_version}}
    container_name: shiny-server
    hostname: shiny-server
    labels:
      com.platys.name: 'shiny'
      com.platys.webui.title: "Shiny Server UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:3838"
    ports:
      - "3838:3838"
    environment:
      APPLICATION_LOGS_TO_STDOUT: 'false'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if SHINY_SERVER_volume_map_apps %}
      - ./plugins/shiny-server/apps:/srv/shiny-server
    {% endif -%}   {#  use_timezone #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  SHINY_SERVER_enable  #}

{%if DATAIKU_DSS_enable | default(false) %}
  #  ================================== Dataiku Data Science Studio  ========================================== #
  dataiku-dss:
    image: dataiku/dss:{{__DATAIKU_DSS_version}}
    container_name: dataiku-dss
    hostname: dataiku-dss
    labels:
      com.platys.name: 'dataiku'
      com.platys.webui.title: "Dataiku DSS UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28205"
    ports:
      - "28205:10000"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if DATAIKU_DSS_volume_map_data %}
      - "./container-volume/dataiku-dss/work:/home/dataiku/dss"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  DATAIKU_DSS_enable  #}

{%if MLFLOW_SERVER_enable | default(false) %}
  #  ================================== MLflow Server ========================================== #
  mlflow-server:
    image: trivadis/mlflow-server:{{__MLFLOW_SERVER_version}}
    container_name: mlflow-server
    hostname: mlflow-server
    labels:
      com.platys.name: 'mlflow'
      com.platys.webui.title: "MLflow UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28229"
    ports:
      - "28229:5000"
    environment:
    {%if MLFLOW_SERVER_backend | default('file') == 'postgresql' %}
      BACKEND_URI: postgresql+psycopg2://{{MLFLOW_SERVER_db_user | default('mlflow')}}:{{MLFLOW_SERVER_db_password | default('mlflow')}}@postgresql:5432/mlflowdb
    {%elif MLFLOW_SERVER_backend | default('file') == 'mylsql' %}
      BACKEND_URI: mysql+mysqldb://${MLFLOW_SERVER_db_user | default('mlflow')}}:${MLFLOW_SERVER_db_password | default('mlflow')}}@mlflowdb:3306/mlflowdb
    {%elif MLFLOW_SERVER_backend | default('file') == 'file' %}
      BACKEND_URI: '/mlruns'
    {% endif -%}   {#  MLFLOW_SERVER_backend  #}
      PORT: 5000
    {%if MINIO_enable or external['S3_enable'] | default(false) %}
      AWS_ACCESS_KEY_ID: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      AWS_SECRET_ACCESS_KEY: ${PLATYS_AWS_SECRET_ACCESS_KEY:-{{MINIO_secret_key}}}
      MLFLOW_S3_ENDPOINT_URL: {{s3Endpoint if s3Endpoint is defined and s3Endpoint else omit}}
      AWS_DEFAULT_REGION: {{s3DefaultRegion if s3DefaultRegion is defined and s3DefaultRegion else omit}}
      ARTIFACT_ROOT: '{{MLFOW_SERVER_artifact_root | default ('s3://mlruns/')}}'
    {% else %}
      ARTIFACT_ROOT: '{{MLFOW_SERVER_artifact_root | default ('/mlruns')}}'
    {% endif %}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if MLFLOW_SERVER_volume_map_data %}
      - ./container-volume/mlflow/data:/mlruns
    {% endif -%}   {#  use_timezone #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  MLFLOW_SERVER_enable  #}

{% if (OPTUNA_enable) | default(false) %}
  #  ================================== Optuna  ========================================== #
  optuna:
    image: optuna/optuna:{{__OPTUNA_version}}
    container_name: optuna
    hostname: optuna
    labels:
      com.platys.name: 'optuna'
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint:
      - /bin/sh
      - -c
      - |
        while [ 1 -eq 1 ];do sleep 60;done
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% if (OPTUNA_DASHBOARD_enable) | default(false) %}
  #  ================================== Optuna Dashboard  ========================================== #
  optuna-dashboard:
    image: trivadis/optuna-dashboard:{{__OPTUNA_DASHBOARD_version}}
    container_name: optuna-dashboard
    hostname: optuna-dashboard
    labels:
      com.platys.name: 'optuna'
      com.platys.webui.title: "Optuna Dashboard"
      com.platys.webui.url: "http://${PUBLIC_IP}:28230"
    ports:
      - "28230:8080"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {# OPTUNA_DASHBOARD_enable  #}
{% endif %}   {# OPTUNA_enable  #}

{%if KIE_SERVER_enable | default(false) %}
  #  ================================== Drools KIE Server  ========================================== #
  business-central:
    image: jboss/business-central-workbench:{{__KIE_SERVER_version}}
    container_name: business-central
    hostname: business-central
    labels:
      com.platys.name: 'kie-server'
      com.platys.webui.title: "Business Central UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28236/business-central"
    ports:
      - 28235:8001
      - 28236:8080
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  kie-server:
    image: jboss/kie-server:{{__KIE_SERVER_version}}
    container_name: kie-server
    hostname: kie-server
    labels:
      com.platys.name: 'kie-server'
      com.platys.webui.title: "Drools KIE Server Web UI"
      com.platys.webuis.url: "http://${PUBLIC_IP}:28234"
      com.platys.restapi.title: "Drools KIE Server REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28234/kie-server/services/rest/server/"
    ports:
      - "28234:8080"
    environment:
      KIE_SERVER_LOCATION: http://kie-server:8080/kie-server/services/rest/server
      KIE_SERVER_CONTROLLER: http://business-central:8080/business-central/rest/controller
      KIE_MAVEN_REPO: http://business-central:8080/business-central/maven2
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KIE_SERVER_enable  #}

{% if METABASE_enable | default(false) %}
  #  ================================== Metabase ========================================== #
  metabase:
    image: metabase/metabase:{{__METABASE_version}}
    hostname: metabase
    container_name: metabase
    labels:
      com.platys.name: "metabase"
      com.platys.webui.title: "Metabase UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28257"
    ports:
      - "28257:3000"
    environment:
    {% if (METABASE_db_type | lower) == 'h2' %}
      MB_DB_TYPE: h2
      {% if METABASE_volume_map_data %}
      MB_DB_FILE: /metabase-data/metabase.db
      {% endif -%}   {#  METABASE_volume_map_data #}
    {% endif -%}   {#  METABASE_db_type = h2 #}
    {% if (METABASE_db_type | lower) == 'postgres' %}
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: {{METABASE_postgres_dbname}}
      MB_DB_PORT: 5432
      MB_DB_USER: {{METABASE_postgres_user}}
      MB_DB_PASS: {{METABASE_postgres_password}}
      MB_DB_HOST: posgresql
    {% endif -%}   {#  METABASE_db_type = postgres #}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
      JAVA_TIMEZONE: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if METABASE_volume_map_data %}
      - ./container-volume/metabase/data:/metabase-data
    {% endif -%}   {#  METABASE_volume_map_data #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  METABASE_enable #}

{% if SUPERSET_enable | default(false) %}
  #  ================================== Superset ========================================== #
  superset:
    image: apache/superset:{{__SUPERSET_version}}
    hostname: superset
    container_name: superset
    labels:
      com.platys.name: "superset"
      com.platys.webui.title: "Superset UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28151"
    ports:
      - "28151:8088"
    user: "root"
    environment:
      - DATABASE_DB=superset
      - DATABASE_HOST=superset-db
      - DATABASE_PASSWORD=superset
      - DATABASE_USER=superset
      - DATABASE_PORT=5432
      - DATABASE_DIALECT=postgresql
      - POSTGRES_DB=superset
      - POSTGRES_USER=superset
      - POSTGRES_PASSWORD=superset
      - PYTHONPATH=/app/pythonpath:/app/docker/pythonpath_dev
      - REDIS_HOST=superset-redis
      - REDIS_PORT=6379
      - FLASK_ENV=development
      - SUPERSET_ENV=development
      - SUPERSET_LOAD_EXAMPLES={{ 'yes' if (SUPERSET_provision_examples ) else 'no' }}
      - CYPRESS_CONFIG=false
      - SUPERSET_PORT=8088
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/superset:/app/docker
#      - ./container-volumes/superset:/app/superset_home
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: ["/app/docker/docker-bootstrap.sh", "app"]
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  superset-init:
    image: apache/superset:{{__SUPERSET_version}}
    hostname: superset-init
    container_name: superset-init
    labels:
      com.platys.name: "superset"
    user: "root"
    environment:
      - DATABASE_DB=superset
      - DATABASE_HOST=superset-db
      - DATABASE_PASSWORD=superset
      - DATABASE_USER=superset
      - DATABASE_PORT=5432
      - DATABASE_DIALECT=postgresql
      - POSTGRES_DB=superset
      - POSTGRES_USER=superset
      - POSTGRES_PASSWORD=superset
      - PYTHONPATH=/app/pythonpath:/app/docker/pythonpath_dev
      - REDIS_HOST=superset-redis
      - REDIS_PORT=6379
      - FLASK_ENV=development
      - SUPERSET_ENV=development
      - SUPERSET_LOAD_EXAMPLES={{ 'yes' if (SUPERSET_provision_examples ) else 'no' }}
      - CYPRESS_CONFIG=false
      - SUPERSET_PORT=8088
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/superset:/app/docker
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: ["/app/docker/docker-init.sh"]

  superset-worker:
    image: apache/superset:{{__SUPERSET_version}}
    hostname: superset-worker
    container_name: superset-worker
    labels:
      com.platys.name: "superset"
    user: "root"
    environment:
      - DATABASE_DB=superset
      - DATABASE_HOST=superset-db
      - DATABASE_PASSWORD=superset
      - DATABASE_USER=superset
      - DATABASE_PORT=5432
      - DATABASE_DIALECT=postgresql
      - POSTGRES_DB=superset
      - POSTGRES_USER=superset
      - POSTGRES_PASSWORD=superset
      - PYTHONPATH=/app/pythonpath:/app/docker/pythonpath_dev
      - REDIS_HOST=superset-redis
      - REDIS_PORT=6379
      - FLASK_ENV=development
      - SUPERSET_ENV=development
      - SUPERSET_LOAD_EXAMPLES={{ 'yes' if (SUPERSET_provision_examples ) else 'no' }}
      - CYPRESS_CONFIG=false
      - SUPERSET_PORT=8088
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/superset:/app/docker
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  superset-worker-beat:
    image: apache/superset:{{__SUPERSET_version}}
    hostname: superset-worker-beat
    container_name: superset-worker-beat
    labels:
      com.platys.name: "superset"
    user: "root"
    environment:
      - DATABASE_DB=superset
      - DATABASE_HOST=superset-db
      - DATABASE_PASSWORD=superset
      - DATABASE_USER=superset
      - DATABASE_PORT=5432
      - DATABASE_DIALECT=postgresql
      - POSTGRES_DB=superset
      - POSTGRES_USER=superset
      - POSTGRES_PASSWORD=superset
      - PYTHONPATH=/app/pythonpath:/app/docker/pythonpath_dev
      - REDIS_HOST=superset-redis
      - REDIS_PORT=6379
      - FLASK_ENV=development
      - SUPERSET_ENV=development
      - SUPERSET_LOAD_EXAMPLES={{ 'yes' if (SUPERSET_provision_examples ) else 'no' }}
      - CYPRESS_CONFIG=false
      - SUPERSET_PORT=8088
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/superset:/app/docker
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  superset-db:
    image: postgres:10
    hostname: superset-db
    container_name: superset-db
    labels:
      com.platys.name: "superset"
    environment:
      - DATABASE_DB=superset
      - DATABASE_HOST=superset-db
      - DATABASE_PASSWORD=superset
      - DATABASE_USER=superset
      - DATABASE_PORT=5432
      - DATABASE_DIALECT=postgresql
      - POSTGRES_DB=superset
      - POSTGRES_USER=superset
      - POSTGRES_PASSWORD=superset
      - PYTHONPATH=/app/pythonpath:/app/docker/pythonpath_dev
      - REDIS_HOST=superset-redis
      - REDIS_PORT=6379
      - FLASK_ENV=development
      - SUPERSET_ENV=development
      - SUPERSET_LOAD_EXAMPLES={{ 'yes' if (SUPERSET_provision_examples ) else 'no' }}
      - CYPRESS_CONFIG=false
      - SUPERSET_PORT=8088
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  superset-redis:
    image: redis:3.2
    hostname: superset-redis
    container_name: superset-redis
    labels:
      com.platys.name: "superset"
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

{% endif %}   {#  SUPERSET_enable #}

{% if REDASH_enable | default(false) %}
  #  ================================== Redash ========================================== #
  redash-server:
    image: redash/redash:{{__REDASH_version}}
    hostname: redash-server
    container_name: redash-server
    labels:
      com.platys.name: "redash"
      com.platys.webui.title: "Redash UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28161"
    ports:
      - "28161:5000"
    command: server
    environment:
      REDASH_REDIS_URL: "redis://redash-redis:6379/0"
      REDASH_DATABASE_URL: "postgresql://postgres@redash-postgresql/postgres"
      REDASH_PASSWORD_LOGIN_ENABLED: "true"
      REDASH_RATELIMIT_ENABLED: "false"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  redash-scheduler:
    image: redash/redash:{{__REDASH_version}}
    hostname: redash-scheduler
    container_name: redash-scheduler
    labels:
      com.platys.name: "redash"
    command: scheduler
    environment:
      REDASH_LOG_LEVEL: "INFO"
      REDASH_REDIS_URL: "redis://redash-redis:6379/0"
      REDASH_DATABASE_URL: "postgresql://postgres@redash-postgresql/postgres"
      REDASH_PASSWORD_LOGIN_ENABLED: "true"
      REDASH_RATELIMIT_ENABLED: "false"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  redash-worker:
    image: redash/redash:{{__REDASH_version}}
    hostname: redash-worker
    container_name: redash-worker
    labels:
      com.platys.name: "redash"
    command: worker
    environment:
      REDASH_LOG_LEVEL: "INFO"
      REDASH_REDIS_URL: "redis://redash-redis:6379/0"
      REDASH_DATABASE_URL: "postgresql://postgres@redash-postgresql/postgres"
      REDASH_PASSWORD_LOGIN_ENABLED: "true"
      REDASH_RATELIMIT_ENABLED: "false"
      PYTHONUNBUFFERED: 0
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  redash-postgresql:
    image: postgres:9.5-alpine
    hostname: redash-postgresql
    container_name: redash-postgresql
    labels:
      com.platys.name: "redash"
    # The following turns the DB into less durable, but gains significant performance improvements for the tests run (x3
    # improvement on my personal machine). We should consider moving this into a dedicated Docker Compose configuration for
    # tests.
    ports:
      - "15432:5432"
    command: "postgres -c fsync=off -c full_page_writes=off -c synchronous_commit=OFF"
    environment:
      POSTGRES_HOST_AUTH_METHOD: "trust"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  redash-db-setup:
    image: redash/redash:{{__REDASH_version}}
    hostname: redash-db-setup
    container_name: redash-db-setup
    labels:
      com.platys.name: "redash"
    command: create_db
    depends_on:
      - redash-postgresql
    environment:
      REDASH_DATABASE_URL: "postgresql://postgres@redash-postgresql/postgres"

  redash-redis:
    image: redis:{{__REDIS_version}}
    hostname: redash-redis
    container_name: redash-redis
    labels:
      com.platys.name: "redash"
    ports:
      - 6385:6379
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  REDASH_enable #}

{% if SMASHING_enable | default(false) %}
  #  ================================== Smashing ========================================== #
  smashing:
    image: trivadis/smashing:{{__SMASHING_version}}
    hostname: smashing
    container_name: smashing
    labels:
      com.platys.name: "smashing"
      com.platys.webui.title: "Smashing UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28171"
    ports:
      - 28171:3030
    environment:
      WIDGETS: {{SMASHING_install_widgets}}
      GEMS: {{SMASHING_install_gems}}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if SMASHING_volume_map_dashboards %}
      - ./scripts/smashing/dashboards:/dashboards
    {% endif -%}   {#  SMASHING_volume_map_dashboards #}
    {% if SMASHING_volume_map_jobs %}
      - ./scripts/smashing/jobs:/jobs
    {% endif -%}   {#  SMASHING_volume_map_jobs #}
    {% if SMASHING_volume_map_widgets %}
      - ./plugins/smashing/widgets:/widgets
    {% endif -%}   {#  SMASHING_volume_map_widgets #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  SMASHING_enable #}

{% if TIPBOARD_enable | default(false) %}
  #  ================================== Tipboard Dashboard ========================================== #
  tipboard:
    image: trivadis/tipboard:{{__TIPBOARD_version}}
    hostname: tipboard
    container_name: tipboard
    labels:
      com.platys.name: "tipboard"
      com.platys.webui.title: "Tipboard UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28172"
    ports:
      - 28172:7272
    environment:
      TIPBOARD_redis_host: "'{{TIPBOARD_redis_host}}'"
      TIPBOARD_redis_port: {{TIPBOARD_redis_port}}
      {%if TIPBOARD_redis_password != '' %}
      TIPBOARD_redis_password: "'{{TIPBOARD_redis_password}}'"
      {% endif -%}   {#  TIPBOARD_redis_password #}
      TIPBOARD_redis_db: {{TIPBOARD_redis_db}}
      TIPBOARD_debug: "'False'"
      TIPBOARD_api_key: "'{{TIPBOARD_api_key}}'"
      TIPBOARD_host: "'localhost'"
      TIPBOARD_port: {{TIPBOARD_port}}
      TIPBOARD_project_name: "'{{TIPBOARD_project_name}}'"
      TIPBOARD_flipboard_interval: {{TIPBOARD_flipboard_interval}}
      {%if TIPBOARD_flipboard_sequence != '' %}
      TIPBOARD_flipboard_sequence: "'[{{TIPBOARD_flipboard_sequence}}]'"
      {% endif -%}   {#  TIPBOARD_flipboard_sqeuence #}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if TIPBOARD_volume_map_dashboards %}
      - ./scripts/tipboard/dashboards:/dashboards
    {% endif -%}   {#  TIPBOARD_volume_map_dashboards #}
      - ./plugins/tipboard/custom_tiles:/root/.tipboard/custom_tiles
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  TIPBOARD_enable #}

{% if CHARTBOARD_enable | default(false) %}
  #  ================================== Chartboard Dashboard ========================================== #
  chartboard:
    image: trivadis/chartboard:{{__CHARTBOARD_version}}
    hostname: chartboard
    container_name: chartboard
    labels:
      com.platys.name: "chartboard"
      com.platys.webui.title: "Chartboard UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28173"
    ports:
      - 28173:8080
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if CHARTBOARD_volume_map_dashboards %}
      - ./scripts/chartboard:/dashboards
    {% endif -%}   {#  TIPBOARD_volume_map_dashboards #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  CHARTBOARD_enable #}

{% if RETOOL_enable | default(false) %}
  #  ================================== Retool ========================================== #
  retool-api:
    image: tryretool/backend:{{__RETOOL_version}}
    hostname: retool-api
    container_name: retool-api
    labels:
      com.platys.name: "retool"
      com.platys.webui.title: "ReTool API"
      com.platys.webui.url: "http://${PUBLIC_IP}:3006"
    ports:
      - 3006:3000
    environment:
      SERVICE_TYPE: MAIN_BACKEND
      DB_CONNECTOR_HOST: http://retool-db-connector
      DB_CONNECTOR_PORT: 3002
      DB_SSH_CONNECTOR_HOST: http://retool-db-ssh-connector
      DB_SSH_CONNECTOR_PORT: 3002
      NODE_ENV: production
      JWT_SECRET: abc123!
      POSTGRES_DB: retooldb
      POSTGRES_USER: retool
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_PASSWORD: abc123!
      ENCRYPTION_KEY: abc123!
      LICENSE_KEY: LOCAL-ONLY-TRIAL
      COOKIE_INSECURE: "true"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/docker/wait-for-it.sh:/usr/src/app/wait-for-it.sh
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    command: bash -c "/usr/src/app/wait-for-it.sh postgresql:5432; ./docker_scripts/start_api.sh"
    restart: {{container_restart_policy}}

  retool-jobs-runner:
    image: tryretool/backend:{{__RETOOL_version}}
    hostname: retool-jobs-runner
    container_name: retool-jobs-runner
    labels:
      com.platys.name: "retool"
    environment:
      SERVICE_TYPE: JOBS_RUNNER
      NODE_ENV: production
      JWT_SECRET: abc123!
      POSTGRES_DB: retooldb
      POSTGRES_USER: retool
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_PASSWORD: abc123!
      ENCRYPTION_KEY: abc123!
      LICENSE_KEY: LOCAL-ONLY-TRIAL
      COOKIE_INSECURE: "true"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/docker/wait-for-it.sh:/usr/src/app/wait-for-it.sh
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    command: bash -c "chmod -R +x ./docker_scripts; sync; /usr/src/app/wait-for-it.sh postgresql:5432; ./docker_scripts/start_api.sh"
    restart: {{container_restart_policy}}

  retool-db-connector:
    image: tryretool/backend:{{__RETOOL_version}}
    hostname: retool-db-connector
    container_name: retool-db-connector
    labels:
      com.platys.name: "retool"
    environment:
      SERVICE_TYPE: DB_CONNECTOR_SERVICE
      NODE_ENV: production
      JWT_SECRET: abc123!
      POSTGRES_DB: retooldb
      POSTGRES_USER: retool
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_PASSWORD: abc123!
      ENCRYPTION_KEY: abc123!
      LICENSE_KEY: LOCAL-ONLY-TRIAL
      COOKIE_INSECURE: "true"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    command: bash -c "./retool_backend"
    restart: {{container_restart_policy}}

  retool-db-ssh-connector:
    image: tryretool/backend:{{__RETOOL_version}}
    hostname: retool-db-ssh-connector
    container_name: retool-db-ssh-connector
    labels:
      com.platys.name: "retool"
    environment:
      SERVICE_TYPE: DB_SSH_CONNECTOR_SERVICE
      NODE_ENV: production
      JWT_SECRET: abc123!
      POSTGRES_DB: retooldb
      POSTGRES_USER: retool
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_PASSWORD: abc123!
      ENCRYPTION_KEY: abc123!
      LICENSE_KEY: LOCAL-ONLY-TRIAL
      COOKIE_INSECURE: "true"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    command: bash -c "./docker_scripts/generate_key_pair.sh; ./retool_backend"
    restart: {{container_restart_policy}}
{% endif %}   {#  RETOOL_enable #}

{% if MEMCACHED_enable | default(false) %}
  #  ================================== Memcached ========================================== #
  memchached:
    image: memcached:{{__MEMCACHED_version}}
    hostname: memcached
    container_name: memcached
    labels:
      com.platys.name: "memcached"
    ports:
      - 11211:11211/tcp
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  MEMCACHED_enable #}

{% if REDIS_enable | default(false) %}
  #  ================================== Redis ========================================== #
  redis-1:
    image: bitnami/redis:{{__REDIS_version}}
    hostname: redis-1
    container_name: redis-1
    labels:
      com.platys.name: "redis"
    ports:
      - 6379:6379
    environment:
      - REDIS_REPLICATION_MODE=master
      - ALLOW_EMPTY_PASSWORD={{REDIS_allow_empty_password | default(omit) }}
    {% if REDIS_disable_commands is defined and REDIS_disable_commands | default(false) %}
      - DISABLE_COMMANDS={{REDIS_disable_commands | default(omit) }}
    {% endif -%}   {#  REDIS_disable_commands #}
      - REDIS_PASSWORD={{REDIS_password | default(omit) }}
      - REDIS_AOF_ENABLED={{REDIS_aof_enabled | default(omit) }}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if REDIS_volume_map_data %}
      - "./container-volume/redis/data:/bitnami/redis/data"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% for num in range(REDIS_replicasets| default(0) ) %}
    {% set external_port = 6380 + loop.index - 1 %}
  redis-replica-{{loop.index}}:
    image: bitnami/redis:{{__REDIS_version}}
    hostname: redis-replica-{{loop.index}}
    container_name: redis-replica-{{loop.index}}
    labels:
      com.platys.name: "redis"
    ports:
      - {{external_port}}:6379
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis-1
      - REDIS_MASTER_PORT_NUMBER=6379
      - REDIS_MASTER_PASSWORD={{REDIS_password | default(omit) }}
      - ALLOW_EMPTY_PASSWORD={{REDIS_allow_empty_password | default(omit) }}
      - DISABLE_COMMANDS={{REDIS_disable_commands | default(omit) }}
      - REDIS_PASSWORD={{REDIS_password | default(omit) }}
      - REDIS_AOF_ENABLED={{REDIS_aof_enabled | default(omit) }}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if REDIS_volume_map_data %}
      - "./container-volume/redis/data/redis-replica-{{loop.index}}:/bitnami/redis/data"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}

  {% if REDIS_INSIGHT_enable | default(false) %}
  redis-insight:
    image: redislabs/redisinsight:{{__REDIS_INSIGHT_version}}
    container_name: redis-insight
    hostname: redis-insight
    labels:
      com.platys.name: "redis-insight"
      com.platys.webui.title: "Redis Insight UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28174"
    ports:
      - "28174:8001"
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  REDIS_INSIGHT_enable #}

  {% if REDIS_COMMANDER_enable | default(false) %}
  redis-commander:
    image: rediscommander/redis-commander:{{__REDIS_COMMANDER_version}}
    container_name: redis-commander
    hostname: redis-commander
    labels:
      com.platys.name: "redis-commander"
      com.platys.webui.title: "Redis Commander UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28119"
    ports:
      - "28119:8081"
    environment:
      - REDIS_HOST=redis-1
      - REDIS_PORT=6379
      - REDIS_PASSWORD='abc123!'
      - REDIS_DB=0
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  REDIS_COMMANDER_enable #}
{% endif %}   {#  REDIS_enable #}

{% if CASSANDRA_enable | default(false) %}
  #  ================================== Cassandra ========================================== #
  {% for num in range(CASSANDRA_nodes| default(1) ) %}
    {% set external_port = 29042 + loop.index - 1 %}
    {% set external_jmx_port = 7199 + loop.index - 1 %}
    {% set external_thrift_port = 9160 + loop.index - 1 %}
  cassandra-{{loop.index}}:
    image: cassandra:{{__CASSANDRA_version}}
    container_name: cassandra-{{loop.index}}
    hostname: cassandra-{{loop.index}}
    labels:
      com.platys.name: "cassandra"
    ports:
      - {{external_port}}:9042
      - {{external_jmx_port}}:7199
      - {{external_thrift_port}}:9160
    environment:
      - CASSANDRA_CLUSTER_NAME="Test Cluster"
      - CASSANDRA_DC=se1
    {% if loop.index > 1 %}
      - CASSANDRA_SEEDS=cassandra-1
    {% endif %}
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_NUM_TOKENS=128
      - LOCAL_JMX=no
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/cassandra/jmxremote.access:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/management/jmxremote.access
      - ./conf/cassandra/jmxremote.password:/etc/cassandra/jmxremote.password
    {% if CASSANDRA_volume_map_data %}
      - "./container-volume/cassandra/data/cassandra-{{loop.index}}:/var/lib/cassandra"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}

  cassandra-web:
    image: trivadis/cassandra-web
    container_name: cassandra-web
    hostname: cassandra-web
    labels:
      com.platys.name: "cassandra-web"
      com.platys.webui.title: "Cassandra Web UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28120"
    ports:
      - "28120:3000"
    environment:
      - CASSANDRA_HOSTNAME=cassandra-1
      - CASSANDRA_PORT=9042
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% if REAPER_enable | default(false) %}
  reaper:
    image: thelastpickle/cassandra-reaper:{{__REAPER_version}}
    container_name: reaper
    hostname: reaper
    labels:
      com.platys.name: "cassandra"
      com.platys.webui.title: "Reaper Application UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28232/webui"
    ports:
      - "28232:8080"
      - "28233:8081"
    environment:
      - REAPER_STORAGE_TYPE=memory
      - REAPER_AUTO_SCHEDULING_ENABLED=true
      - REAPER_AUTO_SCHEDULING_INITIAL_DELAY_PERIOD="PT15S"
      - REAPER_AUTO_SCHEDULING_TIME_BEFORE_FIRST_SCHEDULE="PT1M"
      - REAPER_AUTO_SCHEDULING_PERIOD_BETWEEN_POLLS="PT1M"
      - REAPER_JMX_AUTH_USERNAME=reaper
      - REAPER_JMX_AUTH_PASSWORD=abc123!
      - CRYPTO_SYSTEM_PROPERTY_SECRET="CRYPTO_SECRET"
      - CRYPTO_SECRET="secret"
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {% endif %}   {#  REAPER_enable #}
{% endif %}   {#  CASSANDRA_enable #}

{% if DATASTAX_enable | default(false) %}
  #  ================================== DataStax Enterprise (DSE) ========================================== #
  {% for num in range(DATASTAX_nodes| default(1) ) %}
    {% set external_port = 9042 + loop.index - 1 %}

  dse-{{loop.index}}: # DataStax Enterprise Database
    image: datastax/dse-server:{{__DATASTAX_version}}
    hostname: dse-{{loop.index}}
    labels:
      com.platys.name: "datastax"
    container_name: dse-{{loop.index}}
    command: [ -s -k ] # Run with Search and Spark capabilities enabled
  {% if loop.index == 1 %}
    ports:
      - "{{external_port}}:9042" # Exposes DSE port
  {% endif %}
    environment:
      DS_LICENSE: accept # Accept licence on start
      SPARK_SCALA_VERSION: "2.11"
      OPSCENTER_IP: dse-opscenter
    {% if loop.index > 1 %}
      SEEDS: "dse-1"
    {% endif %}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
#      - "./dse.yaml:/opt/dse/resources/dse/conf/dse.yaml"
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    cap_add:
      - IPC_LOCK # Allow DSE to lock memory with mlock
    ulimits:
      memlock: -1
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}

  dse-studio:  # Datastax Studio provides convenient web interface to work directly with the Apache Cassandra or DataStax Enterprise
    image: datastax/dse-studio:6.7.0
    container_name: dse-studio
    hostname: dse-studio
    labels:
      com.platys.name: "datastax-studio"
      com.platys.webui.title: "DataStax Studio Web UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28121"
    ports:
      - "28121:9091" # Exposes port to be available externally
    environment:
      DS_LICENSE: accept
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  dse-opscenter:
    image: "datastax/dse-opscenter"
    container_name: dse-opscenter
    hostname: dse-opscenter
    labels:
      com.platys.name: "datastax"
      com.platys.webui.title: "DataStax OpsCenter Web UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28122"
    ports:
      - 28122:8888
    environment:
      DS_LICENSE: accept
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

{% endif %}   {#  DATASTAX_enable #}

{% if MONGO_enable | default(false) %}
  #  ================================== MongoDB ========================================== #
  {% for num in range(MONGO_nodes| default(1) ) %}
    {% set external_port = 27017 + loop.index - 1 %}
  mongo-{{loop.index}}:
    image: mongo:{{__MONGO_version}}
    container_name: mongo-{{loop.index}}
    hostname: mongo-{{loop.index}}
    labels:
      com.platys.name: "mongodb"
    ports:
      - {{external_port}}:27017
    environment:
      - MONGO_INITDB_DATABASE=sample
      - MONGO_INITDB_USERNAME=admin
      - MONGO_INITDB_PASSWORD=admin
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      # seeding scripts
      - ./conf/mongo-entrypoint:/docker-entrypoint-initdb.d
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}

  mongo-express:
    image: mongo-express:{{__MONGO_EXPRESS_version}}
    container_name: mongo-express
    hostname: mongo-express
    labels:
      com.platys.name: "mongo-express"
      com.platys.webui.title: "Mongo Express UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28123"
    ports:
      - 28123:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo-1
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  admin-mongo:
    image: adicom/admin-mongo:{{__MONGO_ADMIN_version}}
    container_name: admin-mongo
    hostname: admin-mongo
    labels:
      com.platys.name: "admin-mongo"
      com.platys.webui.title: "Admin Mongo UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28124"
    ports:
      - 28124:1234
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  MONGO_enable #}

{% if SOLR_enable | default(false) %}
  #  ================================== SolR ========================================== #
  solr:
    image: solr:{{__SOLR_version}}
    container_name: solr
    hostname: solr
    labels:
      com.platys.name: "solr"
      com.platys.webui.title: "SolR UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8983"
    ports:
      - "8983:8983"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  SOLR_enable #}

{% if ELASTICSEARCH_enable | default(false) %}
  #  ================================== Elasticsearch ========================================== #
  elasticsearch-1:
    image: {{ 'elasticsearch' if (ELASTICSEARCH_edition | lower) == 'oss' else 'docker.elastic.co/elasticsearch/elasticsearch' }}:{{__ELASTICSEARCH_version}}
    hostname: elasticsearch-1
    container_name: elasticsearch-1
    labels:
      com.platys.name: "elasticsearch"
      com.platys.restapi.title: "Elasticsearch REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:9200"
      com.platys.manual.step.msgs: "sudo sysctl -w vm.max_map_count=262144"
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: "single-node"
      xpack.security.enabled: "false"
      xpack.monitoring.enabled: "false"
      http.cors.enabled: "true"
      http.cors.allow-origin: "http://${DOCKER_HOST_IP}:28275,http://${PUBLIC_IP}:28275,http://dejavu:1358,http://dataplatform:28125,http://dataplatform:28125,http://${PUBLIC_IP}:28125,http://${DOCKER_HOST_IP}:28125,http://127.0.0.1:1358"
      http.cors.allow-headers: "X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
      http.cors.allow-credentials: "true"
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ELASTICSEARCH_enable #}

{% if DEJAVU_enable | default(false) %}
  dejavu:
    image: appbaseio/dejavu:{{__DEJAVU_version}}
    container_name: dejavu
    hostname: dejuvu
    labels:
      com.platys.name: "dejavu"
      com.platys.webui.title: "Elasticsearch Dejavu UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28125"
    ports:
      - "28125:1358"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ELASTICSEARCH_enable #}

{% if CEREBRO_enable | default(false) %}
  cerebro:
    image: lmenezes/cerebro:{{__CEREBRO_version}}
    container_name: cerebro
    hostname: cerebro
    labels:
      com.platys.name: "cerbero"
      com.platys.webui.title: "Elasticsearch Cerbero UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28126"
    ports:
      - "28126:9000"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  CEREBRO_enable #}

{% if ELASTICHQ_enable | default(false) %}
  elastichq:
    image: elastichq/elasticsearch-hq:{{__ELASTICSEARCHHQ_version}}
    container_name: elastichq
    hostname: elatichq
    labels:
      com.platys.name: "elastichq"
      com.platys.webui.title: "ElasticHQ UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28127"
    ports:
      - "28127:5000"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ELASTICHQ_enable #}

{% if ELASTICVUE_enable | default(false) %}
  #  ================================== ElasticVue ========================================== #
  elasticvue:
    image: cars10/elasticvue:{{__ELASTICVUE_version}}
    container_name: elasticvue
    hostname: elasticvue
    labels:
      com.platys.name: "elasticvue"
      com.platys.webui.title: "ElasticVue UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28275"
    ports:
      - "28275:8080"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ELASTICVUE_enable #}

{% if KIBANA_enable | default(false) %}
  #  ================================== Kibana ========================================== #
  kibana:
    image: {{ 'kibana' if (KIBANA_edition | lower) == 'oss' else 'docker.elastic.co/kibana/kibana' }}:{{__KIBANA_version}}
    hostname: kibana
    container_name: kibana
    labels:
      com.platys.name: "kibana"
      com.platys.webui.title: "Kibana UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:5601"
    depends_on:
      - elasticsearch-1
    ports:
      - "5601:5601"
    environment:
      discovery.type: "single-node"
      ELASTICSEARCH_HOSTS: http://elasticsearch-1:9200
      SERVER_HOST: "0.0.0.0"
      SERVER_NAME: "kibana"
      XPACK_GRAPH_enabled: "false"
      XPACK_MONITORING_enabled: "false"
      XPACK_REPORTING_enabled: "false"
      XPACK_SECURITY_enabled: "false"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: [ "/bin/bash", "-c", "/usr/share/kibana/bin/kibana-plugin remove x-pack; /usr/local/bin/kibana-docker" ]
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KIBANA_enable #}
{# #}

{% if OPENSEARCH_enable | default(false) %}
  #  ================================== OpenSearch ========================================== #
  {% set ns = namespace(opensearchHosts='') %}
  {% for num in range(OPENSEARCH_nodes | default(1) ) %}
    {% if loop.first %}
        {% set ns.opensearchHosts = 'opensearch-' ~ loop.index %}
    {% else %}
        {% set ns.opensearchHosts = ns.opensearchHosts ~ ',' ~ 'opensearch-' ~ loop.index %}
    {% endif %}
  {% endfor %}
  {% for num in range(OPENSEARCH_nodes | default(1) ) %}
    {% set external_port = 29200 + loop.index - 1 %}
    {% set external_perf_port = 29600 + loop.index - 1 %}
  opensearch-{{loop.index}}:
    image: opensearchproject/opensearch:{{__OPENSEARCH_version}}
    hostname: opensearch-{{loop.index}}
    container_name: opensearch-{{loop.index}}
    labels:
      com.platys.name: "opensearch"
      com.platys.restapi.title: "OpenSearch REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:{{external_port}}"
      com.platys.manual.step.msgs: "sudo sysctl -w vm.max_map_count=262144"
    ports:
      - "{{external_port}}:9200"
      - "{{external_perf_port}}:9600"
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-{{loop.index}}
      {% if OPENSEARCH_nodes > 1 %}
      - discovery.seed_hosts={{ns.opensearchHosts}}
      - cluster.initial_master_nodes={{ns.opensearchHosts}}
      {% else %}
      - discovery.type=single-node
      - "DISABLE_INSTALL_DEMO_CONFIG=true"   # disables execution of install_demo_configuration.sh bundled with security plugin, which installs demo certificates and security configurations to OpenSearch
      - "DISABLE_SECURITY_PLUGIN=true"   #  disables security plugin entirely in OpenSearch by setting plugins.security.disabled: true in opensearch.yml
      {% endif %}
      - "bootstrap.memory_lock=true" # along with the memlock settings below, disables swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
      - "http.cors.enabled=true"
      - http.cors.allow-origin="http://${DOCKER_HOST_IP}:28275,http://${PUBLIC_IP}:28275,http://dejavu:1358,http://dataplatform:28125,http://dataplatform:28125,http://${PUBLIC_IP}:28125,http://${DOCKER_HOST_IP}:28125,http://127.0.0.1:1358"
      - http.cors.allow-headers="X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    volumes:
      - ./data-transfer:/data-transfer
    {% if OPENSEARCH_volume_map_data %}
      - ./container-volumes/opensearch-{{loop.index}}/data:/usr/share/opensearch/data
    {% endif -%}   {#  OPENSEARCH_volume_map_data #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}
{% endif %}   {#  OPENSEARCH_enable #}

{% if OPENSEARCH_DASHBOARDS_enable | default(false) %}
  #  ================================== OpenSearch Dashboards ========================================== #
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:{{__OPENSEARCH_DASHBOARDS_version}}
    hostname: opensearch-dashboards
    container_name: opensearch-dashboards
    labels:
      com.platys.name: "opensearch-dashboards"
      com.platys.webui.title: "OpenSearch Dashboards"
      com.platys.webui.url: "http://${PUBLIC_IP}:5603"
    ports:
      - 5603:5601
    expose:
      - "5601"
    environment:
      {% if OPENSEARCH_nodes > 1 %}
      - 'OPENSEARCH_HOSTS=["https://opensearch-1:9200","https://opensearch-2:9200"]'
      {% else %}
      - 'OPENSEARCH_HOSTS=["http://opensearch-1:9200"]'
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"   # disables security dashboards plugin in OpenSearch Dashboards
      {% endif %}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  OPENSEARCH_DASHBOARDS_enable #}

{# #}
{% if NEO4J_enable | default(false) %}
  #  ================================== Neo4J ========================================== #
  neo4j-1:
    image: neo4j:{{__NEO4J_version}}{{ '-enterprise' if (NEO4J_edition | lower) == 'enterprise'}}
    hostname: neo4j-1
    container_name: neo4j-1
    labels:
      com.platys.name: "neo4j"
      com.platys.webui.title: "Neo4J UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:7474"
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
    {% if (NEO4J_edition | lower) == 'enterprise'  %}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    {% endif -%}   {#  use_timezone #}
      - NEO4J_AUTH=neo4j/{{admin_password}}
      - NEO4JLABS_PLUGINS=[{{NEO4J_plugins.split(",") | map("to_json") | join(',')}}]
    {% if NEO4J_dbms_memory_pagecache_size is defined and NEO4J_dbms_memory_pagecache_size | length %}
      - NEO4J_dbms_memory_pagecache_size={{NEO4J_dbms_memory_pagecache_size}}
    {% endif -%}   {#  NEO4J_dbms_memory_pagecache_size #}
    {% if NEO4J_dbms_memory_pagecache_size is defined and NEO4J_dbms_memory_pagecache_size | length %}
      - NEO4J_dbms_memory_heap_max__size={{NEO4J_dbms_memory_pagecache_size}}
    {% endif -%}   {#  NEO4J_dbms_memory_pagecache_size #}
      - NEO4J_dbms_logs_debug_level={{NEO4J_dbms_logs_debug_level}}
      - EXTENSION_SCRIPT={{NEO4J_extension_script}}
    {% if KAFKA_enable or external['KAFKA_enable'] | default(false) %}
      - NEO4J_kafka_bootstrap_servers="{{ns.bootstrapServers}}"
      - NEO4J_kafka_acks={{NEO4J_kafka_acks}}
      - NEO4J_kafka_streams_log_compaction_strategy='compact'
    {% if NEO4J_kafka_transactional_id is defined and NEO4J_kafka_transactional_id | length %}
      - NEO4J_kafka_transactional_id='{{NEO4J_kafka_transactional_id}}'
    {% endif -%}   {#  NEO4J_dbms_memory_pagecache_size #}
    {% if NEO4J_streams_enabled is defined and NEO4J_streams_enabledj | length %}
      - NEO4J_streams_source_enabled='{{NEO4J_streams_enabledj}}'
    {% endif -%}   {#  NEO4J_streams_enabled #}
      - NEO4J_streams_source_topic_nodes_{{NEO4J_topic_name}}={{NEO4J_streams_source_topic_nodes}}
      - NEO4J_streams_source_topic_relationships_{{NEO4J_topic_name}}={{NEO4J_streams_source_topic_relationships}}
      - NEO4J_streams_source_schema_polling_interval=10000
    {% endif -%}   {#  KAFKA_enable #}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - "./init/neo4j:/init"
    {% if not ( NEO4J_plugins is defined and NEO4J_plugins | length) %}
      - "./plugins/neo4j/:/plugins:rw"
    {% endif %}
    {% if NEO4J_volume_map_data %}
      - "./container-volume/neo4j/data:/data"
    {% endif %}
    {% if NEO4J_volume_map_logs %}
      - "./container-volume/neo4j/logs:/logs"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  NEO4J_enable #}

{% if QUINE_enable | default(false) %}
  #  ================================== Quine ========================================== #
  quine-1:
    image: neo4j:{{__QUINE_version}}
    hostname: quine-1
    container_name: quine-1
    labels:
      com.platys.name: "quine"
      com.platys.webui.title: "Quine UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28268"
    ports:
      - "28268:8080"
    environment:
      - DUMMY=xb
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  QUINE_enable #}

{% if DGRAPH_enable | default(false) %}
  #  ================================== Dgraph ========================================== #
  dgraph-1:
    image: dgraph/standalone:{{__DGRAPH_version}}
    hostname: dgraph-1
    container_name: dgraph-1
    labels:
      com.platys.name: "dgraph"
      com.platys.webui.title: "Dgraph Ratel UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28182"
    ports:
      - "28180:8080"
      - "28181:9080"
      - "28182:8000"
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  DGRAPH_enable #}

{% if STARDOG_enable | default(false) %}
  #  ================================== Stardog ========================================== #
  stardog-1:
    image: stardog/stardog:{{__STARDOG_version}}
    hostname: stardog-1
    container_name: stardog-1
    labels:
      com.platys.name: "stardog"
      com.platys.webui.title: "Stardog API"
      com.platys.webui.url: "http://${PUBLIC_IP}:5820"
    ports:
      - "5820:5820"
    environment:
      STARDOG_SERVER_JAVA_ARGS: "-Djava.io.tmpdir=/var/opt/tmp -Xms4g -Xmx4g -XX:MaxDirectMemorySize=8g"
      STARDOG_EXT: "/var/opt/stardog-ext"
    {%if use_timezone | default(false) %}
      TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./license/stardog-license-key.bin:/var/opt/stardog/stardog-license-key.bin
      - "./plugins/stardog/:/var/opt/stardog-ext"
    {% if STARDOG_volume_map_data %}
      - "./container-volume/stardog/data:/var/opt/stardog"
      - "./container-volume/stardog/tmp:/var/opt/tmp"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% if STARDOG_STUDIO_enable | default(false) %}
  stardog-studio:
    image: stardog/stardog-studio:{{__STARDOG_STUDIO_version}}
    hostname: stardog-studio
    container_name: stardog-studio
    labels:
      com.platys.name: "stardog-studio"
      com.platys.webui.title: "Stardog Studio UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28170"
    ports:
      - "28170:80"
    {%if use_timezone | default(false) %}
    environment:
      TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  STARDOG_STUDIO_enable #}
{% endif %}   {#  STARDOG_enable #}

{% if GRAPHDB_enable | default(false) %}
  #  ================================== GraphDB ========================================== #
  graphdb-1:
  {% if (GRAPHDB_edition | lower) == 'free'  %}
    image: khaller/graphdb-free:{{__GRAPHDB_version}}
  {% elif (GRAPHDB_edition | lower) == 'se' %}
    image: ontotext/graphdb:{{__GRAPHDB_version}}-se
  {% elif (GRAPHDB_edition | lower) == 'ee' %}
    image: ontotext/graphdb:{{__GRAPHDB_version}}-ee
  {% endif -%}   {#  GRAPHDB_enable #}

    hostname: graphdb-1
    container_name: graphdb-1
    labels:
      com.platys.name: "graphdb"
      com.platys.webui.title: "GraphDBs UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:17200"
    ports:
      - "17200:7200"
    environment:
      GDB_HEAP_SIZE: "{{GRAPHDB_heap_size}}"
      GDB_JAVA_OPTS: >-
        -Xmx2g -Xms2g
        -Dgraphdb.home=/opt/graphdb
        -Dgraphdb.workbench.importDirectory={{GRAPHDB_workbench_import_dir}}
        -Dgraphdb.workbench.cors.enable=true
        -Denable-context-index=true
        -Dentity-pool-implementation=transactional
        -Dhealth.max.query.time.seconds=60
        -Dgraphdb.append.request.id.headers=true
        -Dreuse.vars.in.subselects=true
    {%if use_timezone | default(false) %}
      TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./init/graphdb:/repository.init/
    {% if GRAPHDB_volume_map_data %}
      - "./container-volume/graphdb/data:/opt/graphdb/data"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

{% endif %}   {#  GRAPHDB_enable #}

{% if INFLUXDB_enable | default(false) %}
  #  ================================== InfluxData InfluxDB ========================================== #
  influxdb:
    image: influxdb:{{__INFLUXDB_version}}
    container_name: influxdb
    hostname: influxdb
    labels:
      com.platys.name: "influxdb"
      com.platys.restapi.title: "InfluxDB Rest API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:8086"
    ports:
      - "8086:8086"
    {%if use_timezone | default(false) %}
    evironment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/influxdata/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf
    {% if INFLUXDB_volume_map_data %}
      - "./container-volume/influxdata/influxdb:/var/lib/influxdb"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  influxdb-ui:
    image: timeseriesadmin/timeseriesadmin:{{__INFLUXDB_UI_version}}
    container_name: influxdb-ui
    hostname: influxdb-ui
    labels:
      com.platys.name: "influxdb"
      com.platys.webui.title: "InfluxDB UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28128"
    ports:
      - "28128:80"
    {%if use_timezone | default(false) %}
    evironment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  INFLUXDB_enable #}

{% if INFLUXDB_CHRONOGRAF_enable | default(false) %}
  #  ================================== InfluxData Chronograf ========================================== #
  chronograf:
    image: chronograf:{{__CHRONOGRAF_version}}
    hostname: chronograf
    container_name: chronograf
    labels:
      com.platys.name: "chronograf"
      com.platys.webui.title: "Chronograf UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28129"
    depends_on:
      - influxdb
    ports:
      - "28129:8888"
    environment:
      RESOURCES_PATH: "/usr/share/chronograf/resources"
      PORT: 8888
      HOST: chronograf
      INFLUXDB_URL: "http://influxdb:8086"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if INFLUXDB_CHRONOGRAF_volume_map_data %}
      - "./container-volume/influxdata/chronograf:/var/lib/chronograf"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  INFLUXDB_CHRONOGRAF_enable #}

{% if INFLUXDB_KAPACITOR_enable | default(false) %}
  #  ================================== InfluxData Kapacitor ========================================== #
  kapacitor:
    image: kapacitor:{{__KAPACITOR_version}}
    hostname: kapacitor
    container_name: kapacitor
    labels:
      com.platys.name: "kapacitor"
      com.platys.restapi.title: "Kapacitor REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28130/kapacitor/v1"
    ports:
      - "28130:9092"
    environment:
      KAPACITOR_HOSTNAME: kapacitor
      KAPACITOR_DATA_DIR: "var/lib/kapacitor"
      KAPACITOR_LOGGING_LEVEL: INFO
      KAPACITOR_INFLUXDB_0_URLS_0: http://influxdb:8086
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if INFLUXDB_KAPACITOR_volume_map_data %}
      - "./container-volume/influxdata/kapacitor:/var/lib/kapacitor"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# INFLUXDB_KAPACITOR_enable #}

{% if INFLUXDB_TELEGRAF_enable | default(false) %}
  #  ================================== InfluxData Telegraf ========================================== #
  telegraf:
    image: telegraf:{{__TELEGRAF_version}}
    container_name: telegraf
    hostname: telegraf
    labels:
      com.platys.name: "telegraf"
    environment:
      HOSTNAME: telegraf
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/influxdata/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
      # Mount for Docker API access
      - /var/run/docker.sock:/var/run/docker.sock
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  INFLUXDB_CHRONOGRAF_enable #}

{% if INFLUXDB2_enable | default(false) %}
  #  ================================== InfluxDB 2 ========================================== #
  influxdb2:
    image: influxdb:{{__INFLUXDB2_version}}
    hostname: influxdb2
    container_name: influxdb2
    labels:
      com.platys.name: "influxdb2"
      com.platys.webui.title: "InfluxDB 2.0 UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:19999"
      com.platys.restapi.title: "InfluxDB 2.0 Rest API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:19999/api/v2"
    ports:
      - "19999:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: {{INFLUXDB2_username}}
      DOCKER_INFLUXDB_INIT_PASSWORD: {{INFLUXDB2_password}}
      DOCKER_INFLUXDB_INIT_ORG: {{INFLUXDB2_org}}
      DOCKER_INFLUXDB_INIT_BUCKET: {{INFLUXDB2_bucket}}
      DOCKER_INFLUXDB_INIT_RETENTION: 1w
    {% if INFLUXDB2_admin_token is defined and INFLUXDB2_admin_token | length %}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: {{INFLUXDB2_admin_token}}
    {% endif -%}   {#  DOCKER_INFLUXDB_INIT_ADMIN_TOKEN #}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if INFLUXDB2_volume_map_config %}
      - "./conf/influxdb2/config.yml:/etc/influxdb2/config.yml"
    {% endif %}
    {% if INFLUXDB2_volume_map_data %}
      - "./container-volume/influxdb2:/var/lib/influxdb2"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: "--reporting-disabled"
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# INFLUXDB2_enable #}

{% if QUESTDB_enable | default(false) %}
  #  ================================== QuestDB Timeseries ========================================== #
  questdb:
    image: questdb/questdb:{{__QUESTDB_version}}
    container_name: questdb
    hostname: questdb
    labels:
      com.platys.name: "questdb"
      com.platys.webui.title: "QuestDB Web Console"
      com.platys.webui.url: "http://${PUBLIC_IP}:28226"
      com.platys.restapi.title: "QuestDB Rest API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28226"
    ports:
      - "28226:9000"
      - "8812:8812"
      - "9009:9009"
    {%if use_timezone | default(false) %}
    evironment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if QUESTDB_volume_map_data %}
      - "./container-volume/questdb/data:/root/.questdb/db"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  QUESTDB_enable #}

{% if KUDU_enable | default(false) %}
  #  ================================== Apache Kudu ========================================== #
  kudu-master-1:
    image: apache/kudu:{{__KUDU_version}}
    hostname: kudu-master-1
    container_name: kudu-master-1
    labels:
      com.platys.name: "kudu"
    ports:
      - "7051:7051"
      - "8051:8051"
    command: ["master"]
    environment:
      - KUDU_MASTERS=kudu-master-1,kudu-master-2,kudu-master-3
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  kudu-master-2:
    image: apache/kudu:{{__KUDU_version}}
    hostname: kudu-master-2
    container_name: kudu-master-2
    labels:
      com.platys.name: "kudu"
    ports:
      - "7051"
      - "8051"
    command: ["master"]
    environment:
      - KUDU_MASTERS=kudu-master-1,kudu-master-2,kudu-master-3
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  kudu-master-3:
    image: apache/kudu:{{__KUDU_version}}
    hostname: kudu-master-3
    container_name: kudu-master-3
    labels:
      com.platys.name: "kudu"
    ports:
      - "7051"
      - "8051"
    command: ["master"]
    environment:
      - KUDU_MASTERS=kudu-master-1,kudu-master-2,kudu-master-3
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  kudu-tserver-1:
    image: apache/kudu:latest
    hostname: kudu-tserver-1
    container_name: kudu-tserver-1
    labels:
      com.platys.name: "kudu"
    depends_on:
      - kudu-master-1
      - kudu-master-2
      - kudu-master-3
    ports:
      - "7050:7050"
      - "8050:8050"
    command: ["tserver"]
    environment:
      - KUDU_MASTERS=kudu-master-1,kudu-master-2,kudu-master-3
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# KUDU_enable #}

{% if DRUID_enable | default(false) %}
  #  ================================== Druid ========================================== #
  {% if (DRUID_edition| lower) == 'oss-sandbox' | default(false) %}
  druid-sandbox:
    image: fokkodriesprong/docker-druid:{{__DRUID_version}}
    hostname: druid-sandbox
    container_name: druid-sandbox
    labels:
      com.platys.name: "druid"
      com.platys.webui.title: "Druid Console UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28150"
    ports:
      - "28150:8888"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {# DRUID_edition #}

  {% if (DRUID_edition| lower) == 'oss-cluster' | default(false) %}
  druid-coordinator:
    image: apache/druid:{{__DRUID_version}}
    hostname: druid-coordinator
    container_name: druid-coordinator
    labels:
      com.platys.name: "druid"
    depends_on:
      - zookeeper{{dataCenter}}-1
      - druid-postgres
    ports:
      - "28146:8081"
    env_file:
      - ./conf/druid/druid.env
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./container-volume/druid/storage:/opt/data
#      - coordinator_var:/opt/druid/var
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command:
      - coordinator
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  druid-broker-1:
    image: apache/druid:{{__DRUID_version}}
    hostname: druid-broker-1
    container_name: druid-broker-1
    labels:
      com.platys.name: "druid"
    depends_on:
      - zookeeper{{dataCenter}}-1
      - druid-postgres
      - druid-coordinator
    ports:
      - "28147:8082"
    env_file:
      - ./conf/druid/druid.env
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command:
      - broker
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  druid-historical-1:
    image: apache/druid:{{__DRUID_version}}
    hostname: druid-historical-1
    container_name: druid-historical-1
    labels:
      com.platys.name: "druid"
    volumes:
      - ./container-volume/druid/storage:/opt/data
#      - historical_var:/opt/druid/var
    depends_on:
      - zookeeper{{dataCenter}}-1
      - druid-postgres
      - druid-coordinator
    ports:
      - "28148:8083"
    env_file:
      - ./conf/druid/druid.env
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command:
      - historical
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  druid-middlemanager:
    image: apache/druid:{{__DRUID_version}}
    container_name: druid-middlemanager
    labels:
      com.platys.name: "druid"
    depends_on:
      - zookeeper{{dataCenter}}-1
      - druid-postgres
      - druid-coordinator
    ports:
      - "28149:8091"
    env_file:
      - ./conf/druid/druid.env
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./container-volume/druid/storage:/opt/data
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command:
      - middleManager
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  druid-router:
    image: apache/druid:{{__DRUID_version}}
    container_name: druid-router
    labels:
      com.platys.name: "druid"
      com.platys.webui.title: "Druid Console UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28150/graph"
    depends_on:
      - zookeeper{{dataCenter}}-1
      - druid-postgres
      - druid-coordinator
    ports:
      - "28150:8888"
    env_file:
      - ./conf/druid/druid.env
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command:
      - router
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  druid-postgres:
    image: postgres:latest
    hostname: druid-postgres
    container_name: druid-postgres
    labels:
      com.platys.name: "druid"
    environment:
      - POSTGRES_PASSWORD=abc123!
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./container-volume/druid/postgresql:/var/lib/postgresql/data
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {# DRUID_edition #}
{% endif %}   {# DRUID_enable #}

{% if PINOT_enable | default(false) %}
  #  ================================== Pinot ========================================== #
  pinot-controller:
    image: apachepinot/pinot:{{__PINOT_version}}
    hostname: pinot-controller
    container_name: pinot-controller
    labels:
      com.platys.name: "pinot"
      com.platys.webui.title: "Pinot Console UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28210"
    ports:
      - "28210:9000"
    volumes:
      - ./data-transfer:/data-transfer
    {% if PINOT_volume_map_data %}
      - ./container-volume/pinot/controller:/tmp/data/controller
    {% endif -%}   {#  PINOT_volume_map_data #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: StartController -zkAddress zookeeper-1:2181
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  pinot-broker-1:
    image: apachepinot/pinot:{{__PINOT_version}}
    hostname: pinot-broker-1
    container_name: pinot-broker-1
    labels:
      com.platys.name: "pinot"
    depends_on:
      - pinot-controller
    ports:
      - "28211:8099"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: StartBroker -zkAddress zookeeper-1:2181
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% for num in range(PINOT_servers | default(1) ) %}
  pinot-server-{{loop.index}}:
    image: apachepinot/pinot:{{__PINOT_version}}
    hostname: pinot-server-{{loop.index}}
    container_name: pinot-server-{{loop.index}}
    labels:
      com.platys.name: "pinot"
    depends_on:
      - pinot-controller
#    ports:
#      - "28212:8098"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if PINOT_volume_map_data %}
      - ./container-volume/pinot/server:/tmp/data/server
    {% endif -%}   {#  PINOT_volume_map_data #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: StartServer -zkAddress zookeeper-1:2181
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}
{% endif %}   {# PINOT_enable #}

{% if IGNITE_enable | default(false) %}
  #  ================================== Apache Ignite ========================================== #
  {% for num in range(IGNITE_servers | default(1) ) %}
    {% set external_port = 28240 + loop.index - 1 %}
  ignite-{{loop.index}}:
    image: apacheignite/ignite:{{__IGNITE_version}}
    hostname: ignite-{{loop.index}}
    container_name: ignite-{{loop.index}}
    labels:
      com.platys.name: "ignite"
      com.platys.restapi.title: "Ignite REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28240/ignite?cmd=version"
    ports:
      - "{{external_port}}:8080"
      - "10800:10800"
      - "11212:11211"
    environment:
      #CONFIG_URI: file:/config/ignite-config.xml
      IGNITE_QUIET: "false"
      OPTION_LIBS: {{IGNITE_option_libs}}
      IGNITE_WORK_DIR: '/storage'
      JVM_OPTS: "-server -Xms1g  -Xmx1g -XX:NewSize=512m -XX:SurvivorRatio=6 -XX:+AlwaysPreTouch
              -XX:+UseG1GC -XX:MaxGCPauseMillis=2000 -XX:GCTimeRatio=4 -XX:InitiatingHeapOccupancyPercent=30
              -XX:G1HeapRegionSize=8M -XX:ConcGCThreads=2 -XX:G1HeapWastePercent=10 -XX:+UseTLAB
              -XX:+ScavengeBeforeFullGC -XX:+DisableExplicitGC"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  PINOT_volume_map_data #}
    volumes:
      - ./data-transfer:/data-transfer
      #- ./config:/config:ro
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}

  gridgain-cc-backend:
    image: gridgain/control-center-backend:{{__GRIDGAIN_CC_version}}
    hostname: gridgain-cc-backend
    container_name: gridgain-cc-backend
    labels:
      com.platys.name: "ignite"
    volumes:
      - ./data-transfer:/data-transfer
      - ./gridgain-console-work:/opt/gridgain-web-console-server/work
      #- ./config:/config:ro
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  gridgain-cc-frontend:
    image: gridgain/control-center-frontend:{{__GRIDGAIN_CC_version}}
    hostname: gridgain-cc-frontend
    container_name: gridgain-cc-frontend
    labels:
      com.platys.name: "ignite"
      com.platys.webui.title: "Gridgain Control Center UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28245"
    ports:
      # Port mapping format (change if needed) - HOST:CONTAINER
      - 28245:8008
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/gridgain/control-center.conf:/etc/nginx/control-center.conf
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

{% endif %}   {# IGNITE_enable #}

{% if PROMETHEUS_enable | default(false) %}
  #  ================================== Prometheus ========================================== #
  prometheus-1:
    image: prom/prometheus:{{__PROMETHEUS_version}}
    container_name: prometheus-1
    hostname: prometheus-1
    labels:
      com.platys.name: "prometheus"
      com.platys.webui.title: "Prometheus UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:9090/graph"
      com.platys.restapi.title: "Prometheus Rest API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:9090/api/v1"
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    ports:
      - "9090:9090"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    {% if PROMETHEUS_volume_map_data %}
      - "./container-volume/prometheus:/prometheus"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% if PROMETHEUS_PUSHGATEWAY_enable | default(false) %}
  prometheus-pushgateway:
    image: prom/pushgateway:{{__PROMETHEUS_PUSHGATEWAY_version}}
    container_name: prometheus-pushgateway
    hostname: prometheus-pushgateway
    labels:
      com.platys.name: "prometheus"
      com.platys.restapi.title: "Pushgateway API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:9091"
    expose:
      - 9091
    ports:
      - "9091:9091"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  PROMETHEUS_PUSHGATEWAY_enable #}

  {% if PROMETHEUS_NODEEXPORTER_enable | default(false) %}
  prometheus-nodeexporter:
    image: prom/node-exporter:{{__PROMETHEUS_NODEEXPORTER_version}}
    container_name: prometheus-nodeexporter
    labels:
      com.platys.name: "prometheus"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./container-volume/prometheus/proc:/host/proc:ro
      - ./container-volume/prometheus/sys:/host/sys:ro
      - ./:/rootfs:ro
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points"
      - "^(aufs|proc|nsfs|shm|cgroup|tmpfs|binfmt_misc|debugfs|devpts|fusectl|hugetlbfs|fuse.lxcfs|mqueue|pstore|securityfs|sysfs|autofs|devtmpfs|configfs)"
  {% endif %}   {#  PROMETHEUS_NODEEXPORTER_enable #}
{% endif %}   {#  PROMETHEUS_enable #}

{% if TILE38_enable | default(false) %}
  #  ================================== Tile38 ========================================== #
  tile38:
    image: tile38/tile38:{{__TILE38_version}}
    container_name: tile38
    hostname: tile38
    labels:
      com.platys.name: "tile38"
      com.platys.webui.title: "Tile38 UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:9851"
    ports:
      - "9851:9851"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  TILE38_enable #}

{% if YUGABYTE_enable | default(false) %}
  #  ================================== Yugabyte ========================================== #
  yb-master:
    image: yugabytedb/yugabyte:{{__YUGABYTE_version}}
    container_name: yb-master
    hostname: yb-master
    labels:
      com.platys.name: "yugabyte"
    command: [ "/home/yugabyte/bin/yb-master",
                "--fs_data_dirs=/mnt/master",
                "--master_addresses=yb-master:7100",
                "--rpc_bind_addresses=yb-master:7100",
                "--replication_factor=1"]
    ports:
      - "7000:7000"
    environment:
      SERVICE_7000_NAME: yb-master
#    volumes:
#      - yb-master-data-1:/mnt/master
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  yb-tserver-1:
    image: yugabytedb/yugabyte:{{__YUGABYTE_version}}
    container_name: yb-tserver-1
    hostname: yb-tserver-1
    labels:
      com.platys.name: "yugabyte"
    depends_on:
      - yb-master
    ports:
      - "19042:9042"
      - "16379:6379"
      - "15433:5433"
      - "19000:9000"
    environment:
      SERVICE_5433_NAME: ysql
      SERVICE_9042_NAME: ycql
      SERVICE_6379_NAME: yedis
      SERVICE_9000_NAME: yb-tserver-1
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
#    volumes:
#      - yb-tserver-data-1:/mnt/tserver
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: [ "/home/yugabyte/bin/yb-tserver",
                "--fs_data_dirs=/mnt/tserver",
                "--start_pgsql_proxy",
                "--rpc_bind_addresses=yb-tserver-1:9100",
                "--tserver_master_addrs=yb-master:7100",
                "--replication_factor=1"]
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

{% endif %}   {#  YUGABYTE_enable #}

{% if ORACLE_EE_enable | default(false) %}
  #  ================================== Oracle EE ========================================== #
  oracledb-ee:
    image: {{private_docker_repository_name}}/ora_db:{{__ORACLE_EE_version}}
    container_name: oracledb-ee
    hostname: oracledb-ee
    labels:
      com.platys.name: "oracledb-ee"
      com.platys.webui.title: "Oracle UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28250/ords"
    ports:
      - "1521:1521"
      - "28250:8080"
      - "5500:5500"
    environment:
      CONTAINER: '{{ORACLE_EE_container_enable}}'
      ORACLE_SID: ORCLCDB
      ORACLE_PDB: ORCLPDB1
      ORACLE_PWD: {{ORACLE_EE_password}}
      ORACLE_CHARACTERSET: AL32UTF8
      INSTANCE_INIT: '/u01/config'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if ORACLE_EE_volume_map_data %}
      - ./container-volume/oracle/data:/u01
    {% endif %}
      - ./init/oracle/startup:/u01/config/startup
      - ./init/oracle/setup:/u01/config/setup
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ORACLE_EE_enable #}

{% if ORACLE_XE_enable | default(false) %}
  #  ================================== Oracle XE ========================================== #
  oracledb-xe:
    image: gvenzl/oracle-xe:{{__ORACLE_XE_version}}
    container_name: oracledb-xe
    hostname: oracledb-xe
    labels:
      com.platys.name: "oracledb-xe"
    ports:
      - "1522:1521"
    environment:
    {% if ORACLE_XE_database is defined and ORACLE_XE_database | length %}
      ORACLE_DATABASE: {{ORACLE_XE_database}}
    {% endif -%}   {#  ORACLE_XE_random_password #}
      ORACLE_PASSWORD: {{ORACLE_XE_password}}
    {% if ORACLE_XE_random_password is defined and ORACLE_XE_random_password | length %}
      ORACLE_RANDOM_PASSWORD: '{{ORACLE_XE_random_password}}'
    {% endif -%}   {#  ORACLE_XE_random_password #}
    {% if ORACLE_XE_app_user is defined and ORACLE_XE_app_user | length %}
      APP_USER: {{ORACLE_XE_app_user}}
      APP_USER_PASSWORD: {ORACLE_XE_app_user_password}}
      TARGET_PDB: {{ORACLE_XE_target_pdb}}
    {% endif -%}   {#  ORACLE_XE_app_user #}
      ORACLE_CHARACTERSET: AL32UTF8
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./init/oraclexe:/container-entrypoint-initdb.d/
    {% if ORACLE_XE_volume_map_data %}
      - ./container-volume/oraclexe/data:/opt/oracle/oradata
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ORACLE_XE_enable #}

{% if ORACLE_SQLCL_enable | default(false) %}
  #  ================================== Oracle SQLcl ========================================== #
  oracle-sqlcl:
    image: trivadis/oracle-sqlcl:{{__ORACLE_SQLCL_version}}
    container_name: oracle-sqlcl
    hostname: oracle-sqlcl
    labels:
      com.platys.name: "oracle-sqlcl"
    environment:
      ORACLE_HOST: oracledb-xe
      ORACLE_PORT: 1521
      ORACLE_SERVICE: XEPDB1
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    command: tail -f /dev/null
    restart: {{container_restart_policy}}
{% endif %}   {#  ORACLE_SQLCL_enable #}

{% if ORACLE_REST_DATA_SERVICE_enable | default(false) %}
  #  ================================== Oracle REST Data Service (ORDS) ========================================== #
  oracle-rest-1:
    image: trivadis/restdataservices:{{__ORACLE_REST_DATA_SERVICE_version}}
    container_name: oracle-rest-1
    hostname: oracle-rest-1
    labels:
      com.platys.name: "oracle-rest"
      com.platys.restapi.title: "ORDS Rest API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28252/ords"
    ports:
      - "28252:8888"
    environment:
      ORACLE_HOST: oracledb-xe
      ORACLE_PORT: 1521
      ORACLE_SERVICE: XEPDB1
      ORACLE_PWD: 'EAo4KsTfRR'
      ORDS_PWD: abc123!
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ORACLE_REST_DATA_SERVICE_enable #}

{% if MYSQL_enable | default(false) %}
  #  ================================== MySQL ========================================== #
  mysql:
    image: mysql:{{__MYSQL_version}}
    container_name: mysql
    labels:
      com.platys.name: "mysql"
    ports:
      - 3306:3306
    environment:
      - MYSQL_DATABASE=sample
      - MYSQL_USER=sample
      - MYSQL_PASSWORD=sample
      - MYSQL_ROOT_PASSWORD=manager
      - MYSQL_LOG_CONSOLE=true
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  MYSQL_enable #}

{% if SQLSERVER_enable | default(false) %}
  #  ================================== SQL Server ========================================== #
  sqlserver:
  {% if SQLSERVER_provision_adventure_works | default(false) %}
    image: chriseaton/adventureworks:{{SQLSERVER_provision_adventure_works_edition}}
  {% else %}
    image: mcr.microsoft.com/mssql/server:{{__SQLSERVER_version}}
  {% endif -%}   {#  SQLSERVER_provision_adventure_works #}
    hostname: sqlserver
    container_name: sqlserver
    labels:
      com.platys.name: "sqlserver"
    ports:
      - "1433:1433"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "abc123abc123!"
      MSSQL_PID: "Express"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  SQLSERVER_enable #}

{% if POSTGRESQL_enable | default(false) %}
  #  ================================== PostgreSQL ========================================== #
  postgresql:
    image: postgres:{{__POSTGRESQL_version}}
    container_name: postgresql
    hostname: postgresql
    labels:
      com.platys.name: "postgresql"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD={{POSTGRESQL_password | default('abc123!') }}
      - POSTGRES_USER={{POSTGRESQL_user | default('demo') }}
      - POSTGRES_DB={{POSTGRESQL_database | default('demodb') }}
    {% if POSTGRESQL_multiple_databases is defined and POSTGRESQL_multiple_databases | length %}
      - POSTGRES_MULTIPLE_DATABASES={{POSTGRESQL_multiple_databases}}
      - POSTGRES_MULTIPLE_USERS={{POSTGRESQL_multiple_users}}
      - POSTGRES_MULTIPLE_PASSWORDS={{POSTGRESQL_multiple_passwords}}
    {% endif -%}   {#  POSTGRESQL_multiple_databases #}
      - PGDATA=/var/lib/postgresql/data/pgdata
      - DB_SCHEMA={{POSTGRESQL_schema | default('demo') }}
    {% if POSTGRESQL_anon_role is defined and POSTGRESQL_anon_role | length %}
      - DB_ANON_ROLE={{POSTGRESQL_anon_role | default('demo') }}
    {% endif -%}   {#  POSTGRESQL_anon_role #}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./init/postgresql:/docker-entrypoint-initdb.d/
    {% if POSTGRESQL_volume_map_data %}
      - ./container-volume/postgresql/data:/var/lib/postgresql/data/pgdata:Z
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if POSTGRESQL_wal_level is defined and POSTGRESQL_wal_level and POSTGRESQL_wal_level | length | default(false) %}
    command:
      - "postgres"
      - "-c"
      - "wal_level={{POSTGRESQL_wal_level | lower }}"
    {% endif -%}   {#  POSTGRESQL_wal_level #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}


  {% if POSTGREST_enable| default(false) %}
  #  ================================== PostgREST ========================================== #
  postgrest:
    image: postgrest/postgrest:{{__POSTGREST_version}}
    container_name: postgrest
    hostname: postgrest
    labels:
      com.platys.name: "postgrest"
      com.platys.restapi.title: "PostgREST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28206"
    ports:
      - "28206:3000"
    environment:
      # The standard connection URI format, documented at
      # https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
      - PGRST_DB_URI=postgres://{{POSTGRESQL_user}}:{{POSTGRESQL_password}}@postgrestsql:5432/{{POSTGRESQL_database}}
      # The name of which database schema to expose to REST clients
      - PGRST_DB_SCHEMA={{POSTGRESQL_schema}}
      # The database role to use when no client authentication is provided
    {% if POSTGRESQL_anon_role is defined and POSTGRESQL_anon_role | length %}
      - PGRST_DB_ANON_ROLE={{POSTGRESQL_anon_role}}
    {% endif -%}   {#  POSTGRESQL_anon_role #}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./init/postgresql:/docker-entrypoint-initdb.d/
    {% if POSTGRESQL_volume_map_data %}
      - ./container-volume/postgresql/data:/var/lib/postgresql/data/pgdata:Z
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  POSTGREST_enable #}
{% endif %}   {#  POSTGRESQL_enable #}

{% if POSTGRESQL_enable and PGADMIN_enable| default(false) %}
  #  ================================== pgAdmin ========================================== #
  pgadmin:
    image: dpage/pgadmin4:{{__PGADMIN_version}}
    container_name: pgadmin
    hostname: pgadmin
    depends_on:
      - postgresql
    labels:
      com.platys.name: "pgadmin"
      com.platys.webui.title: "pgAdmin UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28247"
    ports:
      - "28247:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: abc123!
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# PGADMIN_enable #}

{% if TIMESCALEDB_enable | default(false) %}
  #  ================================== Timescale DB ========================================== #
  timescaledb:
    image: timescale/timescaledb:{{__TIMESCALEDB_version}}
    container_name: timescaledb
    hostname: timescaledb
    labels:
      com.platys.name: "timescaledb"
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: "6AXL3g7}+2G2Kc;"
      POSTGRES_USER: "timescaledb"
      POSTGRES_DB: "timescaledb"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if TIMESCALEDB_volume_map_data %}
      - /container-volume/timescaledb/data:/var/lib/postgresql/data:Z
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: always
{% endif %}   {#  TIMESCALEDB_enable #}

{% if ADMINER_enable | default(false) %}
  #  ================================== Adminer ========================================== #
  adminer:
    image: adminer:{{__ADMINER_version}}
    container_name: adminer
    hostname: adminer
    labels:
      com.platys.name: "adminer"
      com.platys.webui.title: "Adminer UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28131"
    ports:
      - 28131:8080
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    command: php -S 0.0.0.0:8080 -t /var/www/html
    restart: {{container_restart_policy}}
{% endif %}   {#  ADMINER_enable #}

{% if CLOUDBEAVER_enable | default(false) %}
  #  ================================== Cloudbeaver ========================================== #
  cloudbeaver:
    image: dbeaver/cloudbeaver:{{__CLOUDBEAVER_version}}
    container_name: cloudbeaver
    hostname: cloudbeaver
    labels:
      com.platys.name: "cloudbeaver"
      com.platys.webui.title: "Cloudbeaver UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8978"
    ports:
      - "8978:8978"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/cloudbeaver/data-sources.json:/opt/cloudbeaver/workspace/GlobalConfiguration/.dbeaver/data-sources.json
    {% if CLOUDBEAVER_volume_map_workspace %}
      - "./container-volume/cloudbeaver/workspace:/opt/cloudbeaver/workspace"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  CLOUDBEAVER_enable #}

{% if SQLPAD_enable | default(false) %}
  #  ================================== SQLPad ========================================== #
  sqlpad:
    image: sqlpad/sqlpad:{{__SQLPAD_version}}
    container_name: sqlpad
    hostname: sqlpad
    labels:
      com.platys.name: "sqlpad"
      com.platys.webui.title: "SQLPad UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28194"
    ports:
      - "28194:3000"
    environment:
      SQLPAD_ADMIN: 'admin@sqlpad.com'
      SQLPAD_ADMIN_PASSWORD: 'admin'
      SQLPAD_APP_LOG_LEVEL: debug
      SQLPAD_WEB_LOG_LEVEL: warn
      SQLPAD_SEED_DATA_PATH: /etc/sqlpad/seed-data
      SQLPAD_CONNECTIONS__pgdemo__name: Postgres demo
      SQLPAD_CONNECTIONS__pgdemo__driver: postgres
      SQLPAD_CONNECTIONS__pgdemo__host: postgres
      SQLPAD_CONNECTIONS__pgdemo__database: demodb
      SQLPAD_CONNECTIONS__pgdemo__username: demo
      SQLPAD_CONNECTIONS__pgdemo__password: abc123!
      SQLPAD_CONNECTIONS__pgdemo__multiStatementTransactionEnabled: 'true'
      SQLPAD_CONNECTIONS__pgdemo__idleTimeoutSeconds: 86400
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  SQLPAD_enable #}

{% if NOCODB_enable | default(false) %}
  #  ================================== NocoDB ========================================== #
  nocodb:
    image: nocodb/nocodb:{{__NOCODB_version}}
    container_name: nocodb
    hostname: nocodb
    labels:
      com.platys.name: "nocodb"
      com.platys.webui.title: "NocoDB UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28276"
    ports:
      - "28276:8080"
    environment:
      NC_DB: 'pg://postgresql:5432?u=postgres&p=abc123!&d=postgres'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      {% if NOCODB_volume_map_data | default(false) %}
      - ./container-volumes/nocodb/data:/usr/app/data
      {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  NOCODB_enable #}

{% if QUIX_enable | default(false) %}
  #  ================================== Quix ========================================== #
  quix-backend:
    image: wixquix/quix-backend:{{__QUIX_version}}
    container_name: quix-backend
    hostname: quix-backend
    labels:
      com.platys.name: "quix"
      com.platys.restapi.title: "Quix REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28159"
    ports:
      - "28159:8081"
    environment:
      MODULES: presto
      MODULES_PRESTO_ENGINE: presto
    {% if TRINO_enable | default(false) %}
      MODULES_PRESTO_API: http://trino-1:8080/v1
    {% else -%}   {#  TRINO_enable #}
      MODULES_PRESTO_API: http://presto-1:8080/v1
    {% endif -%}   {#  TRINO_enable #}
      MODULES_PRESTO_CATALOG: system
      MODULES_PRESTO_SCHEMA: runtime
      MODULES_PRESTO_SOURCE: quix
      MODULES_PRESTO_DB_EMPTY_TIMEOUT: 60000
      MODULES_PRESTO_DB_REQUEST_TIMEOUT: 10000
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  quix-frontend:
    image: wixquix/quix-frontend:{{__QUIX_version}}
    container_name: quix-frontend
    hostname: quix-frontend
    labels:
      com.platys.name: "quix"
      com.platys.webui.title: "Quix UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28160"
    ports:
      - "28160:3000"
    environment:
      BACKEND_INTERNAL_URL: http://quick-backend:8081
      BACKEND_PUBLIC_URL: http://${PUBLIC_IP}:28159
      DB_NAME: quix
      DB_USER: root
      DB_HOST: quix-db
      DB_PORT: 3306
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  quix-db:
    image: "mysql:5.7"
    container_name: quix-db
    hostname: quix-db
    labels:
      com.platys.name: "quix"
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "'yes'"
      MYSQL_DATABASE: "quix"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  QUIX_enable #}

{% if HAZELCAST_enable | default(false) %}
  #  ================================== Hazelcast IMDG ========================================== #
  {% for num in range(HAZELCAST_nodes | default(1) ) %}
    {% set port = 5701 %}
    {% set external_port = 5701 + loop.index - 1 %}
  hazelcast-{{loop.index}}:
    image: hazelcast/hazelcast:{{__HAZELCAST_version}}
    container_name: hazelcast-{{loop.index}}
    hostname: hazelcast-{{loop.index}}
    labels:
      com.platys.name: "hazelcast"
    ports:
      - "{{external_port}}:{{port}}"
    environment:
      - LOGGING_LEVEL=INFO
      - HZ_NETWORK_PUBLICADDRESS=${PUBLIC_IP}:{{external_port}}
      - HZ_NETWORK_JOIN_AUTODETECTION_ENABLED=false
      - HZ_NETWORK_JOIN_MULTICAST_ENABLED=true
      - HZ_NETWORK_JOIN_AWS_ENABLED=false
      - HZ_JET_ENABLED={{HAZELCAST_use_jet}}
    {% if HAZELCAST_volume_map_custom_config | default(false) %}
      - HAZELCAST_CONFIG=hazelcast.yml
    {% endif -%}   {#  HAZELCAST_volume_map_custom_config #}
      - CLASSPATH=/opt/hazelcast/ext/*
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/hazelcast:/opt/hazelcast/ext
    {% if HAZELCAST_volume_map_custom_config | default(false) %}
      - ./hazelcast.yml:/opt/hazelcast/hazelcast.yml
    {% endif -%}   {#  HAZELCAST_volume_map_custom_config #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}

  {% if HAZELCAST_MC_enable | default(false) %}
  hazelcast-mc:
    image: hazelcast/management-center:{{__HAZELCAST_MC_version}}
    container_name: hazelcast-mc
    hostname: hazelcast-mc
    labels:
      com.platys.name: "hazelcast-mc"
      com.platys.webui.title: "Hazelcast Mangement Center UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28209"
    ports:
      - 28209:8080
    environment:
      - LOGGING_LEVEL=INFO
#      - MC_INIT_CMD="/opt/hazelcast/management-center/bin/mc-conf.sh cluster add -cn='my-cluster' -ma='hazelcast-1'"
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
#    command: bash -c "set -euo pipefail && /opt/hazelcast/management-center/bin/mc-conf.sh cluster add --cluster-name='my-cluster' --member-addresses='hazelcast-1' && /opt/hazelcast/management-center/bin/mc-start.sh"
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  HAZELCAST_MC_enable #}
{% endif %}   {#  HAZELCAST_enable #}

{% if AXON_enable | default(false) %}
  #  ================================== Axon Server ========================================== #
  axon-server:
    image: axoniq/axonserver:{{__AXON_version}}
    container_name: axon-server
    hostname: axon-server
    labels:
      com.platys.name: "axon-server"
      com.platys.webui.title: "Axon UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8024"
    ports:
      - 8024:8024
      - 8124:8124
    environment:
      - AXONSERVER_HOSTNAME=axon-server
      - AXONSERVER_EVENTSTORE=/eventstore
      - AXONSERVER_CONTROLDB=/controldb
      - AXONSERVER_HTTP_PORT=8024
      - AXONSERVER_GRPC_PORT=8124
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  AXON_enable #}

{% if EVENTSTORE_enable | default(false) %}
  #  ================================== Axon Server ========================================== #
  eventstore:
    image: eventstore/eventstore:{{__EVENTSTORE_version}}
    container_name: eventstore
    hostname: eventstore
    labels:
      com.platys.name: "eventstore"
      com.platys.webui.title: "EventStore UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:2113"
    ports:
      - "1113:1113"
      - "2113:2113"
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_EXT_TCP_PORT=1113
      - EVENTSTORE_EXT_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  enable #}

{% if TRINO_enable | default(false) %}
  #  ================================== Trino ========================================== #
  trino-1:
  {% if (TRINO_edition | lower) == 'starburstdata'  %}
    image: starburstdata/starburst-enterprise:{{__STARBURSTDATA_version}}
    {% set trino_etc_dir = '/etc/starburst' %}
    {% set conf_dir = 'starburstdata' %}
  {% elif (TRINO_edition | lower) == 'oss' %}
    image: trinodb/trino:{{__TRINO_version}}
    {% set trino_etc_dir = '/etc/trino' %}
    {% set conf_dir = 'trino' %}
  {% endif -%}   {#  TRINO_edition #}
    hostname: trino-1
    container_name: trino-1
    labels:
      com.platys.name: "trino"
      com.platys.webui.title: "Trino UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28082"
    ports:
      - '28082:8080'
    environment:
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      S3_ENDPOINT: {{s3Endpoint | default(omit) }}
      S3_AWS_ACCESS_KEY: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      S3_AWS_SECRET_KEY: {{s3SecretAccessKey}}
      S3_PATH_STYLE_ACCESS: '{{s3PathStyleAccess}}'
  {% endif %}
  {%if external['ADLS_enable'] | default(false) %}
      ADLS_STORAGE_ACCOUNT: {{adlsStorageAccount | default(omit) }}
      ADLS_ACCESS_KEY: {{adlsAccessKey}}
  {% endif -%}   {#  external['ADLS_enable'] #}
  {% if TRINO_kafka_table_names is defined and TRINO_kafka_table_names|length and (KAFKA_enable or external['KAFKA_enable']) | default(false)  %}
      KAFKA_TABLE_NAMES: {{TRINO_kafka_table_names}}
  {% endif %}
  {% if POSTGRESQL_enable | default(false) %}
      POSTGRESQL_USER: {{POSTGRESQL_user | default('demo') }}
      POSTGRESQL_PASSWORD: {{POSTGRESQL_password | default('abc123!') }}
  {% endif %}
  {% if ORACLE_EE_enable or ORACLE_XE_enable | default(false) %}
      ORACLE_USER: {{TRINO_oracle_user | default('demo') }}
      ORACLE_PASSWORD: {{TRINO_oracle_password | default('abc123!') }}
  {% endif %}
      # this is only generated to keep the structure valid if no other env variables are present
      IGNORE: ignore
  {% if TRINO_event_listener is defined and TRINO_event_listener | length | default(false) %}
      EVENT_LISTENER_CONFIG_FILES: /etc/trino/{{TRINO_event_listener}}.properties
  {% endif %}
  {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
  {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
  {% if (TRINO_install | lower) == 'cluster'  %}
      - ./conf/{{conf_dir}}/cluster/coordinator.config.properties:{{trino_etc_dir}}/config.properties
      - ./conf/{{conf_dir}}/cluster/node.properties:{{trino_etc_dir}}/node.properties
  {% else %}
      - ./conf/{{conf_dir}}/single/config.properties:{{trino_etc_dir}}/config.properties
      - ./conf/{{conf_dir}}/single/node.properties:{{trino_etc_dir}}/node.properties
  {% endif %}
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      - './conf/{{conf_dir}}/catalog/minio.properties:{{trino_etc_dir}}/catalog/minio.properties'
  {% endif %}
  {%if external['ADLS_enable'] | default(false) %}
      - './conf/{{conf_dir}}/catalog/adls.properties:{{trino_etc_dir}}/catalog/adls.properties'
  {% endif %}
  {% if TRINO_kafka_table_names is defined and TRINO_kafka_table_names|length and (KAFKA_enable or external['KAFKA_enable']) | default(false)  %}
      - './conf/{{conf_dir}}/catalog/kafka.properties:{{trino_etc_dir}}/catalog/kafka.properties'
      - './conf/{{conf_dir}}/kafka/:{{trino_etc_dir}}/kafka/'
  {% endif %}
  {%if HADOOP_enable | default(false) %}
      - './conf/{{conf_dir}}/catalog/hdfs.properties:{{trino_etc_dir}}/catalog/hdfs.properties'
  {% endif %}
  {% if POSTGRESQL_enable | default(false) %}
      - './conf/{{conf_dir}}/catalog/postgresql.properties:{{trino_etc_dir}}/catalog/postgresql.properties'
  {% endif %}
  {% if ORACLE_EE_enable or ORACLE_XE_enable | default(false) %}
      - './conf/{{conf_dir}}/catalog/oracle.properties:{{trino_etc_dir}}/catalog/oracle.properties'
  {% endif %}
  {% if TRINO_event_listener is defined and TRINO_event_listener | length | default(false) %}
      - ./conf/trino/{{TRINO_event_listener}}.properties:/etc/trino/{{TRINO_event_listener}}.properties
      - ./plugins/trino/{{TRINO_event_listener}}/:/usr/lib/trino/plugin/{{TRINO_event_listener}}/
  {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% if (TRINO_install | lower) == 'cluster'  %}
    {% for num in range(TRINO_workers | default(1) ) %}
  trino-worker-{{loop.index}}:
  {% if (TRINO_edition | lower) == 'starburstdata'  %}
    image: starburstdata/presto:{{__STARBURSTDATA_version}}
    {% set trino_etc_dir = '/usr/lib/presto/etc' %}
    {% set conf_dir = 'starburstdata' %}
  {% elif (TRINO_edition | lower) == 'oss' %}
    image: trinodb/trino:{{__TRINO_version}}
    {% set trino_etc_dir = '/etc/trino' %}
    {% set conf_dir = 'trino' %}
  {% endif -%}   {#  TRINO_edition #}
    hostname: trino-worker-{{loop.index}}
    container_name: trino-worker-{{loop.index}}
    environment:
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      S3_ENDPOINT: {{s3Endpoint | default(omit) }}
      S3_AWS_ACCESS_KEY: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      S3_AWS_SECRET_KEY: {{s3SecretAccessKey}}
      S3_PATH_STYLE_ACCESS: '{{s3PathStyleAccess}}'
  {% endif %}
  {%if external['ADLS_enable'] | default(false) %}
      ADLS_STORAGE_ACCOUNT: {{adlsStorageAccount | default(omit) }}
      ADLS_ACCESS_KEY: {{adlsAccessKey}}
  {% endif -%}   {#  external['ADLS_enable'] #}
  {% if (KAFKA_enable or external['KAFKA_enable']) | default(false) %}
      KAFKA_TABLE_NAMES: {{TRINO_kafka_table_names}}
  {% endif %}
  {% if POSTGRESQL_enable | default(false) %}
      POSTGRESQL_USER: {{POSTGRESQL_user | default('demo') }}
      POSTGRESQL_PASSWORD: {{POSTGRESQL_password | default('abc123!') }}
  {% endif %}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/{{conf_dir}}/cluster/worker.config.properties:{{trino_etc_dir}}/config.properties
      - ./conf/{{conf_dir}}/cluster/node.properties:{{trino_etc_dir}}/node.properties
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      - './conf/{{conf_dir}}/catalog/minio.properties:{{trino_etc_dir}}/catalog/minio.properties'
  {% endif %}
  {%if external['ADLS_enable'] | default(false) %}
      - './conf/{{conf_dir}}/catalog/adls.properties:{{trino_etc_dir}}/catalog/adls.properties'
  {% endif %}
  {%if KAFKA_enable or external['KAFKA_enable'] | default(false) %}
      - './conf/{{conf_dir}}/catalog/kafka.properties:{{trino_etc_dir}}/catalog/kafka.properties'
      - './conf/{{conf_dir}}/kafka/:{{trino_etc_dir}}/kafka/'
  {% endif %}
  {%if HADOOP_enable | default(false) %}
      - './conf/{{conf_dir}}/catalog/hdfs.properties:{{trino_etc_dir}}/catalog/hdfs.properties'
  {% endif %}
  {% if POSTGRESQL_enable | default(false) %}
      - './conf/{{conf_dir}}/catalog/postgresql.properties:{{trino_etc_dir}}/catalog/postgresql.properties'
  {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
    {% endfor %}
  {% endif -%}   {#  TRINO_install #}

  {% if TRINO_CLI_enable | default(false) %}
  trino-cli:
  {% if (TRINO_edition | lower) == 'starburstdata'  %}
    image: trivadis/trino-cli:{{__TRINO_CLI_version}}
  {% elif (TRINO_edition | lower) == 'oss' %}
    image: trivadis/trino-cli:{{__TRINO_CLI_version}}
  {% endif -%}   {#  TRINO_edition #}
    hostname: trino-cli
    container_name: trino-cli
    labels:
      com.platys.name: "trino"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    tty: true
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  TRINO_CLI_enable #}
{% endif %}   {#  TRINO_enable #}

{% if PRESTO_enable | default(false) %}
  #  ================================== Presto ========================================== #
  presto-1:
  {% if (PRESTO_edition | lower) == 'prestodb' %}
    image: trivadis/prestodb:{{__PRESTO_version}}
    {% set presto_etc_dir = '/opt/presto/default/etc' %}
  {% elif (PRESTO_edition | lower) == 'ahana' %}
    image: ahanaio/prestodb:{{__AHANA_version}}
    {% set presto_etc_dir = '/opt/presto/default/etc' %}
  {% endif -%}   {#  PRESTO_edition #}
    hostname: presto-1
    container_name: presto-1
    labels:
      com.platys.name: "presto"
      com.platys.webui.title: "Presto UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28081"
    ports:
      - '28081:8080'
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
  {% if (PRESTO_install | lower) == 'cluster'  %}
      - ./conf/presto/cluster/coordinator.config.properties:{{presto_etc_dir}}/config.properties
  {% else %}
      - ./conf/presto/single/config.properties:{{presto_etc_dir}}/config.properties
  {% endif %}
      - ./conf/presto/cluster/node.properties:{{presto_etc_dir}}/node.properties
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      - './conf/presto/catalog/minio.properties:{{presto_etc_dir}}/catalog/minio.properties'
  {% endif %}
  {%if HADOOP_enable | default(false) %}
      - './conf/{{conf_dir}}/catalog/hdfs.properties:{{trino_etc_dir}}/catalog/hdfs.properties'
  {% endif %}
  {% if POSTGRESQL_enable | default(false) %}
      - './conf/presto/catalog/postgresql.properties:/usr/lib/presto/etc/catalog/postgresql.properties'
  {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% if (PRESTO_install | lower) == 'cluster'  %}
    {% for num in range(PRESTO_workers | default(1) ) %}
  presto-worker-{{loop.index}}:
  {% if (PRESTO_edition | lower) == 'prestodb' %}
    image: trivadis/prestodb:{{__PRESTO_version}}
    {% set presto_etc_dir = '/opt/presto/default/etc' %}
  {% elif (PRESTO_edition | lower) == 'ahana' %}
    image: ahanaio/prestodb:{{__AHANA_version}}
    {% set presto_etc_dir = '/opt/presto/default/etc' %}
  {% endif -%}   {#  PRESTO_edition #}
    hostname: presto-worker-{{loop.index}}
    container_name: presto-worker-{{loop.index}}
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/presto/cluster/worker.config.properties:{{presto_etc_dir}}/config.properties
      - ./conf/presto/cluster/node.properties:{{presto_etc_dir}}/node.properties
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      - './conf/presto/catalog/minio.properties:{{presto_etc_dir}}/catalog/minio.properties'
  {% endif %}
  {%if HADOOP_enable | default(false) %}
      - './conf/{{conf_dir}}/catalog/hdfs.properties:{{trino_etc_dir}}/catalog/hdfs.properties'
  {% endif %}
  {% if POSTGRESQL_enable | default(false) %}
      - './conf/presto/catalog/postgresql.properties:/usr/lib/presto/etc/catalog/postgresql.properties'
  {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
    {% endfor %}
  {% endif -%}   {#  PRESTO_install #}

  {% if PRESTO_CLI_enable | default(false) %}
  presto-cli:
  {% if (PRESTO_edition | lower) == 'prestodb' %}
    image: ahanaio/prestodb-cli:{{__PRESTO_CLI_version}}
    {% set presto_etc_dir = '/opt/presto/default/etc' %}
  {% elif (PRESTO_edition | lower) == 'ahana' %}
    image: ahanaio/prestodb-cli:{{__PRESTO_CLI_version}}
    {% set presto_etc_dir = '/opt/presto/default/etc' %}
  {% endif -%}   {#  PRESTO_edition #}
    hostname: presto-cli
    container_name: presto-cli
    labels:
      com.platys.name: "presto"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    tty: true
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  PRESTO_CLI_enable #}

{% endif %}   {#  PRESTO_enable #}

{% if DREMIO_enable | default(false) %}
  #  ================================== Presto ========================================== #
  dremio-1:
    image: dremio/dremio-oss:{{__DREMIO_version}}
    container_name: dremio-1
    hostname: dremio-1
    labels:
      com.platys.name: "dremio"
      com.platys.webui.title: "Dremio UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:9047"
    ports:
      - '9047:9047'
      - '31010:31010'
      - '45678:45678'
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  DREMIO_enable #}

{% if DRILL_enable | default(false) %}
  #  ================================== Presto ========================================== #
  drill-1:
    image: smizy/apache-drill:{{__DRILL_version}}
    container_name: drill-1
    hostname: drill-1
    labels:
      com.platys.name: "drill"
      com.platys.webui.title: "Drill UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8047"
    ports:
      - '8047:8047'
    environment:
      - SERVICE_8047_NAME=drillbit
      - DRILL_HEAP=512M
      - DRILL_MAX_DIRECT_MEMORY=1G
      - DRILL_ZOOKEEPER_QUORUM=zookeeper-1:2181
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  DREMIO_enable #}

{% if HASURA_enable | default(false) %}
  #  ================================== Hasura ========================================== #
  hasura:
    image: hasura/graphql-engine:{{__HASURA_version}}
    container_name: hasura
    hostname: hasura
    labels:
      com.platys.name: "hasura"
      com.platys.webui.title: "Hasura UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28177"
    ports:
      - '28177:8080'
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://demo:abc123!@postgresql:5432/demodb
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL: 1000
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  HASURA_enable #}

{% if GRAPHQL_MESH_enable | default(false) %}
  #  ================================== GraphQL Mesh ========================================== #
  graphql-mesh:
    image: hiroyukiosaki/graphql-mesh:{{__GRAPHQL_MESH_version}}
    container_name: graphql-mesh
    hostname: graphql-mesh
    labels:
      com.platys.name: "graphql-mesh"
      com.platys.webui.title: "GraphQL Mesh UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:4000"
    ports:
      - '4000:4000'
    environment:
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  GRAPHQL_MESH_enable #}

{% if NUCLIO_enable | default(false) %}
  #  ================================== Nuclio Dashboard ========================================== #
  nuclio:
    image: quay.io/nuclio/dashboard:{{__NUCLIO_version}}
    container_name: nuclio
    hostname: nuclio
    labels:
      com.platys.name: "nuclio"
      com.platys.webui.title: "Nuclio Dashboard UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8070"
    ports:
      - '8070:8070'
    environment:
      - NUCLIO_CHECK_FUNCTION_CONTAINERS_HEALTHINESS=true
      - NUCLIO_DASHBOARD_DEFAULT_FUNCTION_MOUNT_MODE=volume
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - /tmp:/tmp
      - /var/run/docker.sock:/var/run/docker.sock
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  NUCLIO_enable #}

{% if MINIO_enable | default(false) %}
  #  ================================== Minio ========================================== #
  {% for num in range(MINIO_nodes | default(1) ) %}
    {% set port = 9000 + loop.index - 1 %}
    {% set uiport = 9010 + loop.index - 1 %}
    {% set serviceName = "minio-" ~ loop.index %}
  {{serviceName}}:
    image: minio/minio:{{__MINIO_version}}
    container_name: {{serviceName}}
    hostname: {{serviceName}}
    labels:
      com.platys.name: "minio"
      com.platys.webui.title: "MinIO UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:9000"
    ports:
      - '{{port}}:9000'
      - '{{uiport}}:{{uiport}}'
    environment:
      MINIO_ROOT_USER: {{MINIO_access_key}}
      MINIO_ROOT_PASSWORD: {{MINIO_secret_key}}
      MINIO_REGION_NAME: {{s3DefaultRegion if s3DefaultRegion is defined and s3DefaultRegion else omit}}
    {%if not MINIO_browser_enable | default(false) %}
      MINIO_BROWSER: "off"
    {% endif -%}   {#  MINIO_browser_enable #}
      #MINIO_PUBLIC_IPS: {{serviceName}}
      #MINIO_DOMAIN: minio.io
      #MINIO_DEFAULT_BUCKETS: 'admin-bucket,{{MINIO_default_buckets}}'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if MINIO_volume_map_data %}
      - "./container-volume/minio:/data/"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {% if MINIO_volume_map_data %}
    user: "{{uid | default(1000)}}"
    {% endif %}
    command: server /data --console-address ":{{uiport}}"
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endfor %}

  #  ================================== Minio MC ========================================== #
  minio-mc:
    image: minio/mc:{{__MINIO_MC_version}}
    container_name: minio-mc
    hostname: minio-mc
    labels:
      com.platys.name: "minio"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
#      - ./conf/minio/config.json:/root/.mc/config.json
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint:
      - /bin/sh
      - -c
      - |
        sleep 10
        mc alias set minio-1 http://minio-1:9000 {{MINIO_access_key}} {{MINIO_secret_key}}
        mc mb --ignore-existing minio-1/admin-bucket
    {% if MLFLOW_SERVER_enable | default(false) %}
        mc mb --ignore-existing minio-1/mlruns
    {% endif %}   {#  MLFLOW_SERVER_enable #}
        for i in $$(echo "{{MINIO_default_buckets}}" | sed "s/,/ /g")
        do
          mc mb --ignore-existing minio-1/$$i
        done
        #
        while [ 1 -eq 1 ];do sleep 60;done
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  MINIO_enable #}

{% if MINIO_CONSOLE_enable | default(false) %}
  #  ================================== Minio Console ========================================== #
  minio-console:
    image: minio/console:{{__MINIO_CONSOLE_version}}
    container_name: minio-console
    hostname: minio-console
    labels:
      com.platys.name: "minio-console"
      com.platys.webui.title: "Minio Console UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28193"
    ports:
      - "28193:9090"
    environment:
      CONSOLE_MINIO_SERVER: "http://minio-1:9000"
      CONSOLE_PBKDF_PASSPHRASE: abc123!
      CONSOLE_PBKDF_SALT: abc123!
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: server
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  MINIO_CONSOLE_enable #}

{% if ADMINIO_UI_enable | default(false) %}
  #  ================================== Adminio UI ========================================== #
  adminio-ui:
    image: rzrbld/adminio-ui:{{__ADMINIO_UI_version}}
    container_name: adminio-ui
    hostname: adminio-ui
    labels:
      com.platys.name: "adminio"
      com.platys.webui.title: "Adminio UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28190"
    ports:
      - "28190:80"
    environment:
      API_BASE_URL: "http://${PUBLIC_IP}:28191"
      ADMINIO_MULTI_BACKEND: "false"
      ADMINIO_BACKENDS: '[{"name":"myminio","url":"http://${PUBLIC_IP}:28191"}]'
      NGX_ROOT_PATH: "/"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  adminio-api:
    image: rzrbld/adminio-api:{{__ADMINIO_API_version}}
    container_name: adminio-api
    hostname: adminio-api
    labels:
      com.platys.name: "adminio"
      com.platys.restapi.title: "Adminio API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28191"
    ports:
      - "28191:8080"
    environment:
      MINIO_ACCESS: {{MINIO_access_key}}
      MINIO_SECRET: {{MINIO_secret_key}}
      MINIO_HOST_PORT: minio-1:9000
      #MINIO_SSE_MASTER_KEY: 1:da2f4cfa32bed76507dcd44b42872328a8e14f25cd2a1ec0fb85d299a192a447
      ADMINIO_HOST_PORT: ":8080"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ADMINIO_UI_enable #}


{% if FILESTASH_enable | default(false) %}
  #  ================================== Filestash ========================================== #
  filestash:
    image: machines/filestash:{{__FILESTASH_version}}
    container_name: filestash
    hostname: filestash
    labels:
      com.platys.name: "filestash"
      com.platys.webui.title: "Filestash UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28193"
    ports:
      - 28193:8334
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  FILESTASH_enable #}

{% if S3MANAGER_enable | default(false) %}
  #  ================================== S3 Manager ========================================== #
  s3manager:
    image: mastertinner/s3manager:{{__S3MANAGER_version}}
    container_name: s3manager
    hostname: s3manager
    labels:
      com.platys.name: "s3manager"
      com.platys.webui.title: "S3 Manager UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28176"
    ports:
      - 28176:8080
    environment:
      ENDPOINT: {{ (s3Endpoint | replace('http://','')) if s3Endpoint is defined and s3Endpoint else omit}}
      ACCESS_KEY_ID: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      SECRET_ACCESS_KEY: ${PLATYS_AWS_SECRET_ACCESS_KEY:-{{MINIO_secret_key}}}
      USE_SSL: 'false'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  S3MANAGER_enable #}

{% if AWSCLI_enable | default(false) %}
  #  ================================== Awscli ========================================== #
  awscli:
    image: trivadis/awscli-s3cmd:{{__AWSCLI_version}}
    container_name: awscli
    hostname: awscli
    labels:
      com.platys.name: "awscli"
    environment:
      AWS_ACCESS_KEY_ID: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      AWS_SECRET_ACCESS_KEY: ${PLATYS_AWS_SECRET_ACCESS_KEY:-{{MINIO_secret_key}}}
      AWS_ENDPOINT: {{ (s3Endpoint | replace('http://','')) if s3Endpoint is defined and s3Endpoint else omit}}
      AWS_DEFAULT_REGION: {{s3DefaultRegion if s3DefaultRegion is defined and s3DefaultRegion else omit}}
    {% if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - './conf/s3cfg:/root/.s3cfg'
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: tail -f /dev/null
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  AWSCLI_enable #}

{% if AZURECLI_enable | default(false) %}
  #  ================================== Azure CLI ========================================== #
  azurecli:
    image: mcr.microsoft.com/azure-cli:{{__AZURECLI_version}}
    container_name: azurecli
    hostname: azurecli
    labels:
      com.platys.name: "azurecli"
    {% if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./container-volume/azurecli:/root
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: tail -f /dev/null
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  AZURECLI_enable #}

{% if AZURE_STORAGE_EXPLORER_enable | default(false) %}
  #  ================================== Azure Storage Explorer ========================================== #
  azure-storage-explorer:
    image: sebagomez/azurestorageexplorer:{{__AZURE_STORAGE_EXPLORER_version}}
    container_name: azure-storage-explorer
    hostname: azure-storage-explorer
    labels:
      com.platys.name: "azure-storage-explorer"
      com.platys.webui.title: "S3 Manager UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28279"
    ports:
      - 28279:80
    {% if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  AZURE_STORAGE_EXPLORER_enable #}

{% if LAKEFS_enable | default(false) %}
  #  ================================== LakeFS ========================================== #
  lakefs:
    image: treeverse/lakefs:{{__LAKEFS_version}}
    container_name: lakefs
    hostname: lakefs
    labels:
      com.platys.name: "lakefs"
      com.platys.webui.title: "LakeFS UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28220"
    ports:
      - 28220:8000
    environment:
      LAKEFS_BLOCKSTORE_TYPE: {{LAKEFS_blockstore_type | default(local) }}
    {%if LAKEFS_blockstore_type == 'local' %}
      LAKEFS_BLOCKSTORE_LOCAL_PATH: '/home/lakefs'
    {%elif LAKEFS_blockstore_type == 's3' %}
      LAKEFS_BLOCKSTORE_S3_ENDPOINT: {{ (s3Endpoint | replace('http://','')) if s3Endpoint is defined and s3Endpoint else omit}}
      LAKEFS_BLOCKSTORE_S3_REGION: {{s3DefaultRegion if s3DefaultRegion is defined and s3DefaultRegion else omit}}
      LAKEFS_BLOCKSTORE_S3_FORCE_PATH_STYLE: '{{s3PathStyleAccess}}'
      LAKEFS_BLOCKSTORE_S3_CREDENTIALS_ACCESS_KEY_ID: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      LAKEFS_BLOCKSTORE_S3_CREDENTIALS_SECRET_ACCESS_KEY: ${PLATYS_AWS_SECRET_ACCESS_KEY:-{{MINIO_secret_key}}}
    {% endif -%}   {#  LAKEFS_blockstore_type #}
      LAKEFS_AUTH_ENCRYPT_SECRET_KEY: ${LAKEFS_AUTH_ENCRYPT_SECRET_KEY:-some random secret string}
      LAKEFS_DATABASE_CONNECTION_STRING: "postgres://lakefs:lakefs@postgresql/lakefs?sslmode=disable"
      LAKEFS_GATEWAYS_S3_DOMAIN_NAME: ${LAKEFS_GATEWAYS_S3_DOMAIN_NAME:-s3.local.lakefs.io:8000}
      LAKEFS_LOGGING_LEVEL: {{LAKEFS_logging_level | default(INFO) }}
      LAKEFS_STATS_ENABLED: 'true'
      LAKEFS_COMMITTED_LOCAL_CACHE_DIR: ${LAKEFS_COMMITTED_LOCAL_CACHE_DIR:-/home/lakefs/.local_tier}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint: ["/app/wait-for", "postgresql:5432", "--", "/app/lakefs", "run"]
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  lakectl:
    image: treeverse/lakectl
    container_name: lakectl
    hostname: lakectl
    labels:
      com.platys.name: "lakefs"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint:
      - /bin/sh
      - -c
      - |
        while [ 1 -eq 1 ];do sleep 60;done
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  LAKEFS_enable #}

{% if MOSQUITTO_enable | default(false) %}
  #  ================================== Mosquitto ========================================== #
    {% for num in range(MOSQUITTO_nodes | default(1) ) %}
      {% set external_port_1 = 1883 + loop.index - 1 %}
      {% set external_port_2 = 9101 + loop.index -1 %}
  mosquitto-{{loop.index}}:
    image: eclipse-mosquitto:{{__MOSQUITTO_version}}
    hostname: mosquitto-{{loop.index}}
    container_name: mosquitto-{{loop.index}}
    labels:
      com.platys.name: "mosquitto"
    ports:
      - "{{external_port_1}}:1883"
      - "{{external_port_2}}:9001"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    {% if MOSQUITTO_volume_map_data %}
      - "./container-volume/mosquitto-{{loop.index}}:/mosquitto/data/"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
    {% endfor %}
{% endif %}   {#  MOSQUITTO_enable #}

{% if HIVEMQ3_enable | default(false) %}
  #  ================================== HiveMQ v3 ========================================== #
  hivemq3-1:
    image: hivemq/hivemq3:{{__HIVEMQ3_version}}
    hostname: hivemq3-1
    container_name: hivemq3-1
    labels:
      com.platys.name: "hivemq3"
      com.platys.webui.title: "HiveMQ 3 WebUI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28132"
    ports:
      - "1886:1883"
      - "28132:8080"
      - "28133:8000"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  HIVEMQ3_enable #}

{% if HIVEMQ4_enable | default(false) %}
  #  ================================== HiveMQ v4 ========================================== #
  hivemq4-1:
    image: hivemq/hivemq4:{{__HIVEMQ4_version}}
    hostname: hivemq4-1
    container_name: hivemq4-1
    labels:
      com.platys.name: "hivemq4"
      com.platys.webui.title: "HiveMQ 4 WebUI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28134"
    ports:
      - "1888:1883"
      - "28134:8080"
      - "28135:8000"
    environment:
#      HIVEMQ_LICENSE:
      HIVEMQ_LOG_LEVEL: INFO
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  HIVEMQ4_enable #}

{% if EMQX_enable | default(false) %}
  #  ================================== EMQX ========================================== #
  emqx-1:
  {% if (EMQX_edition | lower) == 'oss' %}
    image: emqx/emqx:{{__EMQX_oss_version}}
  {% else -%}   {#  EMQX_edition #}
    image: emqx/emqx-ee:{{__EMQX_enterprise_version}}
  {% endif -%}   {#  EMQX_edition #}
    hostname: emqx-1
    container_name: emqx-1
    labels:
    labels:
      com.platys.name: "emqx"
      com.platys.webui.title: "EMQX WebUI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28225"
      com.platys.restapi.title: "EMQX REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28225/api/v4/"
    ports:
      - "1891:1883"
      - "28221:8081"
      - "28222:8083"
      - "28223:8084"
      - "28224:8883"
      - "28225:18083"
    environment:
      EMQX_NAME: emqx-1
      EMQX_LOG__CONSOLE: console
      EMQX_ALLOW_ANONYMOUS: 'true'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  EMQX_enable #}

{% if MQTT_UI_enable | default(false) %}
  #  ================================== MQTT UI ========================================== #
  mqtt-ui:
    image: vergissberlin/hivemq-mqtt-web-client:{{__HIVEMQ_MQTT_WEB_CLIENT_version}}
    container_name: mqtt-ui
    hostname: mqtt-ui
    labels:
      com.platys.name: "hivemq-ui"
      com.platys.webui.title: "HiveMQ UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28136"
    ports:
      - '28136:80'
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  MQTT_UI_enable #}

{% if CEDALO_MANAGEMENT_CENTER_enable | default(false) %}
  #  ================================== Cedalo Management Center ========================================== #
  cedalo-management-center:
    image: cedalo/management-center:{{__CEDALO_MANAGEMENT_CENTER_version}}
    container_name: cedalo-management-center
    hostname: cedalo-management-center
    labels:
      com.platys.name: "cedalo-mc"
      com.platys.webui.title: "Cedalo Management Center UI"
#      com.platys.webui.url: "http://${PUBLIC_IP}:28175"
      com.platys.webui.url: "http://${PUBLIC_IP}:8088"
    expose:
      - 8088
    ports:
      - 8088:8088
    environment:
      CEDALO_MC_BROKER_ID: mosquitto-2.0
      CEDALO_MC_BROKER_NAME: Mosquitto 2.0
      CEDALO_MC_BROKER_URL: mqtt://mosquitto-1:1883
      CEDALO_MC_BROKER_USERNAME: default
      CEDALO_MC_BROKER_PASSWORD: ""
      CEDALO_MC_PROXY_CONFIG_DIR: /management-center/config/config.json
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
#     - ./config:/management-center/backend/config
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  CEDALO_MANAGEMENT_CENTER_enable #}

{% if THINGSBOARD_enable | default(false) %}
  #  ================================== Cedalo Management Center ========================================== #
  thingsbaord:
    image: thingsboard/tb-postgres:{{__THINGSBOARD_version}}
    container_name: thingsbaord
    hostname: thingsbaord
    labels:
      com.platys.name: "thingsbaord"
      com.platys.webui.title: "Thingsboard UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28200"
    ports:
      - "28200:9090"
      - "28201:1883"
      - "28202:5683/udp"
    environment:
      TB_QUEUE_TYPE: kafka
      TB_KAFKA_SERVERS: kafka-1:19092
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if THINGSBOARD_volume_map_data %}
      - ./container-volume/thingsboard/data:/data
    {% endif -%}   {#  THINGSBOARD_volume_map_data #}
    {% if THINGSBOARD_volume_map_log %}
      - ./container-volume/thingsboard/log:/var/log/thingsboard
    {% endif -%}   {#  THINGSBOARD_volume_map_log #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  THINGSBOARD_enable #}

{% if ACTIVEMQ_enable | default(false) %}
  #  ================================== Active MQ ========================================== #
  activemq:
    image: rmohr/activemq:{{__ACTIVEMQ_version}}
    container_name: activemq
    labels:
      com.platys.name: "activemq"
      com.platys.webui.title: "ActiveMQ UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8161"
    ports:
      # mqtt
      - "1890:1883"
      # amqp
      - "5672:5672"
      # ui
      - "8161:8161"
      # stomp
      - "61613:61613"
      # ws
      - "61614:61614"
      # jms
      - "61616:61616"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if ACTIVEMQ_volume_map_data %}
      - ./container-volume/activemq/data:/opt/activemq/data
    {% endif -%}   {#  ACTIVEMQ_volume_map_data #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ACTIVEMQ_enable #}

{% if RABBITMQ_enable | default(false) %}
  #  ================================== Active MQ ========================================== #
  rabbitmq:
    image: rabbitmq:{{__RABBITMQ_version}}
    container_name: rabbitmq
    hostname: rabbitmq
    labels:
      com.platys.name: "rabbitmq"
      com.platys.webui.title: "RabbitMQ UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:15672"
    ports:
      - 5673:5672
      - 15672:15672
    environment:
      RABBITMQ_ERLANG_COOKIE: "62cd4092-dbb3-4e7a-ac6d-ffd7cee850ee"
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: abc123!
    volumes:
      - ./data-transfer:/data-transfer
    {% if RABBITMQ_volume_map_data %}
      - ./container-volume/rabbitmq/data:/var/lib/rabbitmq/
    {% endif -%}   {#  RABBITMQ_volume_map_data #}
    {% if RABBITMQ_volume_map_logs %}
      - ./container-volume/rabbitmq/logs/:/var/log/rabbitmq/
    {% endif -%}   {#  RABBITMQ_volume_map_logs #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  RABBITMQ_enable #}

{% if FTP_enable | default(false) %}
  #  ================================== FTP Server ========================================== #
  ftp:
    image: stilliard/pure-ftpd:{{__FTP_PUREFTPD_version}}
    container_name: ftp
    hostname: ftp
    labels:
      com.platys.name: "pure-ftp"
    environment:
#      - PUBLICHOST="192.168.73.86"
      - PUBLICHOST=ftp
      - FTP_USER_NAME={{FTP_username}}
      - FTP_USER_PASS={{FTP_password}}
      - FTP_USER_HOME=/home/ftp-data
      - FTP_MAX_CLIENTS=9
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    ports:
      - "21:21"
      - "30000-30009:30000-30009"
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  #  ================================== Filezilla ========================================== #
  filezilla:
    image: jlesage/filezilla:{{__FTP_FILEZILLA_version}}
    container_name: filezilla
    hostname: filezilla
    labels:
      com.platys.name: "pure-ftp"
      com.platys.webui.title: "Filezilla UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:5800"
    ports:
      - "5800:5800"
      - "5900:5900"
    environment:
      - VNC_PASSWORD={{admin_password}}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
#    volumes:
#      - "/docker/appdata/filezilla:/config:rw"
#      - "/files:/storage:rw"
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  FTP_enable #}

{% if CAMUNDA_BPM_PLATFORM_enable | default(false) %}
  #  ================================== Camunda Optimize ========================================== #
  bpm-platform:
    image: registry.camunda.cloud/cambpm-ee/camunda-bpm-platform-ee:{{__CAMUNDA_BPM_PLATFORM_version}}
    container_name: bpm-platform
    hostname: bpm-platform
    labels:
      com.platys.name: "camunda-bpm-platform"
      com.platys.webui.title: "Camunda BPM Platform UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28263/camunda-welcome/index.html"
      com.platys.restapi.title: "Camunda BPM Platform Rest-API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28263/engine-rest"
    ports:
      - 28263:8080
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    mem_limit: 1g
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  CAMUNDA_BPM_PLATFORM_enable #}

{% if CAMUNDA_OPTIMIZE_enable | default(false) %}
  #  ================================== Camunda Optimize ========================================== #
  optimize:
    image: registry.camunda.cloud/optimize-ee/optimize:{{__CAMUNDA_OPTIMIZE_version}}
    container_name: optimize
    hostname: optimize
    labels:
      com.platys.name: "camunda-optimize"
      com.platys.webui.title: "Camunda Optimize UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28264"
    ports:
      - 28264:8090
    environment:
      JAVA_OPTS: "-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m"
      OPTIMIZE_CAMUNDABPM_REST_URL: "http://bpm-platform:8080/engine-rest"
      OPTIMIZE_ELASTICSEARCH_HOST: "elasticsearch-1"
      OPTIMIZE_CAMUNDA_BPM_EVENT_IMPORT_ENABLED: "true"
      OPTIMIZE_EVENT_BASED_PROCESSES_IMPORT_ENABLED: "true"
      OPTIMIZE_EVENT_BASED_PROCESSES_USER_IDS: "demo"
      OPTIMIZE_EVENT_INGESTION_ACCESS_TOKEN: "mytoken"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
#      - ./conf/camunda-optimize/environment-config.yaml:/optimize/config/environment-config.yaml
      - ./custom-conf/camunda/CamundaLicense.txt:/optimize/config/OptimizeLicense.txt
    mem_limit: 2g
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  CAMUNDA_OPTIMIZE_enable #}

{% if CAMUNDA_ZEEBE_enable | default(false) %}
  #  ================================== Penthao Webspoon ========================================== #
  zeebe-1:
    image: camunda/zeebe:{{__CAMUNDA_ZEEBE_version}}
    container_name: zeebe-1
    hostname: zeebe-1
    labels:
      com.platys.name: "camunda-zeebe"
    ports:
      - '26500:26500'
      - '9600:9600'
      - '5705:5705'
    environment:
      ZEEBE_LOG_LEVEL: debug
      ZEEBE_INSECURE_CONNECTION: "true"
      ZEEBE_HAZELCAST_PORT: 5705
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if CAMUNDA_ZEEBE_volume_map_data %}
      - ./container-volume/camunda/zebee/data:/usr/local/zeebe/data
    {% endif -%}   {#  ZEEBE_volume_map_data #}
      - ./conf/camunda/zeebe/application.yaml:/usr/local/zeebe/config/application.yaml
      - ./plugins/camunda/zeebe/zeebe-hazelcast-exporter-0.10.0.jar:/usr/local/zeebe/exporters/zeebe-hazelcast-exporter.jar
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% if CAMUNDA_OPERATE_enable | default(false) %}
  operate:
    image: camunda/operate:{{__CAMUNDA_OPERATE_version}}
    container_name: operate
    hostname: operate
    labels:
      com.platys.name: "camunda-operate"
      com.platys.webui.title: "Camunda Operate UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28207"
    ports:
      - '28207:8080'
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/camunda/operate/application.yaml:/usr/local/operate/config/application.yml
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  CAMUNDA_OPERATE_enable #}

  {% if CAMUNDA_ZEEQS_enable | default(false) %}
  zeeqs:
    image: camunda/zeeqs:{{__CAMUNDA_ZEEQS_version}}
    container_name: zeeqs
    hostname: zeeqs
    labels:
      com.platys.name: "camunda-zeeqs"
      com.platys.webui.title: "Camunda Zeeqs GraphQL UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28208/graphiql"
    ports:
      - '28208:9000'
    environment:
      zeebe.client.worker.hazelcast.connection: 'zeebe-1:5705'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  CAMUNDA_ZEEQS_enable #}
{% endif %}   {#  CAMUNDA_ZEEBE_enable #}

{% if PENTHAO_enable | default(false) %}
  #  ================================== Penthao Webspoon ========================================== #
  penthao:
    image: hiromuhota/webspoon:{{__PENTHAO_version}}
    container_name: penthao
    hostname: penthao
    labels:
      com.platys.name: "penthao"
      com.platys.webui.title: "Penthao UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28154"
    ports:
      - '28154:8080'
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  PENTHAO_enable #}

{% if DBT_enable | default(false) %}
  #  ================================== DBT (Data Build Tool) ========================================== #
  dbt-cli:
    image: xemuliam/dbt:{{__DBT_version}}
    container_name: dbt-cli
    hostname: dbt-cli
    labels:
      com.platys.name: "dbt"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./data-transfer/dbt:/usr/app
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    entrypoint:
      - /bin/sh
      - -c
      - |
        while [ 1 -eq 1 ];do sleep 60;done
    restart: {{container_restart_policy}}
{% endif %}   {#  DBT_enable #}

{% if CODE_SERVER_enable | default(false) %}
  #  ================================== Code-Server IDE (VS Code in Browser) ================= #
  code-server:
    image: trivadis/code-server:{{__CODE_SERVER_version}}
    container_name: code-server
    hostname: code-server
    labels:
      com.platys.name: "code-server"
      com.platys.webui.title: "Code-Server UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28140"
    user: 0:0
    ports:
      - 28140:8080
    environment:
      PASSWORD: 'abc123!'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/home/coder/data-transfer
    {% if CODE_SERVER_volume_map_platform_root %}
      - ../:/home/coder/platform-root:Z
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: unless-stopped
{% endif %}   {# CODE_SERVER_enable #}

{% if MOCK_SERVER_enable | default(false) %}
  #  ================================== MockServer ========================================== #
  mockserver:
    image: mockserver/mockserver:{{__MOCK_SERVER_version}}
    container_name: mockserver
    hostname: mockserver
    labels:
      com.platys.name: "mockserver"
      com.platys.webui.title: "MockServer UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28273/mockserver/dashboard"
    ports:
      - 28273:1090
    environment:
      MOCKSERVER_SERVER_PORT: 1090
      MOCKSERVER_LOG_LEVEL: {{MOCK_SERVER_log_level | default(DEBUG)}}
    {% if MOCK_SERVER_persist_expectations | default(false) %}
      MOCKSERVER_PERSIST_EXPECTATIONS: {{MOCK_SERVER_persist_expectations}}
      MOCKSERVER_PERSISTED_EXPECTATIONS_PATH: {{MOCK_SERVER_persisted_expecations_path}}
    {% endif -%}   {#  MOCK_SERVER_persist_expectations #}
    {% if MOCK_SERVER_initialization_json_file is defined and MOCK_SERVER_initialization_json_file|length %}
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/{{MOCK_SERVER_initialization_json_file}}
    {% endif -%}   {#  MOCK_SERVER_initialization_json_file #}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - /var/run/docker.sock:/var/run/docker.sock
    {% if MOCK_SERVER_initialization_json_file is defined and MOCK_SERVER_initialization_json_file|length %}
      - /scripts/mockserver/:/config
    {% endif -%}   {#  MOCK_SERVER_initialization_json_file #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: --admin-password '$$2y$$05$$NrPTXkUOIHTTbdHUqdAZVuSbncaZ9frWZYXDbA4v/WYqY0nAY1Sui'
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# MOCK_SERVER_enable #}

{% if EXCALIDRAW_enable | default(false) %}
  #  ================================== Excalidraw ================= #
  excalidraw:
    image: excalidraw/excalidraw:{{__EXCALIDRAW_version}}
    container_name: excalidraw
    hostname: excalidraw
    labels:
      com.platys.name: "excalidraw"
      com.platys.webui.title: "Excalidraw UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28231"
    ports:
      - 28231:80
    stdin_open: true
    healthcheck:
      disable: true
    environment:
      NODE_ENV: 'development'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/home/coder/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: unless-stopped
{% endif %}   {# EXCALIDRAW_enable #}

{% if FIREFOX_enable | default(false) %}
  #  ================================== Firefox Browser ================= #
  firefox:
    image: jlesage/firefox:{{__FIREFOX_version}}
    container_name: firefox
    hostname: firefox
    labels:
      com.platys.name: "firefox"
      com.platys.webui.title: "Firefox UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:{{80 if (FIREFOX_use_port_80 | default(true) )  else 5801 }}"
    ports:
      - "{{80 if (FIREFOX_use_port_80 | default(true) )  else 5801 }}:5800"
    shm_size: 2g
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/home/coder/data-transfer
      - /container-volume/firefox:/config:rw
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: unless-stopped
{% endif %}   {# CODE_SERVER_enable #}

{% if FILE_BROWSER_enable | default(false) %}
  #  ================================== File Browser ================= #
  file-browser:
    image: filebrowser/filebrowser:{{__FILE_BROWSER_version}}
    container_name: file-browser
    hostname: file-browser
    labels:
      com.platys.name: "file-browser"
      com.platys.webui.title: "File Browser UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28178"
    ports:
      - 28178:80
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/srv
      - ./conf/filebrowser/filebrowser.json:/.filebrowser.json
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: unless-stopped
{% endif %}   {# FILE_BROWSER_enable #}

{% if VAULT_enable | default(false) %}
  #  ================================== Vault ================= #
  vault:
    image: vault:{{__VAULT_version}}
    container_name: vault
    hostname: vault
    labels:
      com.platys.name: "vault"
      com.platys.webui.title: "Vault UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8200"
    ports:
      - 8200:8200
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
#      - VAULT_LOCAL_CONFIG='{"listener": [{"tcp":{"address": "0.0.0.0:8200","tls_disable":"0", "tls_cert_file":"/data/vault-volume/certificate.pem", "tls_key_file":"/data/vault-volume/key.pem"}}], "default_lease_ttl": "168h", "max_lease_ttl": "720h"}, "ui": true}'
      - VAULT_API_ADDR=http://0.0.0.0:8200
      - VAULT_ADDRESS=http://0.0.0.0:8200
    {% if VAULT_use_dev_mode | default(false) %}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_DEV_ROOT_TOKEN_ID=abc123!
    {% endif -%}   {#  VAULT_use_dev_mode #}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/vault/config:/vault/config
    {% if VAULT_use_dev_mode %}
      - "./container-volume/vault/data:/vault/data"
    {% endif -%}   {#  VAULT_use_dev_mode #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    cap_add:
      - IPC_LOCK
    command: vault server {{"-dev" if VAULT_use_dev_mode else "-config=/vault/config/vault.json"}}
{% endif %}   {#  VAULT_enable #}

{% if KEYCLOAK_enable | default(false) %}
  #  ================================== Keycloak ================= #
  keycloak:
    image: jboss/keycloak:{{__KEYCLOAK_version}}
    hostname: keycloak
    container_name: keycloak
    labels:
      com.platys.name: "keycloak"
      com.platys.webui.title: "Keycloak UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28204"
    ports:
      - "28204:8080"
    environment:
      KEYCLOAK_USER: "admin"
      KEYCLOAK_PASSWORD: "abc123!"
      KEYCLOAK_IMPORT: "{{KEYCLOAK_import_realms}}"
      KEYCLOAK_FRONTEND_URL: "http://${PUBLIC_IP}:28204/auth"
      KEYCLOAK_LOGLEVEL: "{{KEYCLOAK_loglevel}}"
      ROOT_LOGLEVEL: "INFO"
    {%if (KEYCLOAK_db_vendor | lower) == 'postgres' | default(false) %}
      DB_VENDOR: postgres
      DB_ADDR: postgresql
      DB_DATABASE: keycloakdb
      DB_USER: keycloak
      DB_PASSWORD: abc123!
    {% endif -%}   {#  KEYCLOAK_db_vendor #}
    {%if (KEYCLOAK_db_vendor | lower) == 'mysql' | default(false) %}
      DB_VENDOR: mysql
      DB_ADDR: mysql
      DB_DATABASE: keycloakdb
      DB_USER: keycloak
      DB_PASSWORD: abc123!
    {% endif -%}   {#  KEYCLOAK_db_vendor #}
    {%if (KEYCLOAK_db_vendor | lower) == 'mssql' | default(false) %}
      DB_VENDOR: mssql
      DB_ADDR: sqlserver
      DB_DATABASE: Keycloak
      DB_USER: sa
      DB_PASSWORD: abc123!
    {% endif -%}   {#  KEYCLOAK_db_vendor #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/apicurio-registry/apicurio-realm{{"-with-users" if APICURIO_auth_import_default_users}}.json:/tmp/apicurio-realm.json
      - ./scripts/keycloak/keycloak-export.sh:/opt/jboss/keycloak/bin/keycloak-export.sh
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
    {% endif -%}   {#  use_timezone #}
{% endif %}   {#  KEYCLOAK_enable #}

{% if POSTMAN_enable | default(false) %}
  #  ================================== Postman ================= #
  postman:
    image: quay.io/microcks/microcks-postman-runtime:{{__POSTMAN_version}}
    container_name: postman
    hostname: postman
    labels:
      com.platys.name: "postman"
      com.platys.webui.title: "Postman UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:3010"
    ports:
      - 3010:3000
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  POSTMAN_enable #}

{% if SWAGGER_EDITOR_enable | default(false) %}
  #  ================================== Swagger Editor ================= #
  swagger-editor:
    image: swaggerapi/swagger-editor:{{__SWAGGER_EDITOR_version}}
    container_name: swagger-editor
    hostname: swagger-editor
    labels:
      com.platys.name: "swagger-editor"
      com.platys.webui.title: "Swagger Editor UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28156"
    ports:
      - 28156:8080
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  SWAGGER_EDITOR_enable #}

{% if SWAGGER_UI_enable | default(false) %}
  #  ================================== Swagger UI ================= #
  swagger-ui:
    image: swaggerapi/swagger-ui:{{__SWAGGER_EDITOR_version}}
    container_name: swagger-ui
    hostname: swagger-ui
    labels:
      com.platys.name: "swagger-ui"
      com.platys.webui.title: "Swagger UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28157"
    ports:
      - 28157:8080
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  SWAGGER_UI_enable #}

{% if MICROCKS_enable | default(false) %}
  #  ================================== Microck ================= #
  microcks:
    image: quay.io/microcks/microcks:{{__MICROCKS_version}}
    container_name: microcks
    hostname: microcks
    labels:
      com.platys.name: "microcks"
      com.platys.webui.title: "Microcks UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28203"
    ports:
      - 28203:8080
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017
      - SPRING_DATA_MONGODB_DATABASE=microcks
      - POSTMAN_RUNNER_URL=http://postman:3000
      - TEST_CALLBACK_URL=http://microcks:8080
      - SERVICES_UPDATE_INTERVAL=0 0 0/2 * * *
      - KEYCLOAK_URL=http://keycloak:8080/auth
      - KEYCLOAK_PUBLIC_URL=http://localhost:18080/auth
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  MICROCKS_enable #}

{% if OTEL_COLLECTOR_enable | default(false) %}
  #  ======================= OpenTelemetry Collector ================= #
  otel-collector:
    image: otel/opentelemetry-collector-contrib-dev:{{__OTEL_COLLECTOR_version}}
    container_name: otel-collector
    hostname: otel-collector
    labels:
      com.platys.name: "otel-collector"
    ports:
      - "4317:4317"        # OTLP gRPC receiver
      - "4318:4318"        # OTLP gRPC receiver
#      - "1888:1888"   # pprof extension
      - "28261:8888"   # Prometheus metrics exposed by the collector
      - "28262:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
#      - "55670:55679" # zpages extension
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./{{"custom-" if OTEL_COLLECTOR_use_custom_conf}}conf/otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: ["--config=/etc/otel-collector-config.yaml"]
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

{% endif %}   {# OTEL_COLLECTOR_enable #}

{% if ZIPKIN_enable | default(false) %}
  #  ================================== Zipkin ========================================== #
  zipkin:
    {%if ZIPKIN_collect_kafka and KAFKA_enable | default(false) %}
    image: ghcr.io/openzipkin/zipkin:{{__ZIPKIN_version}}
    {% else %}
    image: ghcr.io/openzipkin/zipkin-slim:{{__ZIPKIN_version}}
    {% endif -%}   {#  KAFKA_enable #}
    container_name: zipkin
    hostname: zipkin
    labels:
      com.platys.name: "zipkin"
      com.platys.webui.title: "Zipkin UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:9411"
      com.platys.restapi.title: "Zipkin API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:9411/api/v2/spans"
    ports:
      - 9411:9411
    environment:
      STORAGE_TYPE: {{ZIPKIN_storage_type | lower}}
    {%if (ZIPKIN_storage_type | lower) == 'mysql' | default(false) %}
      MYSQL_HOST: mysql
    {% endif -%}   {#  ZIPKIN_storage_type #}
    {%if (ZIPKIN_storage_type | lower) == 'elasticsearch' | default(false) %}
      ES_HOST: elasticsearch
    {% endif -%}   {#  ZIPKIN_storage_type #}
    {%if (ZIPKIN_storage_type | lower) == 'cassandra3' | default(false) %}
      CASSANDRA_ENSURE_SCHEMA: false
      CASSANDRA_CONTACT_POINTS: cassandra
      # CASSANDRA_USERNAME: cassandra
      # CASSANDRA_PASSWORD: cassandra
    {% endif -%}   {#  ZIPKIN_storage_type #}
    {%if ZIPKIN_collect_kafka and KAFKA_enable | default(false) %}
      KAFKA_BOOTSTRAP_SERVERS: "{{ns.bootstrapServers}}"
    {% endif -%}   {#  KAFKA_enable #}
      #SELF_TRACING_ENABLED: true
      #JAVA_OPTS: '-Xms128m -Xmx128m -XX:+ExitOnOutOfMemoryError'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if ZIPKIN_debug | default(false) %}
    command: --logging.level.zipkin2=DEBUG
    {% endif -%}   {#  ZIPKIN_debug #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  zipkin-dependencies:
    image: ghcr.io/openzipkin/zipkin-dependencies
    container_name: zipkin-dependencies
    hostname: zipkin-dependencies
    labels:
      com.platys.name: "zipkin-dependencies"
      com.platys.webui.title: "Zipkin Dependencies UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:9411/dependency"
    environment:
      STORAGE_TYPE: {{ZIPKIN_storage_type | lower}}
    {%if (ZIPKIN_storage_type | lower) == 'mysql' | default(false) %}
      MYSQL_HOST: mysql
    {% endif -%}   {#  ZIPKIN_storage_type #}
    {%if (ZIPKIN_storage_type | lower) == 'elasticsearch' | default(false) %}
      ES_HOST: elasticsearch
    {% endif -%}   {#  ZIPKIN_storage_type #}
    {%if (ZIPKIN_storage_type | lower) == 'cassandra3' | default(false) %}
      CASSANDRA_ENSURE_SCHEMA: false
      CASSANDRA_CONTACT_POINTS: cassandra
      # CASSANDRA_USERNAME: cassandra
      # CASSANDRA_PASSWORD: cassandra
    {% endif -%}   {#  ZIPKIN_storage_type #}
    {%if ZIPKIN_debug | default(false) %}
      ZIPKIN_LOG_LEVEL: DEBUG
    {% endif -%}   {#  ZIPKIN_debug #}
      # Uncomment to adjust memory used by the dependencies job
      JAVA_OPTS: '-verbose:gc -Xms1G -Xmx1G'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint: crond -f
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

{% endif %}   {# ZIPKIN_enable #}

{% if JAEGER_enable | default(false) %}
  #  ================================== Jaeger ========================================== #
  jaeger:
    image: jaegertracing/all-in-one:{{__JAEGER_version}}
    container_name: jaeger
    hostname: jaeger
    labels:
      com.platys.name: "jaeger"
      com.platys.webui.title: "Jaeger UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:16686"
      com.platys.restapi.title: "Jaeger Zipkin API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:{{JAEGER_zipkin_port}}/api/v2/spans"
    ports:
      - 16686:16686
      - 14271:14271
      - 5778:5778
      - 14250:14250
      - 6831:6831/udp
      - 6832:6832/udp
      - {{JAEGER_zipkin_port}}:{{JAEGER_zipkin_port}}
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":{{JAEGER_zipkin_port}}"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# JAEGER_enable #}

{% if PITCHFORK_enable | default(false) %}
  #  =================== Pitchfork ================= #
  pitchfork:
    image: hotelsdotcom/pitchfork:{{__PITCHFORK_version}}
    container_name: pitchfork
    hostname: pitchfork
    labels:
      com.platys.name: "pitchfork"
      com.platys.restapi.title: "Zipkin API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:{{PITCHFORK_server_port}}/api/v2/spans"
    ports:
      - {{PITCHFORK_server_port}}:{{PITCHFORK_server_port}}
    environment:
      SERVER_PORT: {{PITCHFORK_server_port}}
      PITCHFORK_FORWARDERS_LOGGING_ENABLED: "{{PITCHFORK_use_logging}}"
      PITCHFORK_FORWARDERS_LOGGING_LOG_FULL_SPAN: "true"
      PITCHFORK_FORWARDERS_ZIPKIN_HTTP_ENABLED: "{{PITCHFORK_use_zipkin_http}}"
      PITCHFORK_FORWARDERS_ZIPKIN_HTTP_ENDPOINT: "http://zipkin:9411/api/v2/spans"
      PITCHFORK_FORWARDERS_HAYSTACK_KAFKA_ENABLED: "{{PITCHFORK_use_haystack_kafka}}"
      PITCHFORK_FORWARDERS_HAYSTACK_KAFKA_BOOTSTRAP_SERVERS: "{{ns.bootstrapServers}}"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  PITCHFORK_enable #}


{% if PROMTAIL_enable | default(false) %}
  #  ================================== Promtail ========================================== #
  promtail:
    image: grafana/promtail:{{__PROMTAIL_version}}
    hostname: promtail
    container_name: promtail
    labels:
      com.platys.name: "promtail"
    volumes:
      - ./data-transfer:/data-transfer
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./conf/promtail/promtail-config.yaml:/etc/promtail/config.yaml
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: -config.file=/etc/promtail/config.yaml
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  PROMTAIL_enable  #}

{% if LOKI_enable | default(false) %}
  #  ================================== Grafana ========================================== #
  loki:
    image: grafana/loki:{{__LOKI_version}}
    hostname: loki
    container_name: loki
    labels:
      com.platys.name: "loki"
      com.platys.restapi.title: "Loki UI"
      com.platys.restapi.url: "http://${PUBLIC_IP}:3100"
    expose:
      - 3100
    ports:
      - "3100:3100"
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: -config.file=/etc/loki/local-config.yaml
    restart: {{container_restart_policy}}
{% endif %}   {#  LOKI #}

{% if TEMPO_enable | default(false) %}
  #  ================================== Tempo ========================================== #
  tempo:
    image: grafana/tempo:{{__TEMPO_version}}
    hostname: tempo
    container_name: tempo
    labels:
      com.platys.name: "tempo"
    ports:
      - "3200:3200" # tempo
      - "14268"     # jaeger ingest
      - "55680"     # otlp grpc
      - "55681"     # otlp http
      - "9411"      # zipkin
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./{{"custom-" if TEMPO_use_custom_conf}}conf/tempo/tempo.yaml:/etc/tempo.yaml
      - ./{{"custom-" if TEMPO_use_custom_conf}}conf/tempo/overrides.yaml:/etc/overrides.yaml
    {% if TEMPO_volume_map_data %}
      - ./container-volume/tempo/data:/tmp/tempo
    {% endif -%}   {#  TEMPO_volume_map_data #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: ["--config.file=/etc/tempo.yaml", "--search.enabled=true"]
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}

  {% if TEMPO_with_tempo_query | default(false) %}
  tempo-query:
    image: grafana/tempo-query:{{__TEMPO_version}}
    hostname: tempo-query
    container_name: tempo-query
    labels:
      com.platys.name: "tempo"
      com.platys.webui.title: "Tempo Jaeger Query UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28266"
    ports:
      - "28266:16686"  # jaeger-ui
    environment:
      BACKEND: tempo:80
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
#      - ./conf/tempo/tempo-query.yaml:/etc/tempo-query.yaml
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    logging:
      driver: loki
      options:
        loki-url: 'http://host.docker.internal:3100/loki/api/v1/push'
    #command: ["--grpc-storage-plugin.configuration-file=/etc/tempo-query.yaml"]
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  TEMPO_with_tempo_query #}
{% endif %}   {#  TEMPO_enable #}

{% if GRAFANA_enable | default(false) %}
  #  ================================== Grafana ========================================== #
  grafana:
    image: grafana/grafana:{{__GRAFANA_version}}
    hostname: grafana
    container_name: grafana
    labels:
      com.platys.name: "grafana"
      com.platys.webui.title: "Grafana UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:3000"
    expose:
      - 3000
    ports:
      - "3000:3000"
    environment:
      - GF_INSTALL_PLUGINS={{GRAFANA_install_plugins}}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD={{admin_password}}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE={{GRAFANA_feature_toggles}}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/grafana:/etc/grafana/provisioning
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {#  GRAFANA_enable #}

{% if PORTAINER_enable | default(false) %}
  #  ================================== Portainer ========================================== #
  portainer:
    image: portainer/portainer-ce:{{__PORTAINER_version}}
    container_name: portainer
    hostname: portainer
    labels:
      com.platys.name: "portainer"
      com.platys.webui.title: "Portainer UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28137"
    ports:
      - 28137:9000
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - /var/run/docker.sock:/var/run/docker.sock
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: --admin-password '$$2y$$05$$NrPTXkUOIHTTbdHUqdAZVuSbncaZ9frWZYXDbA4v/WYqY0nAY1Sui'
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# PORTAINER_enable #}

{% if CADVISOR_enable | default(false) %}
  #  ================================== cAdvisor ========================================== #
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:{{__CADVISOR_version}}
    container_name: cadvisor
    hostname: cadvisor
    labels:
      com.platys.name: "cadvisor"
      com.platys.webui.title: "cAdvisor UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28138"
    ports:
      - 28138:8080
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    devices:
      - "/dev/kmsg"
    tty: true
    privileged: true
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# CADVISOR_enable #}

{% if HAWTIO_enable | default(false) %}
  #  ================================== Hawtio ========================================== #
  hawtio:
    image: erikwramner/hawtio:{{__HAWTIO_version}}
    container_name: hawtio
    hostname: hawtio
    labels:
      com.platys.name: "hawtio"
      com.platys.webui.title: "Hawtio UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28155"
    ports:
      - "28155:8080"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# HAWTIO_enable #}

{% if WETTY_enable | default(false) %}
  #  ================================== Wetty ========================================== #
  {% set externalPort = 3001 + dataCenterId %}
  wetty{{dataCenter}}:
    image: svenihoney/wetty:{{__WETTY_version}}
    container_name: wetty{{dataCenter}}
    hostname: wetty{{dataCenter}}
    labels:
      com.platys.name: "wetty"
      com.platys.webui.title: "WeTTY UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:{{externalPort}}"
    ports:
      - "{{externalPort}}:3000"
    environment:
      - REMOTE_SSH_SERVER=${DOCKER_HOST_IP}
      - REMOTE_SSH_PORT=22
      - REMOTE_SSH_USER=
      - WETTY_PORT=3000
    {%if use_timezone | default(false) %}
      - TZ='{{use_timezone}}'
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# WETTY_enable #}

{% if PYTHON_enable | default(false) %}
  #  ================================== python ========================================== #
  python-1:
    image: {{PYTHON_image}}:{{__PYTHON_VERSION}}
    container_name: python-1
    hostname: python-1
    labels:
      com.platys.name: "python"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/python/run_pip_and_python.sh:/app/run_pip_and_python.sh:ro
    {% if PYTHON_artefacts_folder is defined and PYTHON_artefacts_folder|length %}
      - {{PYTHON_artefacts_folder}}:/tmp:ro
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {% if PYTHON_requirements_file is defined and PYTHON_requirements_file|length %}
    command: ['/app/run_pip_and_python.sh', '/tmp/{{PYTHON_script_file}}', '/tmp/{{PYTHON_requirements_file}}']
    {% else %}
    command: ['/app/run_pip_and_python.sh', '/tmp/{{PYTHON_script_file}}']
    {% endif -%}   {#  PYTHON_requirements_file #}
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# PYTHON_enable #}

{% if MARKDOWN_VIEWER_enable | default(false) %}
  #  ================================== markdown-viewer ========================================== #
  markdown-viewer{{dataCenter}}:
    image: trivadis/markdown-web:{{__MARKDOWN_VIEWER_version}}
    container_name: markdown-viewer{{dataCenter}}
    hostname: markdown-viewer{{dataCenter}}
    labels:
      com.platys.name: "markdown-viewer"
      com.platys.webui.title: "Markdown Viewer UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:{{80 + (dataCenterId * 1) if (MARKDOWN_VIEWER_use_port_80 | default(true) )  else 8000 }}"
    ports:
      - "{{80 + (dataCenterId * 1) if (MARKDOWN_VIEWER_use_port_80 | default(true) )  else 8000 }}:80"
    volumes:
      - ./artefacts:/home/python/markdown
      - ./data-transfer:/data-transfer
    restart: {{container_restart_policy}}

  markdown-renderer{{dataCenter}}:
    image: trivadis/jinja2-renderer:latest
    container_name: markdown-renderer{{dataCenter}}
    hostname: markdown-renderer{{dataCenter}}
    labels:
      com.platys.name: "markdown-renderer"
    environment:
      USE_PUBLIC_IP: "{{MARKDOWN_VIEWER_use_public_ip | default(true) }}"
      PUBLIC_IP: '${PUBLIC_IP}'
      DOCKER_HOST_IP: '${DOCKER_HOST_IP}'
      DATAPLATFORM_HOME: '${DATAPLATFORM_HOME}'
      PLATYS_PLATFORM_NAME: {{platys['platform-name']}}
      PLATYS_PLATFORM_STACK: {{platys['platform-stack']}}
      PLATYS_PLATFORM_STACK_VERSION: {{platys['platform-stack-version']}}
      PLATYS_COPY_COOKBOOK_DATA: '{{copy_cookbook_data_folder}}'
    volumes:
      - ./artefacts/templates:/templates
      - ./artefacts/templates:/scripts
      - .:/variables
      - ./artefacts:/output
      - ./data-transfer:/data-transfer
{% endif %}   {# MARKDOWN_VIEWER_enable #}

{% if LOG4BRAINS_enable | default(false) %}
  #  ================================== markdown-viewer ========================================== #
  log4brains:
    image: {{LOG4BRAINS_repository_name | default(trivadis) }}/{{LOG4BRAINS_image_name | default(log4brains) }}:{{__LOG4BRAINS_version}}
    container_name: log4brains
    hostname: log4brains
    labels:
      com.platys.name: "log4brains"
      com.platys.webui.title: "log4brains UI (ADR Viewer)"
      com.platys.webui.url: "http://${PUBLIC_IP}:4004"
    ports:
      - "4004:4004"
    volumes:
    {% if LOG4BRAINS_adr_source_dir is defined and LOG4BRAINS_adr_source_dir | length %}
      - {{LOG4BRAINS_adr_source_dir}}:/opt/adr
    {% endif -%}   {# LOG4BRAINS_adr_source_dir is defined #}
      - ./data-transfer:/data-transfer
    command: ["log4brains", "{{LOG4BRAINS_command}}"]
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
{% endif %}   {# LOG4BRAINS_enable #}

{% if WATCHTOWER_enable | default(false) %}
  #  ================================== watchtower ========================================== #
  watchtower:
    image: containrrr/watchtower:{{__WATCHTOWER_version}}
    container_name: watchtower
    hostname: watchtower
    labels:
      com.platys.name: "watchtower"
    volumes:
      - ./data-transfer:/data-transfer
    {%if WATCHTOWER_map_config_json %}
      - ${HOME}/.docker/config.json:/config.json
    {% endif -%}
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --label-enable --interval 60 --trace --debug
    {%if LOKI_collect_docker_logs | default(false) %}
    <<: *logging
    {% endif -%}   {#  LOKI_collect_docker_logs #}
    restart: {{container_restart_policy}}
{% endif %}   {# WATCHTOWER_enable #}

{% if PROVISIONING_DATA_enable | default(false) %}
  #  ================================== data-provisioning ========================================== #
  data-provisioning:
    image: trivadis/platys-modern-data-platform-data:{{__PROVISIONING_DATA_version}}
    container_name: data-provisioning
    hostname: data-provisioning
    labels:
      com.platys.name: "data-provisioning"
    volumes:
      - ./data-transfer:/data-transfer
{% endif %}   {# PROVISIONING_DATA_enable #}

volumes:
  data-transfer-vol:
    name: data_transfer_vol
{%if AIRBYTE_volume_map_data %}
  airbyte-workspace-vol:
    name: airbyte_workspace_vol
  airbyte-db-vol:
    name: airbyte_db_vol
{% endif %}
